//
// Half-Life game definition file (.fgd)
// for Jackhammer 1.0 and above
//
// updated by Chris Bokitch
// autolycus@valvesoftware.com
// http://www.valve-erc.com/
// modified by XaeroX / support@hlfx.ru
// changes and additions by FreeSlave
//

//
// worldspawn
//

@SolidClass = worldspawn : "This is the world entity. Each map can only contain one, and it's automatically created for you." : "http://twhl.info/wiki.php?id=162"
[
	message(string) : "Map Description / Title"
	skyname(sky) : "Environment map (cl_skyname)" : : "Lets you choose what sky image you want. Values are: 2desert, alien1, alien2, alien3, black, city, cliff, desert, dusk, morning, neb1, neb2, neb6, neb7, night, space, xen8, xen9, xen10. More skies exist in Half-Life modifications, and you can also make your own skies."
	sounds(integer) : "CD track to play" : 1 : "CD track to play when the level begins."
	light(integer) : "Default light level"
	WaveHeight(string) : "Default Wave Height" : : "Set the default wave height here (can be overridden by the properties in func_water)."
	MaxRange(string) : "Max viewable distance" : "4096" : "Maximum distance the player can see."
	chaptertitle(string) : "Chapter Title Message" : "" : "Text displayed when entering the level."
	startdark(choices) : "Level Fade In" : 0 : "If Yes, then the level will start black and fade into normal light." =
	[
		0 : "No"
		1 : "Yes"
	]
	gametitle(choices) : "Display game title" : 0 : "Game title that appears onscreen when this level starts." =
	[
		0 : "No" : "Don't display game title sprite."
		1 : "Yes" : "Display game title sprite."
	]
	newunit(choices) : "New Level Unit" : 0 : "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels." =
	[
		0 : "No, keep current" : "Keeps all globals alive."
		1 : "Yes, clear previous levels" : "Flushes all globals."
	]
	mapteams(string) : "Map Team List" : : "This will be copied into the mp_teamlist while your map is running if the server allows maps to override the team list."
	defaultteam(choices) : "Default Team" : 0 =
	[
		0 : "Fewest Players"
		1 : "First Team"
	]
	freeroam(choices) : "Roaming monsters (node graph)" =
	[
		0 : "No"
		1 : "Yes"
	]
]

//
// BaseClasses
//


@BaseClass = Sequence
[
	sequence(integer) : "Animation Sequence (editor)" : : "Sequence to display in Jackhammer. This does not affect gameplay."
]

@BaseClass = ZHLTbmodel
[
	zhlt_usemodel(string) : "ZHLT Template Model Target"
	zhlt_copylight(string) : "ZHLT Copy Lighting From Target"
	zhlt_noclip(choices) : "ZHLT Disable Clipping" =
	[
		0 : "Default"
		1 : "Always non-solid"
	]
	zhlt_invisible(choices) : "ZHLT Invisible" =
	[
		0 : "Visible (default)"
		1 : "Invisible"
	]
	zhlt_customshadow(string) : "ZHLT Custom Shadow (when opaque)"
	zhlt_embedlightmap(choices) : "ZHLT Embed Light Map (when translucent)" =
	[
		0 : "No (default)"
		1 : "Yes"
	]
	zhlt_embedlightmapresolution(integer) : "ZHLT Embed Light Map Resolution"
]

@BaseClass base(ZHLTbmodel) = ZHLT
[
	zhlt_lightflags(choices) : "ZHLT Lightflags" : 0 =
	[
		0 : "Default"
		1 : "Embedded Fix"
		2 : "Opaque (blocks light)"
		3 : "Opaque + Embedded fix"
		6 : "Opaque + Concave Fix"
	]
	light_origin(string) : "Light Origin Target"
]

@BaseClass = ZHLT_point
[
	_fade(string) : "ZHLT Fade" : "1.0"
	_falloff(choices) : "ZHLT Falloff" : 0 =
	[
		0 : "Default"
		1 : "Inverse Linear"
		2 : "Inverse Square"
	]
]

@BaseClass = Appearflags
[
	spawnflags(Flags) =
	[
		2048 : "Not in Deathmatch" : 0
	]
]

@BaseClass = Angles
[
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "Sets the pitch (up / down), yaw (left / right) and roll (bank) respectively. The compass in Jackhammer corresponds to Yaw. The settings are not always (or not all) used."
]

@BaseClass = Targetname
[
	targetname(target_source) : "Name" : : "Property used to identify entities."
]
@BaseClass = Target
[
	target(target_destination) : "Target" : : "When an entity is activated, it triggers the entity with the name specified by Target."
]
@BaseClass = Delay
[
	delay(string) : "Delay before trigger" : "0" : "Usually the time in seconds before an entity should trigger its target (after being triggered itself). Under other SmartEdit names, delay might also be the time to wait before performing some other action."
]
@BaseClass = Scalable
[
	scale(string) : "Scale (1.0 = normal size)"
]
@BaseClass = Global
[
	globalname(string) : "Global Entity Name"
]

@BaseClass = TargetOnPickup
[
	target(target_destination) : "Target on pickup" : : "When the item is picked up, trigger the entity with the specified name."
	killtarget(target_destination) : "KillTarget on pickup" : : "When the item is picked up, remove the entity specified by this property from the game."
]

@BaseClass size(-16 -16 0, 16 16 32) color(0 0 200) base(Targetname, TargetOnPickup, Delay, Appearflags, Angles, Global, Scalable) = Pickup
[
	spawnflags(Flags) =
	[
		128 : "TOUCH Only" : 0
		256 : "USE Only" : 0
	]
	movetype(choices) : "Gravity Setting" =
	[
		-1: "Unmoveable"
		0: "Fall to the ground (default)"
		5: "Hover in the air"
		8: "Hover in the air, ignore brush collision"
	]
]
@BaseClass size(-16 -16 0, 16 16 32) color(0 0 200) base(Pickup) = Weapon []
@BaseClass base(Pickup) = Item
[
	model(studio) : "Custom Model"
]
@BaseClass size(-16 -16 0, 16 16 32) color(80 0 200) base(Pickup) = Ammo
[
	model(studio) : "Custom Model"
	ammo_amount(integer) : "Custom amount"
]

@BaseClass base(Target, Delay) = Targetx
[
	killtarget(target_destination) : "KillTarget" : : "When an entity is triggered, it will remove from the game the entity specified by this property."
]

@BaseClass = RenderFxChoices
[
	renderfx(choices) :"Render FX" : 0 : "Gives objects special render effects. Think of it as modifying whatever the Render Mode puts out. The options are as follows:" =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
		19: "Glow Shell"
	]
]

@BaseClass base(RenderFxChoices) = RenderFields
[
	rendermode(choices) : "Render Mode" : 0 : "Controls the type of rendering that is used for an object. Options are:" =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "FX Amount (1 - 255)"
	rendercolor(color255) : "FX Color (R G B)" : "0 0 0"
]

@BaseClass base(Appearflags, Angles, Targetname) flags(Angle) size(-16 -16 -36, 16 16 36) color(0 255 0) offset(0 0 36) = PlayerClass
[
	spawnflags(Flags) =
	[
		2 : "Start off" : 0
	]
]

@BaseClass = SoundReplacement
[
	soundlist(script) : "Sound Replacement File"
]

@BaseClass = EntityTemplate
[
	ent_template(string): "Entity template" : : "A template name from templates/entities.json"
]

@BaseClass = BloodColor
[
	bloodcolor(choices) : "Blood Color" : : "Blood color of monster" =
	[
		-1 : "Don't bleed"
		0 : "Default"
		247 : "Human (red)"
		195 : "Alien (yellow)"
		1 : "Human (red) [SC compatible]"
		2 : "Alien (yellow) [SC compatible]"
	]
]

@BaseClass base(Targetname,RenderFields,Appearflags,Angles,Sequence,BloodColor) = DeadMonster
[
	health(string) : "Custom Health"
	model(studio) : "Custom Model"
	gibmodel(studio) : "Custom gib model"
	spawnflags(Flags) =
	[
		2 : "Don't drop to ground" : 0
		4 : "Not solid"	: 0
	]
	effects(choices) : "Effects" =
	[
		0 : "No effects"
		16 : "Invert light"
	]
	TriggerTarget(String) : "TriggerTarget" : : "The event to trigger when the TriggerCondition is met. Used by monsters."
	TriggerCondition(Choices) : "Trigger Condition" : : "This controls the condition under which a monster will trigger its TriggerTarget. The options are:" =
	[
		0 : "No Trigger"
		4 : "Corpse gibbing"
	]
]

@BaseClass = Classification
[
	classify(choices) : "Classification" : : "Relationship class of monster" =
	[
		-1 : "None"
		0 : "Default"
		1 : "Machine"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
]

@BaseClass = PrisonerTo
[
	prisonerto(choices) : "Act as Prisoner to" : : "Ignore and get ignored by this class" =
	[
		0 : "Nobody"
		1 : "Machine"
		2 : "Player"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	ignoredby(choices) : "Ignored by classify" : : "Get ignored by this class" =
	[
		0 : "Not ignored"
		1 : "Machine"
		2 : "Player"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
]

@BaseClass = MonsterSoundMask
[
	soundmask(choices) : "Custom Sound Mask" : : "Types of sound the monster regards" =
	[
		-1 : "No sounds (Deaf)"
		0 : "Default for monster"
		32 : "Only Danger"
		33 : "Only Combat and Danger"
		37 : "Combat, Danger and Player"
		127 : "Every sound and scent"
		1028 : "Default, except Player"
	]
]

@BaseClass = FielfOfView
[
	field_of_view(choices) : "Custom Field Of View" : : "Monster's field of view, in range of [-1.0, 1)" =
	[
		0 : "Default"
		-1 : "Full (alien controllers)"
		-0.7 : "Wide (humans, vortigaunts)"
		-0.2 : "Broad (Gargantua)"
		0.2 : "Average (bullsquids, alien grunts)"
		0.5 : "Tunnel (houndeyes, headcrabs)"
		0.7 : "Narrow"
		0.9 : "Ultra narrow"
	]
]

@BaseClass = FreeRoaming
[
	freeroam(Choices) : "Monster Roaming (nodes)" =
	[
		0 : "Map Default"
		1 : "Never"
		2 : "Always"
	]
]

@BaseClass = ActiveAfterAlert
[
	active_alert(Choices) : "Active alert after combat" : : "Whether monster will walk around a bit and investigate sounds after the combat is over" =
	[
		0 : "Default (by cvar or code)"
		1 : "Never"
		2 : "Always"
	]
]

@BaseClass = SizeForGrapple
[
	size_for_grapple(Choices) : "Size For Grapple" =
	[
		-1 : "Not a Target"
		0 : "Monster's Default"
		1 : "Small"
		2 : "Medium"
		3 : "Large"
		4 : "Fixed"
	]
]

@BaseClass base(Targetname, RenderFields, Angles) = MonsterBase
[
	target(target_destination) : "Target patrol path"
	TriggerTarget(String) : "TriggerTarget" : : "The event to trigger when the TriggerCondition is met. Used by monsters."
	TriggerCondition(Choices) : "Trigger Condition" : : "This controls the condition under which a monster will trigger its TriggerTarget. The options are:" =
	[
		0 : "No Trigger"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	TriggerAltCondition(Choices) : "Trigger Alternative Condition" : : "Alternative condition to fire TriggerTarget (useful to make an important ally fire the same target both when either provoked or dead which is usually a load game condition)" =
	[
		0 : "No Trigger"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	model(studio) : "Custom Model"
]

@BaseClass = MonsterExtraBase
[
	health(string) : "Custom Health"
	minhullsize(string) : "Custom Min Hull Size (X Y Z)"
	maxhullsize(string) : "Custom Max Hull Size (X Y Z)"
	gibmodel(studio) : "Custom gib model"
]

@BaseClass = MonsterGibPolicy
[
	gib_policy(choices) : "Gibbing policy" =
	[
		0 : "Default"
		1 : "Prefer gibbing"
		2 : "Prefer not to gib"
	]
]

@BaseClass base(MonsterExtraBase, Scalable, Classification, BloodColor, FielfOfView, FreeRoaming, ActiveAfterAlert, SizeForGrapple, PrisonerTo, MonsterSoundMask, MonsterGibPolicy, SoundReplacement) = MonsterExtra
[
	displayname(string) : "In-game Name" : : "Name that's displayed when player looks at the monster if mp_allowmonsterinfo is enabled"
]

@BaseClass base(MonsterBase, EntityTemplate, MonsterExtra) flags(Angle) color(0 200 200) = Monster
[
	spawnflags(Flags) =
	[
		1 : "WaitTillSeen" 	: 0
		2 : "Gag"		: 0
		4 : "MonsterClip"	: 0
		16: "Prisoner"		: 0
		128: "WaitForScript" 	: 0
		256: "Pre-Disaster" 	: 0
		512: "Fade Corpse"	: 0
		8192: "No yellow blobs" : 0 : "When engine thinks that monster is stuck, don't draw yellow particles around it"
		16384 : "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'No Dyn collision' flag"
		65536: "Non-solid corpse" : 0 : "Become non-solid upon dying. Helps preventing dead corpses get into the way of moving entities like doors"
		1048576: "Act out of PVS" : 0 : "Act as usual even if there're no players in the PVS"
	]
	is_player_ally(choices) : "Reverse Relationship" : : "Set inverted relationship with players. Sven Co-op compatible parameter. Simple alternative to custom classify." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@BaseClass = FollowingMonsterProps
[
	followfailpolicy(choices) : "Follow fail policy" : : "What to do when couldn't reach the target" = 
	[
		0 : "Default for monster"
		1 : "Regular fail"
		2 : "Stop following"
		3 : "Try nearest path"
	]
	followage_policy(choices) : "Followage policy" =
	[
		0 : "Regular"
		1 : "Scripted only"
		2 : "Scripted only, decline use"
	]
]

@BaseClass base(Monster, FollowingMonsterProps) = Repel
[
	gruntname(string) : "Grunt's name" : : "The target name of spawned grunt"
]

@BaseClass = CustomSentences
[
	UseSentence(string) : "Use Sentence" : : "The sentence group to play when monster starts following the player. Special case: 'null' means no sentence"
	UnUseSentence(string) : "Un-Use Sentence" : : "The sentence group to play when monster stops following the player. Special case: 'null' means no sentence"
	RefusalSentence(string) : "Refusal Sentence" : : "The sentence group to play when monster declines the player's request (e.g. if monster is set to Pre-Disaster). Special case: 'null' means no sentence"
]

@BaseClass base(FollowingMonsterProps) = FollowingMonster
[
	master(string) : "Master" : : "Decline following if locked by master (for player ally monsters)"
	spawnflags(Flags) =
	[
		524288 : "Ignore player push" : 0 : "Don't move away when player tries to push me"
	]
]

@BaseClass base(CustomSentences, FollowingMonster) = TalkMonster
[
	tolerance(choices) : "Tolerance level" : : "Tolerance to player's hits" =
	[
		0 : "Default" : "Monster-specific behavior"
		1 : "Zero" : "Get provoked on any hit"
		2 : "Low" : "Get provoked by direct hit or on second hit"
		3 : "Average" : "Get provoked by some hits"
		4 : "High" : "Get provoked by some hits, but tends to forgive after some time"
		5 : "Absolute" : "Never get provoked by player's hits"
		6 : "Absolute, don't alert friends" : "Never get provoked by player's hits, don't alert friends upon death"
	]
	alert_friends(choices) : "Alert friends" : : "Alert friends when player kills this monster" =
	[
		0 : "Default" : "Depends on the monster and tolerance level"
		1 : "Always" : "Always alert friends when player kills me"
		2 : "If not in combat" : "Alert friends only if player kills me and I'm not in combat"
		3 : "Never" : "Never alert friends"
	]
	alertable_by_friends(choices) : "Friends can alert me" : : "Can friends alert me when player kills them?" =
	[
		0 : "Default" : "Can be alerted if tolerance level is not absolute"
		1 : "Yes"
		2 : "No"
	]
	voicepitch(integer) : "Custom voice pitch [100 norm]"
	suspicious(choices) : "Pre-provoked" =
	[
		0 : "No"
		1 : "Yes"
	]
	SpeakAs(string) : "Speech Prefix" : : "Custom speech prefix for the monster. You can provide your own instead of SC for scientist or BA for security guards."
	spawnflags(Flags) =
	[
		131072 : "Don't greet player" : 0 : "Don't say hello to player upon seeing him"
		262144 : "Don't idle talk to player" : 0 : "Don't forward idle statements to player, still talk to other allies and answer to player's usage"
	]
]

@BaseClass base(TalkMonster) = Civilian
[
]

@BaseClass base(Monster) = Apache
[
	spawnflags(Flags) =
	[
		8 : "NoWreckage"	: 0
		64 : "Start Inactive" : 0
	]
	rotorvolume(string) : "Rotor sound volume (0.1 - 1.0)"
]

@BaseClass base(Monster) = Osprey
[
	spawnflags(Flags) =
	[
		64 : "Start Inactive" : 0
		32768 : "No deploy, just fly" : 0
	]
	num(integer) : "(Override) Number of Grunts"
	rotorvolume(string) : "Rotor sound volume (0.1 - 1.0)"
	attenuation(string) : "Rotor sound attenuation" : : "The higher the value the stronger the volume fading with distance. The default attenuation for osprey is 0.15"
]

@BaseClass base(Targetname, Angles) size(-8 -8 -8, 8 8 8) = gibshooterbase
[
	// how many pieces to create
	m_iGibs(integer) : "Number of Gibs" : 3

	// delay (in seconds) between shots. If 0, all gibs shoot at once.
	delay(string) : "Delay between shots" : "0"

	m_iszPosition(string) : "At position (blank = here) [LP]"
	m_iszVelocity(string) : "At velocity (blank = angle) [LV]"
	// how fast the gibs are fired
	m_flVelocity(string) : "Gib Speed Factor [LR]" : "200"

	// Course variance
	m_flVariance(string) : "Course Variance" : "0.15"

	// Time in seconds for gibs to live +/- 5%
	m_flGibLife(string) : "Gib Life" : "4"

	m_iszSpawnTarget(target_destination) : "Fire on spawn (locus = shot)"

	spawnflags(Flags) =
	[
		1 : "Repeatable" 	: 0
	]
]

@BaseClass = Light
[
	_light(color255) : "Brightness" : "255 255 128 200" : "First three integer numbers are the color (RGB). The fourth number is the brightness."
	style(Choices) : "Appearance" : 0 : "Light appearance. Values:" =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	pattern(string) : "Custom Appearance" : : "Use a string of letters to provide a custom light style. The property allows you to enter a string of letters from a to z, representing brightness. If you entered 'abcdefghihgfedcba' then the light would go from bright to dim and back again and then repeat. Complicating things, to use this feature, you must name the light. However, if you then use a trigger to activate it, then it will behave as a normal light."
]

@BaseClass base(Targetname,Global) = Breakable
[
	target(target_destination) : "Target on break"
	killtarget(target_destination) : "Kill Target on break"
	health(integer) : "Strength" : 1
	material(choices) :"Material type" : 0 =
	[
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Cinder Block"
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
	]
	explosion(choices) : "Gibs Direction" : 0 =
	[
		0: "Random"
		1: "Relative to Attack"
	]
	delay(string) : "Delay before fire" : "0"
	gibmodel(studio) : "Gib Model" : ""
	m_iGibs(integer) : "Custom number of gibs"
	spawnobject(choices) : "Spawn On Break" : 0 =
	[
		0: "Nothing"
		1: "Battery"
		2: "Healthkit"
		3: "9mm Handgun"
		4: "9mm Clip"
		5: "Machine Gun"
		6: "Machine Gun Clip"
		7: "Machine Gun Grenades"
		8: "Shotgun"
		9: "Shotgun Shells"
		10: "Crossbow"
		11: "Crossbow Bolts"
		12: "357"
		13: "357 clip"
		14: "RPG"
		15: "RPG Clip"
		16: "Gauss clip"
		17: "Hand grenade"
		18: "Tripmine"
		19: "Satchel Charge"
		20: "Snark"
		21: "Hornet Gun"
		22: "Crowbar"
		23: "Pipewrench"
		24: "Sniperrifle"
		25: "Sniperrifle ammo"
		26: "Knife"
		27: "M249 Squad Automatic Weapon"
		28: "Penguin"
		29: "556 Ammo Box"
		30: "Sporelauncher"
		31: "Displacer"
		32: "9mm Box"
		33: "Uzi"
		//34: "Uzi akimbo"
		35: "Desert Eagle"
		36: "Barnacle Grapple"
		37: "Medkit (portable)"
		38: "HEV Suit"
	]
	explodemagnitude(integer) : "Explode Magnitude (0=none)" : 0
	randomitem_template(string) : "info_item_random entity"
	target_activator(choices) : "Target's Activator" =
	[
		0 : "No (Default)"
		1 : "This breakable"
		2 : "My attacker or activator"
	]
]

@BaseClass = BaseLockable
[
	locked_sound(choices) : "Locked Sound" : 0 =
	[
		0: "None"
		2: "Access Denied"
		8: "Small zap"
		10: "Buzz"
		11: "Buzz Off"
		12: "Latch Locked"
	]
	unlocked_sound(choices) : "Unlocked Sound" : 0 =
	[
		0: "None"
		1: "Big zap & Warmup"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		10: "Buzz"
		13: "Latch Unlocked"
		14: "Lightswitch"
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
	]
	locked_sentence(choices) : "Locked Sentence" : 0 =
	[
		0: "None"
		1: "Gen. Access Denied"
		2: "Security Lockout"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance Door"
		9: "Broken Shut Door"
	]
	unlocked_sentence(choices) : "Unlocked Sentence" : 0 =
	[
		0: "None"
		1: "Gen. Access Granted"
		2: "Security Disengaged"
		3: "Blast Door"
		4: "Fire Door"
		5: "Chemical Door"
		6: "Radiation Door"
		7: "Gen. Containment"
		8: "Maintenance area"
	]

	locked_sound_override(sound) : "Locked Sound Override"
	unlocked_sound_override(sound) : "Unlocked Sound Override"
	locked_sentence_override(string) : "Locked Sentence Override"
	unlocked_sentence_override(string) : "Unlocked Sentence Override"
]

@BaseClass = SoundRadius
[
	soundradius(choices) : "Sound radius" =
	[
		-2: "Small"
		-1: "Medium"
		0: "Default (large)"
		1: "Huge"
		2: "Enormous"
		3: "Play Everywhere"
	]
]

@BaseClass = OpenClosable
[
	fireonopening(target_destination) : "Fire On Open Start"
	fireonopening_triggerstate(choices) : "Fire On Open Start Trigger State" =
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]

	fireonclosing(target_destination) : "Fire On Close Start"
	fireonclosing_triggerstate(choices) : "Fire On Close Start Trigger State" =
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]

	fireonopened(target_destination) : "Fire On Open End"
	fireonopened_triggerstate(choices) : "Fire On Open End Trigger State" =
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]

	fireonclosed(target_destination) : "Fire On Close End"
	fireonclosed_triggerstate(choices) : "Fire On Close End Trigger State" =
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]
]

@BaseClass base(Appearflags, Targetname, RenderFields, Global, Angles, SoundRadius, BaseLockable, OpenClosable) = Door
[
	killtarget(target_destination) : "KillTarget"
	speed(integer) : "Speed" : 100
	master(string) : "Master"
	movesnd(choices) : "Move Sound" : 0 =
	[
		0: "No Sound"
		1: "Servo (Sliding)"
		2: "Pneumatic (Sliding)"
		3: "Pneumatic (Rolling)"
		4: "Vacuum"
		5: "Power Hydraulic"
		6: "Large Rollers"
		7: "Track Door"
		8: "Snappy Metal Door"
		9: "Squeaky 1"
		10: "Squeaky 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 =
	[
		0: "No Sound"
		1: "Clang with brake"
		2: "Clang reverb"
		3: "Ratchet Stop"
		4: "Chunk"
		5: "Light airbrake"
		6: "Metal Slide Stop"
		7: "Metal Lock Stop"
		8: "Snappy Metal Stop"
	]
	wait(integer) : "delay before close, -1 stay open " : 4
	lip(integer) : "Lip"
	dmg(integer) : "Damage inflicted when blocked" : 0
	message(string) : "Message if triggered"
	target(target_destination) : "Target"
	delay(integer) : "Delay before fire"
	netname(string) : "Fire on Close"
	health(integer) : "Health (shoot open)"
	m_fIgnoreTargetname(choices) : "Ignore Targetname" : : "Set whether the door should ignore its targetname or not. This is useful when you need to reference the func_door in another entity but still want the door to open on touch. Sven Co-op compatible. Effect is the same as 'Force Touchable' flag" =
	[
		0: "No"
		1: "Yes"
	]
	m_iObeyTriggerMode(choices) : "Obey Trigger Mode" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Yes, even when currently moving"
	]
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		4 : "Don't link" : 0
		8: "Passable" : 0
		32: "Toggle" : 0
		256:"Use Only" : 0
		512: "Monsters Can't" : 1
		1024: "Force Touchable" : 0 : "Open door by touching even when it has a name. Spirit compatible. Same as parameter 'Ignore Targetname'."
	]
	noise1(sound) : "Move Sound Override"
	noise2(sound) : "Stop Sound Override"
	return_speed(integer) : "Return speed"
	_minlight(string) : "Minimum light level"
]

@BaseClass base(Targetname, Target, RenderFields, Global, Angles) = BaseTank
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
		16: "Only Direct" : 0
		32: "Controllable" : 0
		64: "Laser Spot" : 0
		128: "Reserved (Don't use)" : 0 : "Reserved for 'Match Target' from Spirit"
		256: "Smoke when no ammo" : 0
	]

	// Mainly for use with 1009 team settings (game_team_master)
	master(string) : "(Team) Master"

	yawrate(string) : "Yaw rate" : "30"
	yawrange(string) : "Yaw range" : "180"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "4"
	pitchrange(string) : "Pitch range" : "5"
	pitchtolerance(string) : "Pitch tolerance" : "5"
	barrel(string) : "Barrel Length"
	barrely(string) : "Barrel Horizontal"
	barrelz(string) : "Barrel Vertical"
	spritesmoke(sprite) : "Smoke Sprite"
	smokerendermode(choices) : "Smoke sprite render mode" =
	[
		0: "Default (Solid)"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	spriteflash(sprite) : "Flash Sprite"
	spritescale(string) : "Sprite scale" : "1"
	rotatesound(sound) : "Rotate Sound"
	firerate(string) : "Rate of Fire" : "1"
	bullet_damage(string) : "Damage Per Bullet"
	persistence(string) : "Firing persistence" : "1"
	firespread(choices) : "Bullet accuracy" : 0 =
	[
		0: "Perfect Shot"
		1: "Small cone"
		2: "Medium cone"
		3: "Large cone"
		4: "Extra-large cone"
	]
	minRange(string) : "Minmum target range"
	maxRange(string) : "Maximum target range"
	bulletCount(integer) : "Bullet count" : : "Less or equal to 0 means infinite number of bullets"
	m_iClass(choices) : "Behavior" =
	[
		 0: "Attack only players"
		11: "Security guard"
		 4: "Human Military"
		 5: "Alien Military"
		15 : "Race X shock"
		16 : "Opfor ally"
	]
	_minlight(string) : "Minimum light level"
]

@BaseClass base(SoundRadius) = PlatSounds
[
	movesnd(choices) : "Move Sound" : 0 =
	[
		0: "No Sound"
		1: "big elev 1"
		2: "big elev 2"
		3: "tech elev 1"
		4: "tech elev 2"
		5: "tech elev 3"
		6: "freight elev 1"
		7: "freight elev 2"
		8: "heavy elev"
		9: "rack elev"
		10: "rail elev"
		11: "squeek elev"
		12: "odd elev 1"
		13: "odd elev 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 =
	[
		0: "No Sound"
		1: "big elev stop1"
		2: "big elev stop2"
		3: "freight elev stop"
		4: "heavy elev stop"
		5: "rack stop"
		6: "rail stop"
		7: "squeek stop"
		8: "quick stop"
	]
	volume(string) : "Sound Volume 0.0 - 1.0" : "0.85"
	custommovesnd(sound) : "Custom move sound"
	customstopsnd(sound) : "Custom stop sound"
]

@BaseClass base(Targetname, RenderFields, Global, PlatSounds) = Trackchange
[
	height(integer) : "Travel altitude" : 0
	spawnflags(flags) =
	[
		1: "Auto Activate train" : 0
		2: "Relink track" : 0
		8: "Start at Bottom" : 0
		16: "Rotate Only" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	rotation(integer) : "Spin amount" : 0
	train(target_destination) : "Train to switch"
	toptrack(target_destination) : "Top track"
	bottomtrack(target_destination) : "Bottom track"
	speed(integer) : "Move/Rotate speed" : 0
]

@BaseClass base(Target, Targetname) = Trigger
[
	killtarget(target_destination) : "Kill target"
	master(string) : "Master"
	delay(string) : "Delay before trigger" : "0"
	message(string) : "Message (set sound too!)"
]

@BaseClass = TriggerCond
[
	netname(string) : "Triggered only by entity" : : "Classname or targetname of entity required to activate this trigger by touching"
	spawnflags(flags) =
	[
		1: "Monsters" : 0
		2: "No Clients" : 0
		4: "Pushables": 0
		8: "Everything else": 0
	]
]

@BaseClass base(Targetname) = Recharger
[
	TriggerOnEmpty(target_destination) : "Trigger On Empty"
	TriggerOnRecharged(target_destination) : "Trigger On Recharged"
	TriggerOnFirstUse(target_destination) : "Trigger On First Use"
	CustomLoopSound(sound) : "Custom Loop Sound"
	CustomDeniedSound(sound) : "Custom Denied Sound"
	CustomStartSound(sound) : "Custom Start Sound"
	CustomRechargeSound(sound) : "Custom Recharge Sound"
	CustomJuice(integer) : "Custom Juice Amount"
	spawnflags(flags) =
	[
		1: "Start off" : 0
		16: "Direct use only": 0
	]
]

@BaseClass base(Targetname, Targetx, Angles) flags(Angle) size(-16 -16 0, 16 16 72) color(255 0 255) = ScriptedSequence
[
	m_iszEntity(string) : "Target Monster [LE]"
	m_iszPlay(string) : "Action Animation"
	m_iszIdle(string) : "Idle Animation"
	m_iszFireOnBegin(target_destination): "Fire after moving"
	m_iszFireOnAnimStart(target_destination) : "Fire on Animation start" : : "Fire at the beginning of Action Animation"
	m_iszFireOnPossessed(target_destination) : "Fire on Possession" : : "Fire when monster is possessed by script"
	m_flRadius(integer) : "Search Radius" : 512
	m_iPriority(choices) : "Priority" =
	[
		0 : "Normal"
		4 : "Override other sequences"
	]
	m_iszMoveTarget(string) : "Move target (blank = this) [LE]"
	m_fMoveTo(choices) : "Move to Position" : 0 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
		7 : "Teleport"
	]
	m_iFinishSchedule(Choices) : "AI Schedule when done" =
	[
		0 : "Default AI"
		1 : "Ambush"
	]
	spawnflags(Flags) =
	[
		4 : "Repeatable"	: 0
		8 : "Leave Corpse"	: 0
		32: "No Interruptions"	: 0
		64: "Override AI"	: 0
		128: "No Script Movement" : 0
		256: "Continuous animation" : 0 : "Don't reset to idle between animations"
		512: "Apply new angles" : 0 : "If the animation includes changing of monster's angles, set them after it finished. For smoother transition and better looks."
		1024: "Auto-search" : 0 : "Act as if scripted sequence doesn't have a targetname: start searching for the monster in the script radius."
		4096: "Try once" : 0 : "By default once triggered the script will continue to search for the target monster if it could not find one instantly. This flag prevents such behavior"
		8192: "Don't reset head turn" : 0 : "Don't reset head turn for talk monsters"
		16384: "Force idle looping" : 0 : "Force idle animation looping. Use it when you want to loop an animation that does not have a loop flag"
		32768: "Remove on interruption" : 0 : "Remove scripted sequence when it's getting interrupted"
	]
	m_targetActivator(choices) : "Activator for targets" : : "Activator for Target, Fire after moving, Fire on Animation start" =
	[
		0 : "None (Default)"
		1 : "This script"
		2 : "Possessed Monster"
		3 : "Forward my activator"
	]
	moveto_radius(string) : "Move to radius"
	m_iszAttack(string) : "Turn target (blank = this) [LE]"
	m_fTurnType(choices) : "Turn mode" =
	[
		0 : "Match Angle"
		1 : "Turn to face"
		2 : "Don't Turn"
	]
	required_state(choices) : "Required MonsterState" =
	[
		0 : "Any"
		1 : "Idle"
		2 : "Combat"
		3 : "Alert"
		4 : "Idle or Alert"
	]
	m_requiredFollowerState(choices) : "Required follower state" =
	[
		0 : "Not specified"
		1 : "Following player"
		2 : "Not following player"
	]
	m_applySearchRadius(choices) : "Apply search radius" =
	[
		0 : "Only to Class Name"
		1 : "Always"
	]
	m_iRepeats(integer) : "Repeat action X more times"
	m_fRepeatFrame(string) : "Repeat from frame"
	m_maxMoveFailAttempts(integer) : "Max move fail attempts" : : "When not zero, teleport the monster to the script position after this number of failed move attempts (for Walk and Run scripts)"
	m_interruptionPolicy(choices) : "Interruption policy" =
	[
		0 : "Default (by any damage)"
		1 : "No Interruptions (same as flag)"
		2 : "By Death Only"
	]
	m_searchPolicy(choices) : "Search policy" : : "Search target monster by targetname or classname" =
	[
		0 : "Targetname, classname"
		1 : "Targetname only"
		2 : "Classname only"
	]
	m_takeDamagePolicy(choices) : "TakeDamage policy" =
	[
		0 : "As usual"
		1 : "No (Invulnerable)"
		2 : "Non-lethal damage"
	]
	master(string) : "Master" : : "Scripted sequence won't search for its target monster while master is locked"
]

//
// Entities
//

@PointClass base(ScriptedSequence) = aiscripted_sequence:"AI Scripted Sequence" []

@BaseClass base(Targetname) = AmbientBase
[
	message(sound) : "WAV Name"
	health(integer) : "Volume (10 = loudest)" : 10
]

@BaseClass = AmbientPlayFrom
[
	target(target_generic) : "Entity to play from"
	channel(choices) : "Channel to use for that entity" =
	[
		0: "Default (Static)"
		1: "Weapon"
		2: "Voice"
		3: "Item"
		4: "Body"
		5: "Stream"
		6: "Static"
	]
]

@BaseClass = AmbientDetails
[
	preset(choices) :"Dynamic Presets" =
	[
		0: "None"
		1: "Huge Machine"
		2: "Big Machine"
		3: "Machine"
		4: "Slow Fade in"
		5: "Fade in"
		6: "Quick Fade in"
		7: "Slow Pulse"
		8: "Pulse"
		9: "Quick pulse"
		10: "Slow Oscillator"
		11: "Oscillator"
		12: "Quick Oscillator"
		13: "Grunge pitch"
		14: "Very low pitch"
		15: "Low pitch"
		16: "High pitch"
		17: "Very high pitch"
		18: "Screaming pitch"
		19: "Oscillate spinup/down"
		20: "Pulse spinup/down"
		21: "Random pitch"
		22: "Random pitch fast"
		23: "Incremental Spinup"
		24: "Alien"
		25: "Bizzare"
		26: "Planet X"
		27: "Haunted"
	]
	volstart(integer) : "Start Volume"
	fadein(integer) : "Fade in time (0-100)"
	fadeout(integer) : "Fade out time (0-100)"
	pitch(integer) : "Pitch (> 100 = higher)" : 100
	pitchstart(integer) : "Start Pitch" : 100
	spinup(integer) : "Spin up time (0-100)"
	spindown(integer) : "Spin down time (0-100)"
	lfotype(integer) : "LFO type 0)off 1)sqr 2)tri 3)rnd"
	lforate(integer) : "LFO rate (0-1000)"
	lfomodpitch(integer) : "LFO mod pitch (0-100)"
	lfomodvol(integer) : "LFO mod vol (0-100)"
	cspinup(integer) : "Incremental spinup count"
	spawnflags(flags) =
	[
		1 : "Play Everywhere" : 0
		2 : "Small Radius" : 0
		4 : "Medium Radius" : 1
		8 : "Large Radius" : 0
		16 : "Start Silent":0
		32 : "Not Toggled":0
	]
	attenuation(Choices) : "Sound Radius" =
	[
		0 : "From Spawn Flags"
		1 : "Small Radius"
		2 : "Medium Radius"
		3 : "Large  Radius"
		4 : "Huge Radius"
		5 : "Enormous Radius"
		6 : "Play Everywhere"
	]
]

@BaseClass = AmbientExtraSpeaker
[
	target(string) : "Attach to entity" : "*player"
	channel(choices) : "Channel to use" =
	[
		0: "Default (Static)"
		1: "Weapon"
		2: "Voice"
		3: "Item"
		4: "Body"
		5: "Stream"
		6: "Static"
	]
]

@PointClass iconsprite("sprites/ambient_generic.spr") base(AmbientBase, AmbientExtraSpeaker, AmbientDetails) = ambient_extraspeaker : "Ambient played on the automatically created entity that is attached to another entity. This allows to play sounds like if they were playing from the main entity without interfering with its own audio channels. Use this for radio or narrator messages that should follow the player around."
[
	spawnflags(flags) =
	[
		16 : "Start Silent": 1
		32 : "Not Toggled": 1
	]
]

@PointClass iconsprite("sprites/ambient_generic.spr") base(AmbientBase, AmbientPlayFrom, AmbientDetails) = ambient_generic : "Universal Ambient" []

@BaseClass = AmbientRandomWavs
[
	noise(sound) : "WAV Name 1"
	noise1(sound) : "WAV Name 2"
	noise2(sound) : "WAV Name 3"
	noise3(sound) : "WAV Name 4"
]

@PointClass iconsprite("sprites/ambient_generic.spr") base(AmbientBase, AmbientRandomWavs, AmbientPlayFrom, AmbientDetails) = ambient_random : "Universal Ambient playing a random sound" []

//
// ammo
//


@PointClass base(Ammo) studio("models/w_9mmclip.mdl") = ammo_9mmclip : "Spawns a 9mm handgun ammo clip." : "http://twhl.info/wiki.php?id=1" []
@PointClass base(Ammo) studio("models/w_9mmarclip.mdl") = ammo_9mmAR : "Spawns ammo for the 9mm AR / handgun." : "http://twhl.info/wiki.php?id=2" []
@PointClass base(Ammo) studio("models/w_chainammo.mdl") = ammo_9mmbox : "Spawns a large amount (200) of 9mm ammo in a box." : "http://twhl.info/wiki.php?id=3" []
@PointClass base(Ammo) studio("models/w_argrenade.mdl") = ammo_ARgrenades : "Spawns 2 grenades for the 9mm AR's secondary fire." : "http://twhl.info/wiki.php?id=4" []
@PointClass base(Ammo) studio("models/w_shotbox.mdl") = ammo_buckshot : "Spawns ammo for the shotgun." : "http://twhl.info/wiki.php?id=7" []
@PointClass base(Ammo) studio("models/w_357ammobox.mdl") = ammo_357 : "Spawns ammo for the .357 Magnum." : "http://twhl.info/wiki.php?id=6" []
@PointClass base(Ammo) studio("models/w_rpgammo.mdl") = ammo_rpgclip : "Spawns rockets for the RPG." : "http://twhl.info/wiki.php?id=9" []
@PointClass base(Ammo) studio("models/w_gaussammo.mdl") = ammo_gaussclip : "Spawns ammo for the gauss and egon weapons." : "http://twhl.info/wiki.php?id=5" []
@PointClass base(Ammo) studio("models/w_crossbow_clip.mdl") = ammo_crossbow : "Spawns crossbow ammo." : "http://twhl.info/wiki.php?id=8" []
@PointClass base(Ammo) studio("models/w_saw_clip.mdl") = ammo_556 : "M249 Ammo" []
@PointClass base(Ammo) studio("models/w_m40a1clip.mdl") = ammo_762 : "Sniper Ammo" []
@PointClass base(Targetname, Appearflags, Angles, Global) size(-16 -16 -16, 16 16 16) studio("models/spore_ammo.mdl") = ammo_spore : "Spore" []

@SolidClass base(Targetname, Target, ZHLT, RenderFields) = button_target : "Target Button"
[
	spawnflags(flags) =
	[
		1: "Use Activates" : 1
		2: "Start On" : 0
	]
	master(string) : "Master"
]

// calc entities

@PointClass base(Targetname) color(170 221 85) size(-12 -12 -12, 12 12 12) = calc_eval_number : "Calculate number"
[
	left_operand(string) : "First Operand [LR]"
	right_operand(string) : "Second Operand [LR]"
	third_operand(string) : "Third Operand [LR] (optional)" : : "After calculating the result of operation on the first 2 operands, make the same operation with the result and the third operand. This allows, for example, to add 3 values or find the maximum among 3 values without resorting to the use of another calc_eval_number."
	operation(choices) : "Operation" : 0 =
	[
		0 : "Add"
		1 : "Substruct"
		2 : "Multiply"
		3 : "Divide"
		4 : "Mod"
		5 : "Find Min"
		6 : "Find Max"
	]
	store_result(target_destination) : "Store result in" : : "When calc_eval_number is triggered and the operation succeeded, store the numeric result in other entity like game_number or game_counter"
	target(target_destination) : "Trigger after operation" : : "When calc_eval_number is triggered and the operation succeeded, trigger this target"
	trigger_on_fail(target_destination) : "Trigger on calculation fail" : : "When calc_eval_number is triggered and the operation failed, trigger this target. The operation may fail if one of the operands couldn't be calculated due to the source entity being missing or invalid operation like dividing by zero."
	min_value(string) : "Min (blank = none) [LR]" : : "Min boundary for the resulting value"
	max_value(string) : "Max (blank = none) [LR]" : : "Max boundary for the resulting value"
	clamp_policy(choices) : "If outside range" =
	[
		0 : "Pick nearest value"
		1 : "Wrap around"
		2 : "Bounce back"
	]
	vector_mode(choices) : "Report as vector" : : "When the Position or Velocity is requested from this entity, form the vector based on the number depending on the chosen pattern. E.g. for 'X 0 0' pattern and number computed to 10 the resulting vector will be '10 0 0'. Sometimes it's more handy than having a dedicated calc_vecfromnums." =
	[
		0 : "No"
		1 : "X 0 0"
		2 : "0 Y 0"
		3 : "0 0 Z"
	]
	first_cast_mode(choices) : "Cast first operand" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
	second_cast_mode(choices) : "Cast second operand" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
	third_cast_mode(choices) : "Cast third operand" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
	result_cast_mode(choices) : "Cast result" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
]

@PointClass base(Targetname) color(170 221 85) size(-12 -12 -12, 12 12 12) = calc_numfromvec : "Calculate number based on vector"
[
	target(string) : "Vector to use [LV], [LP], [LE]" : "*locus"
	impulse(choices) : "Number to get" : 0 =
	[
		0 : "X (R)"
		1 : "Y (G)"
		2 : "Z (B)"
		3 : "Length"
		4 : "Pitch"
		5 : "Yaw"
	]
	vector_type(choices) : "Vector value is..." : 0 =
	[
		0: "Velocity [LV]"
		1: "Position [LP]"
		2: "Color [LE]"
	]
]
@PointClass color(128 200 64) size(-12 -12 -12, 12 12 12) base(Targetname) = calc_position : "Calculate position"
[
	netname(target_generic) : "Entity to use [LE]" : "*locus"
	impulse(choices) : "Position to calculate" : 1 =
	[
		0 : "Origin"
		1 : "Eyes"
		2 : "Top"
		3 : "Centre"
		4 : "Bottom"
		5 : "Attachment point 0"
		6 : "Attachment point 1"
		7 : "Attachment point 2"
		8 : "Attachment point 3"
		9 : "Random"
		10 : "Calc Position [LP]" : "Get Calc Position of another entity. This allows to use the result of another calc_position as a base. You must ensure that the evaluation chain won't lead to recursion!"
	]
	message(string) : "Add offset [LV]" : "0 0 0"
]
@PointClass base(Targetname) color(170 221 85) size(-12 -12 -12, 12 12 12) = calc_ratio : "Ratio adjustment"
[
	target(string) : "Based on ratio [LR]" : "*locus"
	impulse(choices) : "Transformation" : 0 : "Cosine, sine and tangent operations expect degrees as a base value. Inverse operations return the result in degrees as well." =
	[
		0 : "None"
		1 : "Reversed (1-X)"
		2 : "Negative (-X)"
		3 : "Reciprocal (1/X)"
		4 : "Square (X*X)"
		5 : "Inverse Square (1/X*X)"
		6 : "Square root"
		7 : "Cosine"
		8 : "Sine"
		9 : "Tangent"
		10 : "Inverse Cosine"
		11 : "Inverse Sine"
		12 : "Inverse Tangent"
	]
	netname(string) : "Offset by [LR]" : : "Offset by value after transformation"
	message(string) : "Scale factor [LR]" : : "Scale by value after transformation and after applying the offset"
	noise(string) : "Min (blank = none) [LR]" : : "Min boundary for the resulting value"
	noise1(string) : "Max (blank = none) [LR]" : : "Max boundary for the resulting value"
	frags(choices) : "If outside range" : 0 =
	[
		0 : "Pick nearest value"
		1 : "Wrap around"
		2 : "Bounce back"
	]
	base_cast_mode(choices) : "Cast base" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
	result_cast_mode(choices) : "Cast result" =
	[
		0 : "No cast"
		1 : "Round"
		2 : "Floor"
		3 : "Ceil"
		4 : "Trunc"
	]
]
@PointClass color(170 179 43) size(-12 -12 -12, 12 12 12) base(Targetname) = calc_vecfromnums : "Calculate vector based on three numbers. This entity will report the resulting vector as both its Position and Velocity"
[
	base_vector(string): "Base Vector [LV], [LP], [LE]" : : "The vector to use as a base. If omitted the base vector is 0,0,0"
	vector_type(choices) : "Base Vector is..." =
	[
		0: "Velocity [LV]"
		1: "Position [LP]"
		2: "Color [LE]"
	]
	x_value(string): "X value [LR]" : : "Use as X component. If omitted the one from Base Vector will be used"
	y_value(string): "Y value [LR]" : : "Use as Y component. If omitted the one from Base Vector will be used"
	z_value(string): "Z value [LR]" : : "Use as Z component. If omitted the one from Base Vector will be used"
]
@PointClass color(170 179 43) size(-12 -12 -12, 12 12 12) base(Targetname) = calc_subvelocity : "Calculate velocity based on entity properties"
[
	netname(string) : "Entity to use [LE]" : "*locus"
	impulse(choices) : "Value to calculate from" : 0 =
	[
		0 : "Movement Velocity"
		1 : "Angle" : "Get entity direction"
		2 : "View Angle" : "Get player view direction"
		5 : "Attachment point 0"
		6 : "Attachment point 1"
		7 : "Attachment point 2"
		8 : "Attachment point 3"
		10: "Calc Velocity [LV]" : "Get Calc Velocity of another entity. This allows to use the result of another calc_subvelocity as a base. You must ensure that the evaluation chain won't lead to recursion!"
	]
	noise(string) : "Scale factor [LR]" : "1.0" : "Scale by this factor after getting the base vector and after possible normalization"
	message(string) : "Add offset [LV]" : "0 0 0" : "Add offset after (possible) normalization and scale factor have been applied"
	spawnflags(flags) =
	[
		1 : "Normalize before scaling" : 0
		2 : "Flip Vertical" : 0
		4 : "Discard X" : 0
		8 : "Discard Y" : 0
		16 : "Discard Z" :0
	]
]
@PointClass color(170 179 43) size(-12 -12 -12, 12 12 12) base(Targetname) = calc_velocity_path : "Calculate velocity for travelling"
[
	target(string) : "Start position [LP]" : "*locus"
	netname(string) : "Destination [LP], [LV]"
	armorvalue(choices) : "Destination is" : 0 =
	[
		0 : "Position [LP]"
		1 : "Offset [LV]"
	]
	health(choices) : "Length Calculation" : 0 =
	[
		4 : "Square (X = X*X)"
		0 : "None (X = X)"
		1 : "Normalise (X = 1)"
		2 : "Reciprocal (X = 1/X)"
		3 : "Inverse Square (X = 1/X*X)"
	]
	noise(string) : "Length factor [LR]" : "1.0" : "Scale the vector by this factor. A negative number here will make the line go in the opposite direction."
	frags(choices) : "Line is blocked by" : 0 =
	[
		0 : "Nothing"
		1 : "Walls"
		2 : "Walls & Glass"
		3 : "Walls & Monsters"
		4 : "Walls, Monsters & Glass"
	]
]
@PointClass color(170 179 43) size(-12 -12 -12, 12 12 12) base(Targetname) = calc_velocity_polar : "Calculate velocity"
[
	netname(string) : "Based on velocity [LV]"
	angles(string) : "Rotated by angle (Y Z X) (degrees)" : "0 0 0"
	noise(string) : "Length factor [LR]" : "1.0" : "Scale the vector by this factor."
	message(string) : "Add offset [LV]" : "0 0 0" : "After rotation and scaling, add this offset to the vector."
	spawnflags(flags) =
	[
		1 : "Normalize" : 0 : "The 'Length factor' field will set the exact length of the velocity, instead of scaling it by a factor."
	]
]

//
// cyclers
//

@PointClass base(Targetname, Angles, Sequence, RenderFields) flags(Angle) size(-16 -16 0, 16 16 72) studio() = cycler : "Monster Cycler"
[
	model(studio) : "Model"
	scale(string) : "Scale"
]

@PointClass base(Targetname, Angles, RenderFields) sprite() = cycler_sprite : "Sprite Cycler"
[
	model(sprite) : "Sprite"
	scale(string) : "Scale"
	framerate(integer) : "Frames per second" : 10
	spawnflags(flags) =
	[
		1: "Do Save" : 1
		2: "Player can't use" : 0
	]
]

@PointClass base(Monster, Sequence) flags(Angle) size(-16 -16 -16, 16 16 16) studio() = cycler_weapon : "Weapon Cycler"
[
	model(studio) : "Model"
	scale(string) : "Scale"
]

@PointClass sprite() base(Targetname, RenderFields, Angles) size(-4 -4 -4, 4 4 4) = cycler_wreckage : "Wreckage"
[
	framerate(string) : "Framerate" : "10.0"
	model(sprite) : "Sprite Name" : "sprites/fire.spr"
	scale(string) : "Scale" : "1.0"
	spawnflags(flags) =
	[
		32: "Toggle" : 0
		64: "Start ON" : 0
	]
]

//
// Environmental effects
//

@BaseClass = BeamStartEnd
[
	LightningStart(target_destination) : "Start Entity"
	LightningEnd(target_destination) : "Ending Entity"
]
@PointClass base(Targetname, BeamStartEnd, RenderFxChoices) size(-16 -16 -16, 16 16 16) = env_beam : "Energy Beam Effect"
[
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "0 0 0"
	Radius(integer) : "Radius" : 256
	life(string) : "Life (seconds 0 = infinite)" : "1"
	BoltWidth(integer) : "Width of beam (pixels*0.1 0-255)" : 20
	NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr"
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35
	framerate(integer) : "Frames per 10 seconds" : 0
	framestart(integer) : "Starting Frame" : 0
	StrikeTime(string) : "Strike again time (secs)" : "1"
	damage(string) : "Damage / second" : "0"
	spawnflags(flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Random Strike" : 0
		8 : "Ring" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
		128: "Shade Start" : 0
		256: "Shade End" : 0
		512: "Draw Solid" : 0
		1024: "Draw Sine" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_beamtrail : "Beam trail effect"
[
	target(target_destination) : "Entity to trail [LE]"
	netname(sprite) : "Sprite Name" : "sprites/smoke.spr"
	renderamt(integer) : "Brightness (1 - 255)" : 255
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	armorvalue(integer) : "Width" : 5
	health(string) : "Fade time (secs)" : "4.0"
	spawnflags(flags) =
	[
		1: "Start off" : 0
	]
]

@PointClass base(Targetname, Angles) size(-4 -4 -4, 4 4 4) = env_beverage : "Beverage Dispenser"
[
	target(string) : "Initial position (blank = here) [LP]"
	health(integer) : "Capacity" : 10
	skin(choices) : "Beverage Type" : 0 =
	[
		0 : "Coca-Cola"
		1 : "Sprite"
		2 : "Diet Coke"
		3 : "Orange"
		4 : "Surge"
		5 : "Moxie"
		6 : "Random"
	]
	model(studio) : "Custom Model"
	weapons(integer) : "Health for Pickup"
]

@PointClass base(Targetname, Angles) size(-16 -16 -16, 16 16 16) color(255 0 0) = env_blood : "Blood Effects"
[
	target(string) : "Initial position (blank = here) [LP]"
	netname(string) : "Direction (blank = angles) [LV]"
	color(choices) : "Blood Color" : 0 =
	[
		0 : "Red (Human)"
		1 : "Yellow (Alien)"
	]
	amount(string) : "Amount of blood (damage to simulate)" : "100"
	spawnflags(flags) =
	[
		1: "Random Direction" : 0
		2: "Blood Stream" : 0
		4: "On Player" : 0
		8: "Spray decals" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_blowercannon : "Blower Cannon"
[
	position(string) : "Position (blank = here) [LP]"
	direction(string) : "Direction (blank = shoot at target) [LV]"
	projectile_owner(target_destination) : "Projectile owner [LE]" : : "Don't collide with this entity"
	delay(string) : "Delay" : "0"
	zoffset(integer) : "Z Offset"
	target(target_generic) : "Target to shoot at [LE]"
	weaptype(choices) :"Weapon Type" : 1 =
	[
		0: "Squid spit"
		1: "Spore (Rocket)"
		2: "Spore (Grenade)"
		3: "Shock Beam"
		4: "Displacer Ball"
		5: "Squid toxic spit"
	]
	firetype(choices) :"Fire Type" : 1 =
	[
		1: "Toggle On/Off"
		2: "Fire When Triggered"
	]
	spawnflags(flags) =
	[
		32: "Don't delay first fire" : 0
	]
]

@SolidClass base(Targetname) = env_bubbles : "Bubble Volume"
[
	density(integer) : "Bubble density" : 2
	frequency(integer) : "Bubble frequency" : 2
	current(integer) : "Speed of Current" : 0
	bubble_model(sprite) : "Custom Bubble Sprite"
	spawnflags(Flags) =
	[
		1 : "Start Off" 	: 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_decal : "Decal sprayer"
[
	target(string) : "Position (blank = here) [LP]"
	netname(string) : "Spray direction (blank = angle) [LV]"
	impulse(choices) : "Decal group" : 0 =
	[
		1 : "Gunshot"
		2 : "Blood"
		3 : "Alien blood"
		4 : "Glass cracks"
		5 : "Big gunshot"
		6 : "Scorch marks"
		7 : "Bullsquid splat"
		8 : "Small scorch marks"
		9 : "Spore splat (opfor)"
		10 : "Shock scorch (opfor)"
		11 : "Small shock scorch (opfor)"
		0 : "Custom (see below)"
	]
	noise(decal) : "Custom decal texture"
]

@PointClass base(Targetname) = env_dlight : "Dynamic light effect"
[
	message(string) : "Position (blank = here) [LP]"
	rendercolor(color255) : "Light Color (R G B)" : "255 255 255"
	renderamt(integer) : "Radius" : 80
	health(string) : "Duration (0 = until triggered)" : "0.0"
	spawnflags(Flags) =
	[
		1 : "Only once" : 0
		2 : "Start on"  : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_explosion : "Explosion"
[
	target(string) : "Initial position (blank = here) [LP]"
	iMagnitude(Integer) : "Magnitude" : 100
	iRadius(Integer) : "Custom impact radius" : : "By default explosion impact radius equals its magnitude multiplied by 2.5. This parameter allows to configure the effective radius"
	spawnflags(flags) =
	[
		1: "No Damage" : 0
		2: "Repeatable" : 0
		4: "No Fireball" : 0
		8: "No Smoke" : 0
		16: "No Decal" : 0
		32: "No Sparks" : 0
		64: "No Sound" : 0
		128: "Activator is attacker" : 0
	]
	model(sprite) : "Custom Fireball Sprite"
	smokesprite(sprite) : "Custom Smoke Sprite"
	scale(string) : "Custom sprite scale"
]

@PointClass base(Targetname, Angles) flags(Angle) size(-8 -8 -8, 8 8 8) = env_extinguisher : "Fire Extinguisher Blast"
[
	target(target_destination) : "Target on start/end" : : "Fire this target two times: when the entity is activated and when it's drained."
	spawnflags(flags) =
	[
		1: "Repeatable" : 0
	]
]

@PointClass base(Targetname) color(255 255 128) iconsprite("sprites/env_global.spr") = env_global : "Global State"
[
	globalstate(string) : "Global State to Set"
	triggermode(choices) : "Trigger Mode" : 0 =
	[
		0 : "State Off"
		1 : "State On"
		2 : "State Dead"
		3 : "Toggle State"
		4 : "Modify/Set value"
		5 : "Set State: Obey Use-type"
	]
	initialstate(choices) : "Initial State" : 0 =
	[
		0 : "Off"
		1 : "On"
		2 : "Dead"
	]
	initialvalue(integer) : "Initial Value"
	spawnflags(flags) =
	[
		1 : "Set Initial State" : 0
		4 : "Act as Master" : 0
	]
]

@PointClass sprite() base(Targetname, RenderFields) size(-4 -4 -4, 4 4 4) color(30 100 0) = env_glow : "Light Glow/Haze"
[
	model(sprite) : "Sprite Name" : "sprites/glow01.spr"
	scale(integer) : "Scale" : 1
]

@PointClass base(Targetname) = env_fade : "Screen Fade"
[
	spawnflags(flags) =
	[
		1: "Fade From" : 0
		2: "Modulate" : 0
		4: "Activator Only" : 0
		8: "Direct blind" : 0 : "Fade alpha depends on the angle between viewer camera and env_fade origin"
	]
	duration(string) : "Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "0"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
]

@PointClass base(Targetname) = env_fog : "Fog effect"
[
	fadein(integer) : "Fade in time" : 0
	holdtime(string) : "Hold time (0 = permanent)" : "0"
	fadeout(integer) : "Fade out time" : 0
	startdist(integer) : "Fog start distance" : 0
	enddist(integer) : "Fog end distance" : 1000
	rendercolor(color255) : "Fog Color (R G B)" : "200 200 200"
	spawnflags(flags) =
	[
		1 : "Start active"   : 0
		2 : "Affect skybox"   : 0
	]
	fogtype(Choices) : "GL Fog type" =
	[
		0 : "Default (engine-dependent)"
		1 : "Exponential"
		2 : "Exponential2"
		3 : "Linear"
	]
	density(string) : "Density" : 0.001
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_funnel : "Large Portal Funnel"
[
	message(string) : "Position (blank = here) [LP]"
	netname(sprite) : "Particle sprite"
	spawnflags(flags) =
	[
		1: "Reverse" : 0
		2: "Repeatable" : 0
	]
]

@PointClass base(Targetname, RenderFxChoices, Angles) size(-16 -16 -16, 16 16 16) = env_laser : "Laser Beam Effect"
[
	LaserTarget(target_destination) : "Target of Laser"
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "0 0 0"
	width(integer) : "Width of beam (pixels*0.1 0-255)" : 20
	NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
	texture(sprite) : "Sprite Name" : "sprites/laserbeam.spr"
	EndSprite(sprite) : "End Sprite" : ""
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35
	framestart(integer) : "Starting Frame" : 0
	damage(string) : "Damage / second" : "100"
	spawnflags(flags) =
	[
		1 : "Start On" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
	]
]

@PointClass base(Targetname, Target) = env_message : "HUD Text Message"
[
	message(string) : "Message Name"
	spawnflags(flags) =
	[
		1: "Play Once" : 0
		2: "All Clients" : 0
	]
	messagesound(sound) : "Sound Effect"
	messagevolume(string) : "Volume 0-10" : "10"
	messageattenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]
]

@PointClass base(Targetname, Angles, RenderFields) studio() = env_model : "New alternative to cyclers"
[
	model(studio) : "Model name"
	skin(integer) : "Skin" : 0
	body(integer) : "Body" : 0
	scale(string) : "Scale (1.0 = normal size)"
	frame(integer) : "Starting frame (-1..255)"
	m_iszSequence_On(string) : "Sequence when on"
	m_iAction_On(choices) : "Behaviour when on" : 0 =
	[
		0: "Freeze when sequence ends"
		1: "Loop"
		2: "Change state when sequence ends"
	]
	m_flFramerate_On(string) : "Framerate when on (1 is default)"
	m_iszSequence_Off(string) : "Sequence when off"
	m_iAction_Off(choices) : "Behaviour when off" : 0 =
	[
		0: "Freeze when sequence ends"
		1: "Loop"
		2: "Change state when sequence ends"
	]
	m_flFramerate_Off(string) : "Framerate when off (1 is default)"
	spawnflags(flags) =
	[
		1: "Initially Off" : 0
		2: "Drop to Floor" : 0
		4: "Solid" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_quakefx : "Quake 1 particle effects"
[
	message(string) : "Position (blank = here) [LP]"
	impulse(choices) : "Effect type" : 4 =
	[
		4 : "Tar Explosion"
		10 : "Lava Splash"
		11 : "Teleport Splash"
		12 : "Explosion"
		14 : "Implosion"
		122 : "Particle Burst"
	]
	frags(integer) : "Particle Burst: color number" : 70
	armortype(integer) : "Implosion/Particle Burst: radius" : 250
	health(string) : "Implosion/Particle Burst: duration" : "1.0"
	armorvalue(integer) : "Implosion tracer count" : 10
	spawnflags(flags) =
	[
		1: "Repeatable" : 0
	]
]

@BaseClass = RainFlags
[
	spawnflags(flags) =
	[
		1: "Start Active" : 0
		2: "Allow indoor" : 0 : "Allow rain even under the roof"
		4: "Raindrops not affected by wind": 0
		32: "No wind particles" : 0 : "Disable wind puff particles"
		64: "No rain splashes" : 0 : "Disable rain splashes on the ground"
		128: "No ripples" : 0 : "Disable ripples on the water"
	]
]

@BaseClass = RainBaseParams
[
	intensity(integer) : "Rain intensity" : : "The maximum number of raindrops to spawn per rain update. Default is 150. The result also depends on the user's cl_weather value. If you customize the rain volume you should adjust this value accordingly to preserve the same rain density."
	update_period(string) : "Update period (seconds)" : : "The delay between spawns of bunches of raindrops. Default is 0.3. Decreasing this value will produce raindrops more frequently."
]

@BaseClass = EnvRainParams
[
	distance(integer) : "Rain max distance" : : "Maximum distance the raindrops appear in. Default is 400"
	min_height(integer) : "Precipitation min height" : : "Minimum height above the rain origin where the raindrops spawn. Default is 100. If rain is global the origin is rougly at the player's head. Localized rain uses the entity origin."
	max_height(integer) : "Precipitation max height" : : "Maximum height above the rain origin where the raindrops spawn. Default is 300. If rain is global the origin is rougly at the player's head. Localized rain uses the entity origin."
]

@BaseClass = RainParticlesParams
[
	raindrop_sprite(sprite) : "Raindrop custom sprite"
	raindrop_width(integer) : "Raindrop width (units)"
	raindrop_height(integer) : "Raindrop tallness (units)"
	rendermode(choices) : "Raindrop render mode" =
	[
		0: "Default (Solid)"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "Raindrop brightness [1-255]"
	rendercolor(color255) : "Raindrop color"

	raindrop_light_mode(choices) : "Raindrop light mode" =
	[
		0: "Default"
		1: "Light doesn't affect color"
		2: "Light color affects color"
		3: "Light intensity affects color"
	]

	raindrop_min_speed(integer) : "Raindrop min falling speed"
	raindrop_max_speed(integer) : "Raindrop max falling speed"
	raindrop_life(string) : "Raindrop max life (seconds)"

	windpuff_sprite(sprite) : "Windpuff custom sprite"
	windpuff_min_size(integer) : "Wind puff min size (units)"
	windpuff_max_size(integer) : "Wind puff max size (units)"
	windpuff_rendermode(choices) : "Wind puff render mode" =
	[
		0: "Default (Solid)"
		4: "Solid"
		5: "Additive"
	]
	windpuff_renderamt(integer) : "Wind puff brightness [1-255]"
	windpuff_rendercolor(color255) : "Wind puff color"
	windpuff_light_mode(choices) : "Wind puff light mode" =
	[
		0: "Default"
		1: "Light doesn't affect color"
		2: "Light color affects color"
		3: "Light intensity affects color"
	]
	windpuff_life(string) : "Wind puff life (seconds)"

	splash_sprite(sprite) : "Rainsplash custom sprite"
	splash_min_size(integer) : "Rainsplash min size (units)"
	splash_max_size(integer) : "Rainsplash max size (units)"
	splash_rendermode(choices) : "Rainsplash render mode" =
	[
		0: "Default (Additive)"
		4: "Solid"
		5: "Additive"
	]
	splash_renderamt(integer) : "Rainsplash brightness [1-255]"
	splash_rendercolor(color255) : "Rainsplash color"
	splash_light_mode(choices) : "Rainsplash light mode" =
	[
		0: "Default"
		1: "Light doesn't affect color"
		2: "Light color affects color"
		3: "Light intensity affects color"
	]

	ripple_sprite(sprite) : "Ripple custom sprite"
	ripple_size(integer) : "Ripple size (units)"
	ripple_rendermode(choices) : "Ripple render mode" =
	[
		0: "Default (Additive)"
		4: "Solid"
		5: "Additive"
	]
	ripple_renderamt(integer) : "Ripple brightness [1-255]"
	ripple_rendercolor(color255) : "Ripple color"
	ripple_light_mode(choices) : "Ripple light mode" =
	[
		0: "Default"
		1: "Light doesn't affect color"
		2: "Light color affects color"
		3: "Light intensity affects color"
	]
]

@PointClass base(Targetname, RainFlags, RainBaseParams, EnvRainParams, RainParticlesParams) = env_rain : "Similar to rain in Counter Strike, but with configurable options"
[
	spawnflags(flags) =
	[
		8: "Localized" : 0 : "Spawn raindrops above the env_rain entity. By default raindrops spawn above players (i.e. globally)"
		16: "Distance is radius" : 0 : "By default 'distance' means half of the square area side the raindrops will spawn in. This flag makes treat distance as circle radius."
	]
]

@SolidClass base(Targetname, RainFlags, RainBaseParams, RainParticlesParams) = func_rainvolume : "Brush version of env_rain, localized in the designated area. The rain height and distance depend on the brush size."
[]

@BaseClass = SnowFlags
[
	spawnflags(flags) =
	[
		1: "Start Active" : 0
		2: "Allow indoor" : 0 : "Allow snow even under the roof"
		4: "Snowflakes not affected by wind": 0
		8: "Localized" : 0 : "Spawn snowflakes above the env_snow entity. By default snowflakes spawn above players (i.e. globally)"
		16: "Distance is radius" : 0 : "By default 'distance' means half of the square area side the snowflakes will spawn in. This flag makes treat distance as circle radius."
	]
]

@BaseClass = SnowBaseParams
[
	intensity(integer) : "Snow intensity" : : "The maximum number of snowflakes to spawn per update. Default is 150. The result also depends on the user's cl_weather value. If you customize the snow volume you should adjust this value accordingly to preserve the same snow density."
	update_period(string) : "Update period (seconds)" : : "The delay between spawns of bunches of snowflakes. Default is 0.5. Decreasing this value will produce snowflakes more frequently."
]

@BaseClass = EnvSnowParams
[
	distance(integer) : "Snow max distance" : : "Maximum distance the snowflakes appear in. Default is 300"
	min_height(integer) : "Precipitation min height" : : "Minimum height above the snow origin where the snowflakes spawn. Default is 100. If snow is global the origin is rougly at the player's head. Localized snow uses the entity origin."
	max_height(integer) : "Precipitation max height" : : "Maximum height above the snow origin where the snowflakes spawn. Default is 300. If snow is global the origin is rougly at the player's head. Localized snow uses the entity origin."
]

@BaseClass = SnowParticlesParams
[
	snowflake_sprite(sprite) : "Snowflake custom sprite"
	snowflake_min_size(integer) : "Snowflake min size (units)"
	snowflake_max_size(integer) : "Snowflake max size (units)"
	rendermode(choices) : "Snowflake render mode" =
	[
		0: "Default (Additive)"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "Snowflake brightness [1-255]"
	rendercolor(color255) : "Snowflake color"

	snowflake_light_mode(choices) : "Snowflake light mode" =
	[
		0: "Default"
		1: "Light doesn't affect color"
		2: "Light color affects color"
		3: "Light intensity affects color"
	]

	snowflake_min_speed(integer) : "Snowflake min falling speed"
	snowflake_max_speed(integer) : "Snowflake max falling speed"
	snowflake_life(string) : "Snowflake max life (seconds)"
]

@PointClass base(Targetname, SnowFlags, SnowBaseParams, EnvSnowParams, SnowParticlesParams) = env_snow : "Similar to snow in Counter Strike, but with configurable options" []

@SolidClass base(Targetname, SnowFlags, SnowBaseParams, SnowParticlesParams) = func_snowvolume : "Brush version of env_rain, localized in the designated area. The rain height and distance depend on the brush size."
[]

@PointClass base(Targetname, RenderFields) size(-16 -16 -16, 16 16 16) color(100 100 0) = env_render : "Render Controls"
[
	target(target_destination) : "Target to affect [LE]"
	message(string) : "FX Amount factor [LR]"
	m_fScale(string) : "Scale (0 = no change) [LR]"
	frags(string) : "Fade Time (secs)"
	armorvalue(string) : "Fade Coarseness (secs)"
	netname(target_destination) : "Trigger after fading"
	spawnflags(flags) =
	[
		1: "No Renderfx" : 0
		2: "No Renderamt" : 0
		4: "No Rendermode" : 0
		8: "No Rendercolor" : 0
		32: "Remove target" : 0
		64: "Remove self" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_electrified_wire : "Electrified Wire"
[
	segments(integer) : "Segments" : 16
	sparkfrequency(integer) : "Spark Frequency" : 3
	bodysparkfrequency(integer) : "Body Spark Frequency" : 3
	lightningfrequency(integer) : "Lightning Frequency" : 3
	xforce(integer) : "X Force" : 80000
	yforce(integer) : "Y Force" : 80000
	zforce(integer) : "Z Force" : 80000
	disable(choices) :"Disable Use" : 1 =
	[
		0: "Not Disabled"
		1: "Disabled"
	]
	endingmodel(studio) : "Ending Model" : "models/wire_copper16.mdl"
	bodymodel(studio) : "Body Model" : "models/wire_black16.mdl"
	spawnflags(flags) =
	[
		2: "No map transition" : 0
		4: "Obey Trigger Mode" : 0
	]
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_rope : "Rope"
[
	segments(integer) : "Segments" : 16
	disable(choices) :"Disable Use" : 0 =
	[
		0: "Not Disabled"
		1: "Disabled"
	]
	endingmodel(studio) : "Ending Model" : "models/rope16.mdl"
	bodymodel(studio) : "Body Model" : "models/rope16.mdl"
	spawnflags(flags) =
	[
		2: "No map transition" : 0
	]
]

@PointClass base(Targetname) = env_shake : "Screen Shake"
[
	spawnflags(flags) =
	[
		1: "GlobalShake" : 0
	]
	amplitude(string) : "Amplitude 0-16" : "4"
	radius(string) : "Effect radius" : "500"
	duration(string) : "Duration (seconds)" : "1"
	frequency(string) : "0.1 = jerk, 255.0 = rumble" : "2.5"
]

@PointClass base(Targetname) = env_shockwave : "Shockwave Effect"
[
	spawnflags(flags) =
	[
		1: "Centered" : 0
		2: "Repeatable" : 0
	]
	m_iszPosition(string) : "Position (blank = here) [LP]"
	netname(sprite) : "Spritename" : "sprites/shockwave.spr"
	rendercolor(color255): "Color": "188 220 255"
	renderamt(integer) : "Opacity (0-255)": 255
	m_iTime(integer) : "Duration" : 2
	m_iRadius(integer) : "Final radius" : 1000
	m_iHeight(integer) : "Wave height" : 32
	m_iScrollRate(integer) : "Scroll rate" : 0
	m_iNoise(integer) : "Distortion ('noise')" : 0
	m_iFrameRate(integer) : "Frame Rate" : 0
	m_iStartFrame(integer) : "Starting Frame" : 0
	m_cType(Choices) : "Type" =
	[
		0 : "Default (Cylinder)"
		19 : "Torus"
		20 : "Disk"
		21 : "Cylinder"
	]
]

@PointClass base(gibshooterbase, RenderFields) color(184 90 164) = env_shooter : "Model Shooter"
[
	shootmodel(studio) : "Model or Sprite name" : ""
	shootsounds(choices) :"Material Sound" : -1 =
	[
		-1: "None"
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Concrete"
	]
	scale(string) : "Gib Sprite Scale" : ""
	skin(integer) : "Gib Skin (-1 is random)" : 0
	spawnflags(Flags) =
	[
		1 : "Repeatable" 	: 0
		2 : "Scale models" : 0
		4 : "Don't wait till land" : 0 : "Start fading right after life time has expired"
	]
]

@PointClass base(Targetname, RenderFields) size(-16 -16 -16, 16 16 16) = env_smoker : "Smoker"
[
	health(integer) : "Times to smoke [0 = infinite]" : 1
	scale(string) : "Smoke Scale" : 1
	dmg(string) : "Dispersion of smoke particles" : "0"
	dmg_take(string) : "Min delay between smokes" : "0.4"
	dmg_save(string) : "Max delay between smokes" : "0.6"
	framerate(integer) : "Framerate"
	speed(integer) : "Speed" : 30
	scale_speed(string) : "Scale Speed"
	model(sprite) : "Sprite"
	frags(integer) : "Z offset"
	target(string) : "Position to smoke at [LP]"
	direction(string) : "Smoke direction [LV]" : : "When deciding on the direction this option has higher preference than 'Position to smoke at'."
	position(string) : "Smoke from [LP]"
	scale_unit_type(choices) :"Scale unit type" : 1 =
	[
		0: "Decile (tenth)"
		1: "Normal"
	]
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		4 : "Repeatable" : 0
		8 : "Directed" : 0
		16 : "Fade sprite" : 0
	]
]

@BaseClass = RoomType
[
	roomtype(Choices) : "Room Type" : 0 =
	[
		0 : "Normal (off)"
		1 : "Generic"

		2 : "Metal Small"
		3 : "Metal Medium"
		4 : "Metal Large"

		5 : "Tunnel Small"
		6 : "Tunnel Medium"
		7 : "Tunnel Large"

		8 : "Chamber Small"
		9 : "Chamber Medium"
		10: "Chamber Large"

		11: "Bright Small"
		12: "Bright Medium"
		13: "Bright Large"

		14: "Water 1"
		15: "Water 2"
		16: "Water 3"

		17: "Concrete Small"
		18: "Concrete Medium"
		19: "Concrete Large"

		20: "Big 1"
		21: "Big 2"
		22: "Big 3"

		23: "Cavern Small"
		24: "Cavern Medium"
		25: "Cavern Large"

		26: "Weirdo 1"
		27: "Weirdo 2"
		28: "Weirdo 3"
	]
]

@PointClass base(RoomType) iconsprite("sprites/speaker.spr") = env_sound : "DSP Sound"
[
	radius(integer) : "Radius" : 128
]

@PointClass base(Targetname) size(-8 -8 -8,8 8 8) = env_soundmark : "Insert world sound or smell (affects some monsters)"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	radius(string) : "Sound Radius" : "384"
	duration(string) : "Sound Duration" : "0.3"
	position(string) : "Position (blank = here) [LP]"
	type(choices) : "Sound Type" : 32 =
	[
		1 : "Combat"
		8 : "Carcass"
		16 : "Meat"
		32 : "Danger"
	]
]

@PointClass base(Targetname, Angles, SoundRadius) size(-8 -8 -8, 8 8 8) color(255 220 15) = env_spark : "Spark"
[
	MaxDelay(string) : "Max Time between sparks"
	spawnflags(flags) =
	[
		16: "Cyclic" : 0
		32: "Toggle" : 0
		64: "Start ON" : 0
		128: "No Streaks" : 0
	]
	model(sprite) : "Custom Sprite"
	streak_count(integer) : "Custom Streak Count"
	streak_velocity(integer) : "Custom Streak Velocity"
	spark_duration(string) : "Custom Spark Duration"
	spark_scale_min(string) : "Custom Spark Min Scale"
	spark_scale_max(string) : "Custom Spark Max Scale"
	spark_volume(string) : "Spark Volume Factor"
	spark_silent(choices) : "Spark Silent" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass sprite() base(Targetname, RenderFields, Angles) size(-4 -4 -4, 4 4 4) = env_sprite : "Sprite Effect"
[
	framerate(string) : "Framerate" : "10.0"
	model(sprite) : "Sprite Name" : "sprites/glow01.spr"
	scale(string) : "Scale"
	message(target_destination) : "Attached to entity..."
	frags(choices) : "...at attachment point" =
	[
		0 : "0 (origin)"
		1 : "1"
		2 : "2"
		3 : "3"
		4 : "4"
	]
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
		4: "Once + Remove" : 0
		8: "Don't mess Yaw" : 0
	]
	impulse(integer) : "Start frame" : : "Start frame for animation, negative value means random frame."
]

@BaseClass = BaseTrain
[
	target(target_destination) : "First stop target"
	speed(integer) : "Speed (units per second)" : 64
	m_iObeyTriggerMode(choices) : "Obey Trigger Mode" : : "Originally trains don't interpret use-types. This parameter allows to take use-type into account. On is to proceed the train, Off is to stop." =
	[
		0 : "No"
		1 : "Yes"
	]
	spawnflags(flags) =
	[
		4 : "Initially On" : 0
	]
	volume(string) : "Sound Volume 0.0 - 1.0" : "0.85"
	soundpitch(integer) : "Movesound Pitch (def.=100)"
]

@PointClass studio() base(Targetname, BaseTrain, SoundRadius) size(-16 -16 -16, 16 16 16) color(0 128 255) = env_modeltrain : "Model Train"
[
	model(studio) : "Model"
	scale(string) : "Model Scale"
	noise(sound) : "Move Sound"
	noise1(sound) : "Stop Sound"
]

@PointClass sprite() base(Targetname, RenderFields, BaseTrain, SoundRadius) size(-16 -16 -16, 16 16 16) color(0 128 255) = env_spritetrain : "Sprite Train"
[
	model(sprite) : "Sprite Name" : "sprites/glow01.spr"
	scale(string) : "Sprite Scale"
	framerate(string) : "Framerate" : "10.0"
	noise(sound) : "Move Sound"
	noise1(sound) : "Stop Sound"
]

@PointClass base(Targetname) color(128 128 255) = env_state : "Local State. Can be used as Master entity"
[
	target(target_destination) : "Fire On State Change (on & off)" : : "Fire this target when the state of env_state changes. It sends On or Off use-type depending on the new state"
	noise1(target_destination) : "Fire when turned on"
	noise2(target_destination) : "Fire when turned off"
	turnontime(string) : "Time taken to turn on"
	turnofftime(string) : "Time taken to turn off"
	master(string) : "Master"
	spawnflags(flags) =
	[
		1 : "Start On" : 0
		2 : "Debug Mode" : 0
	]
]

@PointClass base(Targetname) color(128 128 255) = calc_state : "Calculate State using logical operators ('On' state is True and 'Off' state if false). Can be used as Master entity"
[
	left_operand(string) : "Operand 1 [LE]"
	right_operand(string) : "Operand 2 [LE]"
	operation(choices) : "Operation" : 0 =
	[
		0: "AND"
		1 : "OR"
		2 : "NAND"
		3 : "NOR"
		4 : "XOR"
		5 : "NXOR"
	]
	left_fallback(choices) : "Operand 1 fallback" =
	[
		0 : "Treat as error"
		1 : "Treat as Off"
		2 : "Treat as On"
	]
	right_fallback(choices) : "Operand 2 fallback" =
	[
		0 : "Treat as error"
		1 : "Treat as Off"
		2 : "Treat as On"
	]
	target(target_destination) : "Target (on & off)"
	fire_when_false(target_destination) : "Fire when eval to False"
	fire_when_true(target_destination) : "Fire when eval to True"
	spawnflags(flags) =
	[
		2 : "Debug Mode" : 0
	]
]

@PointClass base(Targetname) = env_stompshooter : "Generate garg stomps on each fire. Should be placed on the floor."
[
	target(target_destination) : "Stomp target" : : "Optional. If not defined, the entity will shoot at the direction of its alignment"
	netname(string) : "Stomp owner" : : "The stomp will not hurt its owner"
	speed(string) : "Initial speed"
	attenuation(string) : "Sound attenuation"
	spawnflags(flags) =
	[
		1 : "Fire once" : 0
	]
]

@PointClass base(Targetname) = env_streak : "Streak splash"
[
	count(integer) : "Count" : 20
	speed(integer) : "Speed" : 50
	scale(string) : "Length" : 1.0
	randomness(integer) : "Random velocity modifier" : 400
	tracer_color(choices) : "Tracer color index" : 6 =
	[
		0: "White"
		1: "Red"
		2: "Green"
		3: "Blue"
		4: "Default (cvars)"
		5: "Golden"
		6: "Orange"
		7: "Purple"
		8: "Yellowish"
		9: "Yellowish 2"
		10: "Yellowish 3"
		11: "Yellowish 4"
	]
	minlife : "Min life" : 0.1
	maxlife : "Min life" : 0.5
	pt_type(choices) : "Particle type" : 1 =
	[
		1 : "Gravity"
		2 : "Slow gravity"
		3 : "Fire"
		4 : "Explode"
		5 : "Explode 2"
		6 : "Blob"
		7 : "Blob 2"
		8 : "Vox slow gravity"
		9 : "Vox gravity"
	]
	message(string) : "Position (blank = here) [LP]"
	spawnflags(flags) =
	[
		1: "Remove on fire" : 0
	]
]

@PointClass sprite() base(Targetname, RenderFields, SoundRadius) size(-16 -16 -16, 16 16 16) = env_warpball : "Xen Warpball"
[
	model(sprite) : "Sprite Name" : "sprites/fexplo1.spr"
	amplitude(string) : "Shake Amplitude 0-16"
	duration(string) : "Shake Duration (seconds)"
	frequency(string) : "Shake Frequency (0.1 = jerk, 255.0 = rumble)"
	radius(integer) : "Shake and Beam Radius" : 192
	scale(string) : "Sprite Scale"
	framerate(string) : "Sprite Framerate"
	warp_target(string) : "Warp position [LP]"
	damage_delay(string) : "Damage delay"
	beamcolor(color255) : "Beam color"
	beamcount(integer) : "Max beam count" : 20
	spawnflags(flags) =
	[
		1: "Remove on fire" : 0
		2: "Kill center" : 0
		4: "No screen shake" : 1
		8: "Dynamic light" : 0
		16: "No sounds" : 0
	]
	noise1(sound) : "Custom sound 1"
	noise2(sound) : "Custom sound 2"
	volume(string) : "Sound volume (1.0 is max)"
	aisound(choices) : "AI Sound type" =
	[
		0 : "No sound"
		1 : "Combat"
		32 : "Danger"
	]
	aisound_duration(string) : "AI Sound duration"
	model2(sprite) : "Sprite 2 Name" : "sprites/xflare1.spr" : "Sprite to play along with a sprite defined in 'Sprite name', for more interesting visuals"
	rendercolor2(color255) : "Sprite 2 color" : : "If left undefined, use the same color as for the first sprite"
	renderamt2(integer) : "Sprite 2 brightness"
	scale2(string) : "Sprite 2 scale"
	framerate2(string) : "Sprite 2 framerate"
]

@PointClass base(Target, Targetname) size(-24 -24 -24,24 24 24) = env_xenmaker :"Xen Portal. This entity is present just for compatibility with Sven Co-op"
[
	spawnflags(flags) =
	[
		1: "Try Once" : 0
		2: "No Spawn" : 0
	]

	monstertype(string) : "Monster Type" : "monster_headcrab"

	m_flBeamRadius(integer) : "Beam Radius (max)" : 255
	m_iBeamAlpha(integer) : "Beam Alpha" : 128
	m_iBeamCount(integer) : "Beam Count" : 8
	m_vBeamColor(color255) : "Beam Color" : "217 226 146"

	m_flLightRadius(integer) : "Light Radius" : 160
	m_vLightColor(color255) : "Light Color" : "39 209 137"

	m_flStartSpriteFramerate(integer) : "Sprite1 Framerate" : 12
	m_flStartSpriteScale(string) : "Sprite1 Scale" : "1.0"
	m_iStartSpriteAlpha(integer) : "Sprite1 Alpha" : 255
	m_vStartSpriteColor(color255) : "Sprite1 Color" : "65 209 61"

	m_flEndSpriteFramerate(integer) : "Sprite2 Framerate" : 12
	m_flEndSpriteScale(string) : "Sprite2 Scale" : "1.0"
	m_iEndSpriteAlpha(integer) : "Sprite2 Alpha" : 255
	m_vEndSpriteColor(color255) : "Sprite2 Color" : "159 240 214"
]

@PointClass sprite("sprites/xspark4.spr") base(Targetname) size(-16 -16 -16, 16 16 16) = env_energy_ball_trap : "Energy ball (similar to one used by alien controllers) that detects the presence of the player and shoots itself into the player if they stay nearby for too long. Respawns after some time"
[
	radius(string) : "Custom detection radius"
	wait(string) : "Custom respawn time"
]

@BaseClass = BreakableSpawnFlags
[
	spawnflags(Flags) =
	[
		8192: "Smoke trails on gibs" : 0
		16384 : "Transparent gibs" : 0
	]
]

@SolidClass base(Breakable, BreakableSpawnFlags, RenderFields, ZHLT) = func_breakable : "Breakable Object"
[
	spawnflags(flags) =
	[
		1 : "Only Trigger" : 0
		2 : "Touch"	   : 0
		4 : "Pressure"     : 0
		8: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Repairable' flag"
		32: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Show HUD Info' flag"
		64: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Immune To Clients' flag"
		256: "Instant break by melee" : 0
		512: "Explosives only": 0
		1024: "Op4Mortar only" : 0
		4096: "Not solid" : 0
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, BreakableSpawnFlags) = func_breakable_effect : "Effect similar to func_breakable destruction, but without visible object"
[
	material(choices) :"Material type" : 0 =
	[
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Cinder Block"
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
	]
	gibmodel(studio) : "Gib Model"
	m_iGibs(integer) : "Custom number of gibs"
	spawnflags(Flags) =
	[
		1 : "Repeatable" : 0
	]
]

@BaseClass = ButtonUseType
[
	usetype(choices) : "Use Type" : : "Note: This parameter is not compatible with Sven Co-op and has a different name!" =
	[
		-1 : "Off"
		0 : "Toggle"
		1 : "On"
		2 : "On/Off (for Toggle buttons)"
		3 : "Off/On (for Toggle buttons)"
	]
]
@BaseClass = EntityUsePolicy
[
	directuse(choices) : "Player use policy" =
	[
		0 : "Default"
		1 : "Direct only"
		2 : "Reachable only"
	]
]
@BaseClass = ButtonTrigger
[
	trigger_on_return(target_destination) : "Trigger on return"
	trigger_before_move(target_destination) : "Trigger before move/rotate"
]
@BaseClass = ButtonWaitToggle
[
	wait_toggle(string) : "Delay before toggling again"
]

@SolidClass base(Global, Targetname, Targetx, RenderFields, Angles, ZHLT, BaseLockable, ButtonUseType, EntityUsePolicy, ButtonTrigger, ButtonWaitToggle) = func_button : "Button"
[
	speed(integer) : "Speed" : 5
	health(integer) : "Health (shootable if > 0)"
	lip(integer) : "Lip"
	master(string) : "Master"
	sounds(choices) : "Sounds" : 0 =
	[
		0: "None"
		1: "Big zap & Warmup"
		2: "Access Denied"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		10: "Buzz"
		11: "Buzz Off"
		14: "Lightswitch"
	]
	noise(sound) : "Sound Override"
	wait(integer) : "delay before reset (-1 stay)" : 3
	spawnflags(flags) =
	[
		1: "Don't move" : 1
		16: "Direct use only (spirit compat)": 0
		32: "Toggle" : 0
		64: "Sparks" : 0
		256:"Touch Activates": 0
		512:"Player Can't Use": 0
		1024:"Check master on return": 0
	]
	target_on_locked(target_destination) : "Target on locked" : : "Trigger if used when locked"
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Global,RenderFields, Targetname, Angles, ZHLT) = func_conveyor : "Conveyor Belt"
[
	spawnflags(flags) =
	[
		1 : "No Push" : 0
		2 : "Not Solid" : 0
	]
	speed(string) : "Conveyor Speed" : "100"
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Door, ZHLT, EntityUsePolicy) = func_door : "Basic door" []

@SolidClass base(Door, ZHLT, EntityUsePolicy) = func_door_rotating : "Rotating door"
[
	spawnflags(flags) =
	[
		2 : "Reverse Dir" : 0
		16: "One-way" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	distance(integer) : "Distance (deg)" : 90
]

@SolidClass base(Appearflags, RenderFields, ZHLT) = func_friction : "Surface with a change in friction"
[
	modifier(integer) : "Percentage of standard (0 - 100)" : 15
]

@SolidClass base(Targetname, RenderFields, Global, ZHLT) = func_guntarget : "Moving platform"
[
	speed(integer) : "Speed (units per second)" : 100
	target(target_destination) : "First stop target"
	message(target_destination) : "Fire on damage"
	health(integer) : "Damage to Take" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Global, Recharger, RenderFields, ZHLT) = func_healthcharger: "Wall health recharger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, RenderFields, ZHLT) = func_illusionary : "Fake Wall/Light"
[
	spawnflags(flags) =
	[
		2 : "Use Angles" : 0
	]
	skin(choices) : "Contents" : -1 =
	[
		-1: "Empty"
		-7: "Volumetric Light"
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(func_illusionary) = func_illusionary_toggle : "Fake toggleable Wall/Light"
[
	spawnflags(flags) =
	[
		1 : "Starts Invisible" : 0
	]
]

@SolidClass base(Targetname) = func_ladder : "Ladder"
[
	spawnflags(flags) =
	[
		1 : "Start Off" : 0
	]
]

@SolidClass base(Targetname) = func_monsterclip : "Monster clip brush" []

@SolidClass base(Targetname) = func_mortar_field : "Mortar Field"
[
	m_flSpread(integer) : "Spread Radius" : 64
	m_iCount(integer) : "Repeat Count" : 1
	m_fControl(Choices) : "Targeting" : 0 =
	[
		0 : "Random"
		1 : "Activator"
		2 : "Table"
	]
	m_iszXController(target_destination) : "X Controller"
	m_iszYController(target_destination) : "Y Controller"
]

@SolidClass base(Global,Appearflags, Targetname, RenderFields, Angles, ZHLT) = func_pendulum : "Swings back and forth"
[
	speed(integer) : "Speed" : 100
	distance(integer) : "Distance (deg)" : 90
	damp(integer) : "Damping (0-1000)" : 0
	dmg(integer) : "Damage inflicted when blocked" : 0
	spawnflags(flags) =
	[
		1: "Start ON" : 0
		8: "Passable" : 0
		16: "Auto-return" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
		256: "Rotate both ways" : 0
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname,Global,RenderFields, PlatSounds, ZHLT) = func_plat : "Elevator"
[
	spawnflags(Flags) =
	[
		1: "Toggle" : 0
	]
	height(integer) : "Travel altitude (can be negative)" : 0
	speed(integer) : "Speed" : 50
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, PlatSounds, Angles, ZHLT) = func_platrot : "Moving Rotating platform"
[
	spawnflags(Flags) =
	[
		1: "Toggle" : 1
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	speed(integer) : "Speed of rotation" : 50
	height(integer) : "Travel altitude (can be negative)" : 0
	rotation(integer) : "Spin amount" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Breakable, BreakableSpawnFlags, RenderFields, ZHLT) = func_pushable : "Pushable object"
[
	size(choices) : "Hull Size" : 0 =
	[
		0: "Point size"
		1: "Player size"
		2: "Big Size"
		3: "Player duck"
	]
	spawnflags(flags) =
	[
		8: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Repairable' flag"
		32: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Show HUD Info' flag"
		128: "Breakable" : 0
		512: "Explosives only": 0
	]
	friction(integer) : "Friction (0-400)" : 50
	buoyancy(integer) : "Buoyancy" : 20
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Global, Recharger, RenderFields, ZHLT) = func_recharge: "Battery recharger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT, BaseLockable, ButtonUseType, EntityUsePolicy, ButtonTrigger, ButtonWaitToggle) = func_rot_button : "RotatingButton"
[
	target(target_destination) : "Targetted object"
	// changetarget will change the button's target's TARGET field to the button's changetarget.
	changetarget(target_destination) : "ChangeTarget Name"
	master(string) : "Master"
	speed(integer) : "Speed" : 50
	health(integer) : "Health (shootable if > 0)"
	sounds(choices) : "Sounds" : 21 =
	[
		0: "None"
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
	]
	noise(sound) : "Sound Override"
	wait(choices) : "Delay before reset" : 3 =
	[
		-1: "Stays pressed"
	]
	delay(string) : "Delay before trigger" : "0"
	distance(integer) : "Distance (deg)" : 90
	spawnflags(flags) =
	[
		1 : "Not solid" : 0
		2 : "Reverse Dir" : 0
		16: "Direct use only (spirit compat)": 0
		32: "Toggle" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
		256:"Touch Activates": 0
		512:"Player Can't Use": 0
		1024:"Check master on return": 0
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, Angles, ZHLT) = func_rotating : "Rotating Object"
[
	speed(integer)	: "Rotation Speed" : 0
	volume(integer) : "Volume (10 = loudest)" : 10
	fanfriction(integer) : "Friction (0 - 100%)" : 20
	sounds(choices) : "Fan Sounds" : 0 =
	[
		0 : "No Sound"
		1 : "Fast Whine"
		2 : "Slow Rush"
		3 : "Medium Rickety"
		4 : "Fast Beating"
		5 : "Slow Smooth"
	]
	message(sound) : "WAV Name"
	spawnflags(flags) =
	[
		1 : "Start ON" 		: 0
		2 : "Reverse Direction" : 0
		4 : "X Axis" 		: 0
		8 : "Y Axis" 		: 0
		16: "Acc/Dcc"		: 0
		32: "Fan Pain"		: 0
		64: "Not Solid"		: 0
		128: "Small Radius" : 0
		256: "Medium Radius" : 0
		512: "Large Radius" : 1
	]
	_minlight(integer) : "Minimum light level"
	spawnorigin(string) : "X Y Z - Move here after lighting" : "0 0 0"
	dmg(integer) : "Damage inflicted when blocked" : 0
]

@SolidClass base(BaseTank, ZHLT) = func_tank : "Brush Gun Turret"
[
	bullet(choices) : "Bullets" : 0 =
	[
		0: "None"
		1: "9mm"
		2: "MP5"
		3: "12mm"
	]
]

@SolidClass = func_tankcontrols : "Tank controls"
[
	target(target_destination) : "Tank entity name"
]

@SolidClass base(BaseTank, ZHLT) = func_tanklaser : "Brush Laser Turret"
[
	laserentity(target_source) : "env_laser Entity"
]

@SolidClass base(BaseTank, ZHLT) = func_tankrocket : "Brush Rocket Turret" []


@SolidClass base(BaseTank, ZHLT) = func_tankmortar : "Brush Mortar Turret"
[
	iMagnitude(Integer) : "Explosion Magnitude" : 100
]

@SolidClass base(Trackchange, ZHLT) = func_trackautochange : "Automatic track changing platform"
[
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Trackchange, ZHLT) = func_trackchange : "Train track changing platform"
[
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Global, RenderFields, ZHLT, SoundRadius) = func_tracktrain : "Track Train"
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot)" : 0
		2 : "No User Control" : 0
		8 : "Passable" : 0
	]
	target(target_destination) : "First stop target"
	sounds(choices) : "Sound" : 0 =
	[
		0: "None"
		1: "Rail 1"
		2: "Rail 2"
		3: "Rail 3"
		4: "Rail 4"
		5: "Rail 6"
		6: "Rail 7"
	]
	noise(sound) : "Move Sound Override"
	noise1(sound) : "Brake Sound Override"
	noise2(sound) : "Start Sound Override"
	wheels(integer) : "Distance between the wheels" : 50
	height(integer) : "Height above track" : 4
	startspeed(integer) : "Initial speed" : 0
	speed(integer) : "Speed (units per second)" : 64
	dmg(integer) : "Damage on crush" : 0
	volume(integer) : "Volume (10 = loudest)" : 10
	bank(string) : "Bank angle on turns" : "0"
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_traincontrols : "Train Controls"
[
	target(target_destination) : "Train Name"
]

@SolidClass base(Targetname, Global, RenderFields, ZHLT, BaseTrain, SoundRadius) = func_train : "Moving platform"
[
	movesnd(choices) : "Move Sound" : 0 =
	[
		0: "No Sound"
		1: "big elev 1"
		2: "big elev 2"
		3: "tech elev 1"
		4: "tech elev 2"
		5: "tech elev 3"
		6: "freight elev 1"
		7: "freight elev 2"
		8: "heavy elev"
		9: "rack elev"
		10: "rail elev"
		11: "squeek elev"
		12: "odd elev 1"
		13: "odd elev 2"
	]
	stopsnd(choices) : "Stop Sound" : 0 =
	[
		0: "No Sound"
		1: "big elev stop1"
		2: "big elev stop2"
		3: "freight elev stop"
		4: "heavy elev stop"
		5: "rack stop"
		6: "rail stop"
		7: "squeek stop"
		8: "quick stop"
	]
	avelocity(string) : "Angular Veocity (y z x)"
	dmg(integer) : "Damage on crush" : 0
	skin(integer) : "Contents"
	custommovesnd(sound) : "Custom move sound"
	customstopsnd(sound) : "Custom stop sound"
	spawnflags(flags) =
	[
		2 : "Origin on paths" : 0
		8 : "Not solid" : 0
		64 : "No default damage" : 0
	]
	_minlight(string) : "Minimum light level"
]

@SolidClass base(Targetname, Angles, RenderFields, ZHLT) = func_vehicle : "Drivable Vehicles" 
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot)" : 0
		2 : "No User Control" : 0
		8 : "Passable" : 0
	]
	target(target_destination) : "First stop target"
	sounds(choices) : "Sound" : "" =
	[
		"": "None"
		1: "Vehicle 1"
		2: "Vehicle 2"
		3: "Vehicle 3"
		4: "Vehicle 4"
		5: "Vehicle 6"
		6: "Vehicle 7"
	]
	length(integer) : "Length of the vehicle" : 256
	width(integer) : "Width of the vehicle" : 128
	height(integer) : "Height above track" : 4
//*
//*note: max speed is 2000 or things go wrong
//*
	startspeed(integer) : "Initial speed" : 0
	speed(integer) : "Speed (units per second)" : 64
	dmg(integer) : "Damage on crush" : 0	
	volume(integer) : "Volume (10 = loudest)" : 10
	bank(string) : "Bank angle on turns" : "0"
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_vehiclecontrols : "Vehicle Controls"
[
	target(target_destination) : "Vehicle Name"
	zhlt_invisible(choices) :"Invisible" : 1 =
	[
		1: "yes"
	]
]

@SolidClass base(Targetname, Appearflags, RenderFields, Global, ZHLT) = func_wall : "Wall"
[
	_minlight(string) : "Minimum light level"
	spawnflags(flags) =
	[
		2 : "Use Angles" : 0
	]
]

@SolidClass base(func_wall) = func_wall_toggle : "Toggleable geometry"
[
	spawnflags(flags) =
	[
		1 : "Starts Invisible" : 0
	]
]

@SolidClass base(Door, ZHLT) = func_water : "Liquid"
[
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		256:"Use Only" : 0
	]
	skin(choices) : "Contents" : -3 =
	[
		-3: "Water"
		-4: "Slime"
		-5: "Lava"
	]
	WaveHeight(string) : "Wave Height" : "3.2"
]

//
// game entities (requires Half-Life 1.0.0.9)
//

@PointClass base(Targetname) = game_autosave : "Point entity alternative to trigger_autosave"
[
	health(string) : "Minimum Hit Points" : : "Don't save when player has less than this many hitpoints."
]

@PointClass base(Targetname, Target) = game_counter : "Fires when it hits limit"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
		2: "Reset On fire" : 1
		4: "Fire if over limit" : 0
	]
	master(string) : "Master"
	frags(integer) : "Initial Value" : 0
	health(integer) : "Limit Value" : 10
]

@PointClass base(Targetname, Target) = game_counter_set : "Sets a game_counter"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	master(string) : "Master"
	frags(integer) : "New Value" : 10
]

@PointClass base(Targetname) = game_end : "End this multiplayer game"
[
	master(string) : "Master"
]

@PointClass base(Targetname) = game_player_equip : "Initial player equipment"
[
	spawnflags(flags) =
	[
		1: "Use Only" : 0
	]
	master(string) : "Team Master"
]

@PointClass base(Targetname) = game_player_hurt : "Hurts player who fires"
[
	dmg(string) : "Damage To Apply" : "999"
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	master(string) : "Master"
]

@PointClass base(Targetname) = game_player_team : "Allows player to change teams"
[
	spawnflags(flags) =
	[
		1 : "Remove On fire" : 0
		2 : "Kill Player" : 0
		4 : "Gib Player" : 0
	]
	target(string) : "game_team_master to use"
	master(string) : "Master"
]

@PointClass base(Targetname) = game_score : "Award/Deduct Points"
[
	spawnflags(flags) =
	[
		1: "Allow Negative" : 0
		2: "Team Points" : 0
	]

	points(integer) : "Points to add (+/-)" : 1
	master(string) : "Master"
]

@PointClass base(Targetname) = game_player_settings : "Initial player setting in singleplayer"
[
	target(target_destination) : "Fire on equip" : : "Fire after (and if) player got equipped."
	spawnflags(flags) =
	[
		1: "[Deprecated] Give Medkit" : 0
		2: "[Deprecated] Give Suit" : 0
		4: "[Deprecated] Give Crowbar" : 0
		8: "[Deprecated] Give Glock": 0
		16: "[Deprecated] Give Python": 0
		32: "[Deprecated] Give MP5": 0
		64: "[Deprecated] Give Shotgun": 0
		128: "[Deprecated] Give Crossbow": 0
		256: "[Deprecated] Give RPG": 0
		512: "[Deprecated] Give Gauss": 0
		1024: "[Deprecated] Give Egon": 0
		2048: "[Deprecated] Give Hornetgun": 0
		4096: "[Deprecated] Give Pipe Wrench": 0
		8192: "[Deprecated] Give Knife": 0
		16384: "[Deprecated] Give Grapple": 0
		32768: "[Deprecated] Give Desert Eagle": 0
		65536: "[Deprecated] Give Sniper rifle": 0
		131072: "[Deprecated] Give M249": 0
		262144: "[Deprecated] Give Displacer": 0
		524288: "[Deprecated] Give Shock rifle": 0
		1048576: "[Deprecated] Give Spore launcher": 0
		8388608: "[Deprecated] Give Long Jump": 0
	]
	_9mm(integer) : "9mm bullets"
	_357(integer) : "357 bullets"
	buckshot(integer) : "Shotgun shells"
	bolts(integer) : "Crossbow bolts"
	ARgrenades(integer) : "AR grenades"
	rockets(integer) : "Rockets"
	uranium(integer) : "Uranium"
	Hand_Grenade(integer) : "Hand grenades"
	Satchel_Charge(integer) : "Satchels"
	Trip_Mine(integer) : "Trip mines"
	Snarks(integer) : "Snarks"
	_556(integer) : "556 bullets"
	_762(integer) : "762 bullets"
	Spores(integer) : "Spores"
	Penguins(integer) : "Penguins"
	suit(choices): "Suit" =
	[
		-1: "Remove suit"
		0: "No change"
		1: "Give suit"
	]
	suitlogon(choices) : "Suit logon" : 2 =
	[
		0: "Long logon"
		1: "Short logon"
		2: "No logon"
	]
	suitlight(choices) : "Suit light" =
	[
		-1: "No light"
		0: "Default"
		1: "Flashlight"
		2: "NVG"
	]
	longjump(choices): "Longjump" =
	[
		-1: "Remove longjump"
		0: "No change"
		1: "Give longjump"
	]
	health(integer) : "Set health" : : "Prefix the value with '=' to set the health amount. The '+' prefix means to add health. The '-' prefix means to substruct health. The '<' prefix means to set health to the specified value or do nothing if it's already lower. The '>' prefix means to set the health to the specified value or do nothing if it's already higher. If no prefix is given, set the specified amount if it's a positive value."
	allow_overheal(choices) : "Allow OverHeal" : : "Allow overheal if new health is higher than the current max health. Don't clamp health value to the max health if the new max health is lower than the current health." =
	[
		0: "No"
		1: "Yes"
	]
	max_health(integer): "Set max health"
	armorvalue(integer) : "Set armor" : : "Prefix the value with '=' to set the armor amount (this allows to reset the armor to 0). The '+' prefix means to add armor. The '-' prefix means to substruct armor. The '<' prefix means to set the armor to the specified value or do nothing if it's already lower. The '>' prefix means to set the armor to the specified value or do nothing if it's already higher. If no prefix is given, set the specified amount if it's a positive value."
	allow_overcharge(choices) : "Allow armor OverCharge" : : "Allow armor overcharge if new armor is higher than the current max armor. Don't clamp armor value to the max armor if the new max armor is lower than the current armor." =
	[
		0: "No"
		1: "Yes"
	]
	max_armor(integer): "Set max armor"
	armor_strength(string): "Customize armor strength" : : "Armor strength multiplier relative to health strength"
	weapon_crowbar(choices) : "Crowbar" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
	]
	weapon_9mmhandgun(choices) : "Glock" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_357(choices) : "Python" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_9mmAR(choices) : "MP5" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_shotgun(choices) : "Shotgun" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_crossbow(choices) : "Crossbow" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_rpg(choices) : "RPG" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_hornetgun(choices) : "Hornetgun" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_pipewrench(choices) : "Pipewrench" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
	]
	weapon_knife(choices) : "Knife" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
	]
	weapon_grapple(choices) : "Grapple" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
	]
	weapon_medkit(choices) : "Portable Medkit" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_eagle(choices) : "Desert Eagle" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_m249(choices) : "M249" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_sniperrifle(choices) : "Sniperrifle" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_shockrifle(choices) : "Shock Roach" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
	weapon_sporelauncher(choices) : "Spore Launcher" =
	[
		-1: "Remove"
		0: "No change"
		1: "Give"
		2: "Give (allow duplicate)"
	]
]

@PointClass base(Targetname, Targetx) = game_team_master : "Team based master/relay"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	triggerstate(choices) : "Trigger State" : 0 =
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]
	teamindex(integer) : "Team Index (-1 = no team)" : -1
	master(string) : "Master"
]

@PointClass base(Targetname, Targetx) = game_team_set : "Sets team of team_master"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	master(string) : "Master"
]

@PointClass base(Targetname, Target) = game_text : "HUD Text Message"
[
	spawnflags(flags) =
	[
		1: "All Players" : 0
	]

	message(string) : "Message Text"
	x(string) : "X (0 - 1.0 = left to right) (-1 centers)" : "-1"
	y(string) : "Y (0 - 1.0 = top to bottom) (-1 centers)" : "-1"
	effect(Choices) : "Text Effect" : 0 =
	[
		0 : "Fade In/Out"
		1 : "Credits"
		2 : "Scan Out"
	]
	color(color255) : "Color1" : "100 100 100"
	color2(color255) : "Color2" : "240 110 0"
	fadein(string) : "Fade in Time (or character scan time)" : "1.5"
	fadeout(string) : "Fade Out Time" : "0.5"
	holdtime(string) : "Hold Time" : "1.2"
	fxtime(string) : "Scan time (scan effect only)" : "0.25"
	channel(choices) : "Text Channel" : 1 =
	[
		1 : "Channel 1"
		2 : "Channel 2"
		3 : "Channel 3"
		4 : "Channel 4"
	]
	master(string) : "Master"
]

@PointClass base(Targetname) = game_number : "Holds a floating point variable. Use it with calc_eval_number and trigger_compare"
[
	frags(string) : "Initial Value" : 0
]

@SolidClass base(Targetname) = game_zone_player : "Player Zone brush"
[
	intarget(target_destination) : "Target for IN players"
	outtarget(target_destination) : "Target for OUT players"
	incount(target_destination) : "Counter for IN players"
	outcount(target_destination) : "Counter for OUT players"
	// master(string) : "Master"
]

@PointClass base(gibshooterbase) color(180 2 0) = gibshooter : "Gib Shooter" []

//
// info entities
//

@PointClass decal() base(Targetname, Appearflags) = infodecal : "Decal"
[
	texture(decal)
]

@BaseClass color(140 115 65) base(Targetname) = RandomItem
[
	info_null(string) : "No item chance"
	item_healthkit(string) : "Healthkit chance"
	item_battery(string) : "Battery chance"
	ammo_9mmclip(string) : "9mm clip chance"
	ammo_9mmAR(string) : "9mmAR clip chance"
	ammo_9mmbox(string) : "9mm Box chance"
	ammo_ARgrenades(string) : "AR grenades chance"
	ammo_buckshot(string) : "Shotgun shells chance"
	ammo_crossbow(string) : "Crossbow bolts chance"
	ammo_357(string) : "357 bullets chance"
	ammo_556(string) : "556 bullets chance"
	ammo_762(string) : "762 bullets chance"
	ammo_rpgclip(string) : "RPG rocket chance"
	ammo_gaussclip(string) : "Gauss clip chance"
	weapon_handgrenade(string) : "Hand Grenades chance"
	weapon_tripmine(string) : "Tripmine chance"
	weapon_satchel(string) : "Satchel chance"
	weapon_snark(string) : "Snarks chance"
	weapon_crowbar(string) : "Crowbar chance"
	weapon_9mmhandgun(string) : "Glock chance"
	weapon_357(string) : "Python chance"
	weapon_9mmAR(string) : "MP5 chance"
	weapon_shotgun(string) : "Shotgun chance"
	weapon_crossbow(string) : "Crossbow chance"
	weapon_rpg(string) : "RPG chance"
	weapon_hornetgun(string) : "Hornetgun chance"
	weapon_pipewrench(string) : "Pipewrench chance"
	weapon_knife(string) : "Knife chance"
	weapon_grapple(string) : "Grapple chance"
	weapon_medkit(string) : "Portable Medkit chance"
	weapon_eagle(string) : "Desert Eagle chance"
	weapon_penguin(string) : "Penguins chance"
	weapon_m249(string) : "M249 chance"
	weapon_sniperrifle(string) : "Sniperrifle chance"
	weapon_shockrifle(string) : "Shock Roach chance"
	weapon_sporelauncher(string) : "Spore Launcher chance"
	spawnflags(Flags) =
	[
		64 : "Predetermined" : 0
	]
]

@PointClass base(Targetname) size(-24 -24 0, 24 24 16) color(20 190 60) = info_bigmomma : "Big Mamma Node"
[
	spawnflags(Flags) =
	[
		1 : "Run To Node" : 0
		2 : "Wait Indefinitely" : 0
	]
	target(target_destination) : "Next node"
	radius(string) : "Radius" : "0"
	reachdelay(string) : "Wait after approach" : "0"
	killtarget(target_destination) : "KillTarget"
	reachtarget(target_destination) : "Fire on approach"
	reachsequence(string) : "Sequence on approach" : ""
	health(string) : "Health on approach" : ""
	presequence(string) : "Sequence before approach" : ""
]

// Displacer target placement represents the point where the player's feet shall be
@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) offset(0 0 36) = info_displacer_xen_target : "Displacer XEN Target"
[
	spawnflags(Flags) =
	[
		1 : "Start Disabled" : 0
	]
]
@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) offset(0 0 36) = info_displacer_earth_target : "Displacer EARTH Target"
[
	spawnflags(Flags) =
	[
		1 : "Start Disabled" : 0
	]
]

@PointClass base(Target, Angles) size(-4 -4 -4, 4 4 4) color(0 255 0) = info_intermission : "Intermission Spot" []

@PointClass base(RandomItem) = info_item_random : "Template for item_random_proxy. Supports up to 16 different entities." []

@PointClass base(Targetname) = info_landmark : "Transition Landmark" []

@PointClass size(-24 -24 -4, 24 24 4) color(255 255 0) = info_node : "ai node" []

@PointClass size(-32 -32 0, 32 32 64) color(255 255 0) = info_node_air : "ai air node" []

@PointClass base(Targetname) = info_null : "info_null (spotlight target)" []

@PointClass base(Targetname, Target) = info_pitworm_steam_lock : "Pitworm Steam Lock" []

@PointClass base(PlayerClass) sequence(2) studio("models/player.mdl") = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) sequence(2) studio("models/player.mdl") = info_player_deathmatch : "Player deathmatch start"
[
	target(target_destination) : "Target"
	master(string) : "Master"
]
@PointClass base(PlayerClass) sequence(2) studio("models/player.mdl") = info_player_start : "Player 1 start" []

@PointClass base(Targetname) size(-4 -4 -4, 4 4 4) color(200 100 50) = info_target : "Beam Target" []
@PointClass size(-16 -16 0, 16 16 72) base(Targetname, Target) color(255 128 240) = info_teleport_destination : "Teleport destination"
[
	spawnflags(Flags) =
	[
		32 : "Trigger on arrival" : 0 : "If ticked, info_teleport_destination will trigger its target whenever an entity is teleported here. The entity is passed as !activator to the info_teleport_destination's target."
	]
]

//
// items
//

@PointClass size(-16 -16 0, 16 16 36) base(Targetname, Appearflags, Angles, Global, Scalable) studio("models/w_oxygen.mdl") = item_airtank : "Oxygen tank" []
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_antidote.mdl") = item_antidote : "Poison antidote"
[
	noise(sound) : "Pickup sound" : "items/gunpickup4.wav"
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_battery.mdl") = item_battery : "HEV battery"
[
	health(integer) : "Charge Supplied"
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/barney_vest.mdl") = item_armorvest : "Armor vest"
[
	sequence(choices) : "Placement" : 0 =
	[
		0 : "Standing"
		1 : "Lying"
		2 : "Lying upside-down"
		3 : "Reclining"
	]
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/barney_helmet.mdl") = item_helmet : "Helmet"
[
	sequence(choices) : "Placement" : 0 =
	[
		0 : "Hanging"
		1 : "Lying"
		2 : "Lying upside-down"
	]
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_flashlight.mdl") = item_flashlight : "Flashlight" []
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_medkit.mdl") = item_healthkit : "Small Health Kit"
[
	health(integer) : "Health Supplied"
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_longjump.mdl") = item_longjump : "Longjump Module" []
@PointClass size(-16 -16 0, 16 16 36) base(Pickup) studio() = item_pickup : "Generic item that can be picked up by the player. Gives the inventory item upon pick up if the 'Inventory item' is set."
[
	model(studio) : "Model" : "models/w_security.mdl"
	item_name(string) : "Inventory item" : : "Inventory item to give to player"
	count(integer) : "Inventory item count" : 1 : "Count of inventory items to give (if item is defined)"
	message(string) : "Message" : : "Message from titles.txt to show on pickup"
	noise(sound) : "Pickup sound" : "items/gunpickup4.wav"
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_security.mdl") = item_security : "Security card"
[
	message(string) : "Message" : : "Message from titles.txt to show on pickup"
	noise(sound) : "Pickup sound" : "items/gunpickup4.wav"
	hudname(string) : "HUD name" : : "Sprite from hud.txt to show on pickup. By default it won't show anything"
]
@PointClass size(-8 -8 0, 8 8 8) color(0 0 200) base(Targetname) studio("models/can.mdl") = item_sodacan : "Soda can"
[
	skin(choices) : "Beverage Type" : 0 =
	[
		0 : "Coca-Cola"
		1 : "Sprite"
		2 : "Diet Coke"
		3 : "Orange"
		4 : "Surge"
		5 : "Moxie"
	]
	model(studio) : "Custom Model"
]
@PointClass size(-16 -16 0, 16 16 36) base(Item) studio("models/w_suit.mdl") = item_suit : "HEV Suit"
[
	spawnflags(Flags) =
	[
		1 : "Short Logon" : 0
		2 : "No logon" : 0
	]
]

@PointClass size(-16 -16 0, 16 16 36) base(RandomItem, Target, Angles) = item_random : "Random item" []
@PointClass size(-16 -16 0, 16 16 36) color(140 115 65) base(Targetname, Target, Angles) = item_random_proxy : "Random item proxy. Must be used with info_item_random."
[
	template(string) : "info_item_random entity"
]

@PointClass base(Targetname, Appearflags, Angles, Global, RenderFields, Scalable) studio() = item_generic : "Generic scenery item"
[
	model(studio) : "Model" : "models/w_security.mdl"
	sequencename(string) : "Sequence Name"
	skin(integer) : "Skin"
	body(integer) : "Body"
	spawnflags(Flags) =
	[
		1 : "Drop to floor" : 0
		2 : "No map transition" : 0 : "Don't go across map transitions"
		4 : "Apply gravity" : 0 : "Make item fall when the floor under it gets broken"
	]
]

@BaseClass base(Targetname, Angles) = ItemRecharger
[
	TriggerOnEmpty(target_destination) : "Trigger On Empty"
	TriggerOnFirstUse(target_destination) : "Trigger On First Use"
	CustomJuice(integer) : "Custom Juice Amount"
]

@PointClass size(-12 -16 0, 12 16 36) base(ItemRecharger, Global) studio("models/health_charger_body.mdl") = item_healthcharger : "Wall Health Kit" []
@PointClass size(-12 -16 0, 12 16 36) base(ItemRecharger, Global) studio("models/hev.mdl") = item_recharge : "Wall Recharger" []

@PointClass base(Targetname, Global, Angles) size(-16 -16 0, 16 16 48 ) studio("models/eye_scanner.mdl") = item_eyescanner : "Retinal Scanner"
[
	unlocked_target(target_destination) : "Unlocked target"
	locked_target(target_destination) : "Locked target"
	delay(string) : "Delay before trigger" : : "Delay before triggering unlocked or locked target"
	unlockersname(string) : "Unlockers name"
	noise(sound) : "Custom Granted Sound"
	noise1(sound) : "Custom Denied Sound"
	noise2(sound) : "Custom Beeping Sound"
	granted_sentence(string) : "Granted sentence"
	denied_sentence(string) : "Denied sentence"
	sentence_delay(string) : "Sentence delay" : : "Delay between sound and sentence"
	//reset_delay(integer) : "Reset delay"
]

@PointClass base(Weapon, Targetx) size(-16 -16 0, 16 16 36) studio("models/nuke_case.mdl") = item_nuclearbomb : "Nuclear Bomb"
[
	initialstate(integer) : "Initial State" : 0
	wait(integer) : "Wait" : 1
]

//
// lights
//

@PointClass iconsprite("sprites/light.spr") base(Target, Targetname, Light, ZHLT_point) flags(Light) = light : "Invisible lightsource." : "http://twhl.info/wiki.php?id=148"
[
	spawnflags(Flags) = [ 1 : "Initially dark" : 0 : "If this is enabled, the entity will need to be triggered to work." ]
]

@PointClass iconsprite("sprites/light.spr") base(Targetname, Target, Angles, ZHLT_point) flags(Light) = light_spot : "The light_spot entity allows you to create direct beams of light (like from a, err, spotlight)." : "http://twhl.info/wiki.php?id=147"
[
	_cone(integer) : "Inner (bright) angle" : 30 : "The angle of the cone formed around the directional axis. The area inside this cone will contain the brightest light."
	_cone2(integer) : "Outer (fading) angle" : 45 : "As above, although the area inside this cone will fade increasingly towards the outer edges."
	pitch(integer) : "Pitch" : -90 : "The pitch of the light (-90 is straight down, 90 is straight up)."
	_light(color255) : "Brightness" : "255 255 128 200" : "First three integer numbers are the color (RGB). The fourth number is the brightness."
	_sky(Choices) : "Is Sky" : 0 : "If Yes, the spot_light will affect the sky brushes, rather than project any light itself." =
	[
		0 : "No"
		1 : "Yes"
	]
	spawnflags(Flags) = [ 1 : "Initially dark" : 0 : "If this is enabled, the entity will need to be triggered to work." ]
	style(Choices) : "Appearance" : 0 : "Light appearance. Values:" =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	pattern(string) : "Custom Appearance" : : "Use a string of letters to provide a custom light style. The property allows you to enter a string of letters from a to z, representing brightness. If you entered 'abcdefghihgfedcba' then the light would go from bright to dim and back again and then repeat. Complicating things, to use this feature, you must name the light. However, if you then use a trigger to activate it, then it will behave as a normal light."
]

@PointClass base(Targetname, Angles, ZHLT_point) iconsprite("sprites/light_environment.spr") flags(Light) = light_environment : "This entity makes a map's sky emit light. The only practical way of lighting outdoor maps." : "http://twhl.info/wiki.php?id=146"
[
	pitch(integer) : "Pitch" : 0 : "A negative number will give downward pitch (which is normally what you want)."
	_light(color255) : "Brightness" : "255 255 128 200" : "First three integer numbers are the color (RGB). The fourth number is the brightness."
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = locus_beam : "Locus System - Beam effect"
[
	m_iszStart(target_destination) : "Start at (blank = here)" : ""
	m_iszEnd(target_destination) : "End at (blank = here)" : "*locus"
	impulse(choices) : "Start & End are" : 0 =
	[
		0: "Entity & Entity [LE LE]"
		1: "Position & Entity [LP LE]"
		2: "Position & Position [LP LP]"
		3: "Position & Direction [LP LV]"
	]
	m_iszSprite(sprite) : "Sprite Name" : "sprites/laserbeam.spr"
	renderamt(integer) : "Brightness (1 - 255)" : 255
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	m_iWidth(integer) : "Width" : 10
	m_iDistortion(integer) : "Distortion ('noise')" : 0
	m_fFrame(integer) : "Start frame" : 0
	m_iScrollRate(integer) : "Scroll rate" : 0
	m_fDuration(string) : "Duration (0 = unlimited)" : 0
	m_fDamage(string) : "Damage amount" : 0
	m_iDamageType(choices) : "Damage type" : 0 =
	[
		0	 : "Energy Beam"
		1	 : "Fracture"
		2	 : "Blood Loss"
		4	 : "Lacerations"
		8	 : "Burning"
		16	 : "Freezing"
		512	 : "Internal bleeding"
		16384	 : "Drowning"
		65536  : "Biohazard"
		131072 : "Poison (duration)"
		262144 : "Radiation"
		1048576: "Hazardous chemical"
	]
	m_iszTargetName(target_source) : "Name of children"
	target(target_destination) : "Fire on spawn (locus = child)"
	m_iStartAttachment(integer) : "Start attachment [1-4]" : : "Used when start is entity"
	m_iEndAttachment(integer) : "End attachment [1-4]" : : "Used when end is entity"
	spawnflags(flags) =
	[
		8 : "Ring"			: 0
		16: "StartSparks"		: 0
		32: "EndSparks"		: 0
		64: "Decal End"		: 0
		128: "Fade Start"		: 0
		256: "Fade End"		: 0
		512: "Draw Solid"		: 0
		1024: "Draw Sine"		: 0
	]
]
@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = locus_variable : "Locus System - Variable for storing data"
[
	m_iszPosition(string) : "Position to record  [LP]" : "*locus"
	m_iszVelocity(string) : "Velocity to record [LV]" : "*locus"
	m_iszRatio(string) : "Ratio to record [LR]" : "*locus"
	m_iszTargetname(string) : "Child's name (blank = no child)"
	m_iszFireOnSpawn(string) : "Fire on spawn (locus = child)"
	m_fDuration(string) : "Removed after time (secs)"
]

@SolidClass base(Door, ZHLT) = momentary_door : "Momentary/Continuous door"
[
	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
	]
]

@SolidClass base(Targetname, Target, Angles, RenderFields, ZHLT) = momentary_rot_button : "Direct wheel control"
[
	speed(integer) : "Speed" : 50
	master(string) : "Master"
	sounds(choices) : "Sounds" : 0 =
	[
		0: "None"
		1: "Big zap & Warmup"
		2: "Access Denied"
		3: "Access Granted"
		4: "Quick Combolock"
		5: "Power Deadbolt 1"
		6: "Power Deadbolt 2"
		7: "Plunger"
		8: "Small zap"
		9: "Keycard Sound"
		21: "Squeaky"
		22: "Squeaky Pneumatic"
		23: "Ratchet Groan"
		24: "Clean Ratchet"
		25: "Gas Clunk"
	]
	distance(integer) : "Distance (deg)" : 90
	returnspeed(integer) : "Auto-return speed" : 0
	spawnflags(flags) =
	[
		1: "Door Hack" : 0
		2: "Not useable" : 0
		16: "Auto Return" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
	_minlight(integer) : "_minlight"
]

//
// monsters
//

@PointClass base(Monster, Sequence) size(-40 -40 0, 40 40 64) studio("models/baby_voltigore.mdl") = monster_alien_babyvoltigore : "Baby Voltigore" 
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "walk"
		3 : "run"
		4 : "turnl"
		5 : "turnr"
		6 : "mattack2"
		7 : "mattack3"
		8 : "victoryeat"
		9 : "victorysniff"
		10 : "distanceattack"
		11 : "flinch"
		12 : "flinch"
		13 : "dieforward"
		14 : "diesimple"
		15 : "diesideways"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]



@PointClass base(Monster, Sequence) size(-80 -80 0, 80 80 90) studio("models/voltigore.mdl") = monster_alien_voltigore : "Voltigore" 
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "walk"
		3 : "run"
		4 : "turnl"
		5 : "turnr"
		6 : "mattack2"
		7 : "mattack3"
		8 : "victoryeat"
		9 : "victorysniff"
		10 : "distanceattack"
		11 : "flinch"
		12 : "flinch"
		13 : "dieforward"
		14 : "diesimple"
		15 : "diesideways"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/controller.mdl") = monster_alien_controller : "Controller"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "attack1"
		1 : "attack2"
		2 : "throw"
		3 : "idle2"
		4 : "block"
		5 : "shoot"
		6 : "flinch1"
		7 : "flinch2"
		8 : "fall"
		9 : "forward"
		10 : "backward"
		11 : "up"
		12 : "down"
		13 : "right"
		14 : "left"
		15 : "float"
		16 : "walk"
		17 : "run"
		18 : "die1"
	]
]
@PointClass base(DeadMonster) studio("models/controller.mdl") = monster_alien_controller_dead : "Dead Controller"
[
	sequence(Choices) : "Animation Sequence (editor)" : 18 =
	[
		18 : "die1"
	]
]
@PointClass base(Monster, FollowingMonster, Sequence) size(-32 -32 0, 32 32 64) studio("models/agrunt.mdl") = monster_alien_grunt : "Alien Grunt"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "threat"
		2 : "walk"
		3 : "run"
		4 : "turnl"
		5 : "turnr"
		6 : "smallflinch"
		7 : "bigflinch"
		8 : "mattack2"
		9 : "mattack3"
		10 : "victorysquat"
		11 : "victoryeat"
		12 : "victorysquat"
		13 : "larmflinch"
		14 : "llegflinch"
		15 : "rarmflinch"
		16 : "rlegflinch"
		17 : "attack3"
		18 : "attack3"
		19 : "hornetattack"
		20 : "quickshoot"
		21 : "longshoot"
		22 : "diehead"
		23 : "diegut"
		24 : "dieforward"
		25 : "diesimple"
		26 : "diebackward"
		27 : "float"
		28 : "scare"
		29 : "bigopen"
		30 : "smashrail"
		31 : "landhard"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/agrunt.mdl") = monster_alien_grunt_dead : "Dead Alien Grunt"
[
	sequence(Choices) : "Animation Sequence (editor)" : 25 =
	[
		25 : "diesimple"
		26 : "diebackward"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On Stomach"
		1 : "On Back"
	]
]
@PointClass base(Monster, FollowingMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/islave.mdl") = monster_alien_slave : "Vortigaunt"
[
	sequence(Choices) : "Animation Sequence (editor)" : 2 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "crouch"
		4 : "walk1"
		5 : "walk2"
		6 : "run1"
		7 : "right"
		8 : "left"
		9 : "jump"
		10 : "stairsup"
		11 : "attack1"
		12 : "zapattack1"
		13 : "flinch2"
		14 : "laflinch"
		15 : "raflinch"
		16 : "llflinch"
		17 : "rlflinch"
		18 : "dieheadshot"
		19 : "diesimple"
		20 : "diebackward"
		21 : "dieforward"
		22 : "collar1"
		23 : "collar2"
		24 : "pushup"
		25 : "grab"
		26 : "updown"
		27 : "downup"
		28 : "jibber"
		29 : "jabber"
	]
	netname(string) : "Squad Name"
	energy(string) : "Initial energy"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		64 : "IgnorePlayer" : 0
	]
	weapons(Choices) : "Weapons" =
	[
		0 : "Default (Electricity)"
		2 : "Electricity + Snarks"
		4 : "Electricity + Headcrabs"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/islave.mdl") = monster_alien_slave_dead : "Dead Vortigaunt"
[
	sequence(Choices) : "Animation Sequence (editor)" : 32 =
	[
		18 : "dieheadshot"
		19 : "diesimple"
		20 : "diebackward"
		21 : "dieforward"
		32 : "dead_on_stomach"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On Stomach (OpFor)"
        1 : "On Stomach (hands forward)"
        2 : "On Side"
        3 : "On Back"
        4 : "On Stomach (hands backward)"
	]
]
@PointClass base(Apache) size(-360 -360 -172, 360 360 8) studio("models/apache.mdl") = monster_apache : "Apache" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/baby_headcrab.mdl") = monster_babycrab : "Baby Headcrab"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "walk"
		4 : "run"
		5 : "angry"
		6 : "flinch"
		7 : "dieback"
		8 : "180_left"
		9 : "180_right"
		10 : "jump"
		11 : "jump_variation1"
		12 : "jump_variation2"
	]
]
@PointClass base(Monster, FollowingMonster, Sequence) size(-32 -32 0, 32 32 64) studio("models/babygarg.mdl") = monster_babygarg : "Baby Gargantua" []
@PointClass base(RenderFields, Sequence) size(-16 -16 -36, 16 16 0) studio("models/barnacle.mdl") = monster_barnacle : "Barnacle Monster"
[
	model(studio) : "Custom Model"
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "flinch_sm"
		4 : "attack1"
		5 : "chewcycle"
		6 : "death"
	]
]
@PointClass base(Monster,TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/barney.mdl") = monster_barney : "Barney"
[
	frags(choices) : "Weapon" =
	[
		0 : "Glock (normal)"
		1 : "Python 357"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "idle4"
		4 : "walk"
		5 : "run"
		6 : "shootgun"
		7 : "shootgun2"
		8 : "draw"
		9 : "disarm"
		10 : "reload"
		11 : "turnleft"
		12 : "turnright"
		13 : "laflinch"
		14 : "raflinch"
		15 : "llflinch"
		16 : "rlflinch"
		17 : "smlflinch"
		18 : "cower_stand"
		19 : "locked_door"
		20 : "fall_loop"
		21 : "barn_wave"
		22 : "beat_grunt"
		23 : "beat_gruntidle"
		24 : "flashlight"
		25 : "diesimple"
		26 : "dieviolent"
		27 : "diegutshot"
		28 : "dieforward"
		29 : "diebackward"
		30 : "diecrump"
		31 : "barnaclehit"
		32 : "barnaclepull"
		33 : "barnaclecrunch"
		34 : "barnaclechew"
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
		38 : "stuffed_in_vent"
		39 : "standing_idle"
		40 : "cprbarney"
		41 : "cprbarneyrevive"
		42 : "barney_dragvent"
		43 : "dying_barney"
		44 : "dying_barneyidle"
		45 : "dying_friend"
		46 : "dying_friendidle"
		47 : "c1a3_bidle"
		48 : "c1a3_ventb"
		49 : "c1a3_emergeidle"
		50 : "c1a3_emerge"
		51 : "haulbarney"
		52 : "intropush"
		53 : "fence"
		54 : "sit1"
		55 : "almostidle"
		56 : "almost"
		57 : "laseridle"
		58 : "laser_top"
		59 : "laser_bottom"
		60 : "barneyfallidle"
		61 : "barneyfall"
		62 : "c3a2_draw"
		63 : "unlatch"
		64 : "retina"
		65 : "relaxstand"
		66 : "assassinated"
		67 : "trackswitch"
		68 : "pepsiswing"
		69 : "pepsipush"
		70 : "buttonpush"
	]
	bodystate(Choices) : "Gun State" =
	[
		-1 : "Random"
		0 : "Gun Holstered"
		1 : "Gun Drawn"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/barney.mdl") = monster_barney_dead : "Dead Barney"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On side"
		2 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 35 =
	[
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
	]
]
@PointClass base(Monster,TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/barniel.mdl") = monster_barniel : "Barniel"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "idle4"
		4 : "walk"
		5 : "run"
		6 : "shootgun"
		7 : "shootgun2"
		8 : "draw"
		9 : "disarm"
		10 : "reload"
		11 : "turnleft"
		12 : "turnright"
		13 : "laflinch"
		14 : "raflinch"
		15 : "llflinch"
		16 : "rlflinch"
		17 : "smlflinch"
		18 : "cower_stand"
		19 : "locked_door"
		20 : "fall_loop"
		21 : "barn_wave"
		22 : "beat_grunt"
		23 : "beat_gruntidle"
		24 : "flashlight"
		25 : "diesimple"
		26 : "dieviolent"
		27 : "diegutshot"
		28 : "dieforward"
		29 : "diebackward"
		30 : "diecrump"
		31 : "barnaclehit"
		32 : "barnaclepull"
		33 : "barnaclecrunch"
		34 : "barnaclechew"
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
		38 : "stuffed_in_vent"
		39 : "standing_idle"
		40 : "cprbarney"
		41 : "cprbarneyrevive"
		42 : "barney_dragvent"
		43 : "dying_barney"
		44 : "dying_barneyidle"
		45 : "dying_friend"
		46 : "dying_friendidle"
		47 : "c1a3_bidle"
		48 : "c1a3_ventb"
		49 : "c1a3_emergeidle"
		50 : "c1a3_emerge"
		51 : "haulbarney"
		52 : "intropush"
		53 : "fence"
		54 : "sit1"
		55 : "almostidle"
		56 : "almost"
		57 : "laseridle"
		58 : "laser_top"
		59 : "laser_bottom"
		60 : "barneyfallidle"
		61 : "barneyfall"
		62 : "c3a2_draw"
		63 : "unlatch"
		64 : "retina"
		65 : "relaxstand"
		66 : "assassinated"
		67 : "trackswitch"
		68 : "pepsiswing"
		69 : "pepsipush"
		70 : "buttonpush"
		71 : "sleep"
		72 : "lookfly1"
		73 : "lookfly2"
		74 : "lookfly3"
		75 : "draw_as"
		76 : "reverse_draw_as"
		77 : "as_handrail"
	]
	bodystate(Choices) : "Gun State" =
	[
		-1 : "Random"
		0 : "Gun Holstered"
		1 : "Gun Drawn"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/barniel.mdl") = monster_barniel_dead : "Dead Barniel"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On side"
		2 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 35 =
	[
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
	]
]
@PointClass base(Monster,TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/kate.mdl") = monster_kate : "Kate"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "idle4"
		4 : "walk"
		5 : "run"
		6 : "shootgun"
		7 : "shootgun2"
		8 : "draw"
		9 : "disarm"
		10 : "reload"
		11 : "turnleft"
		12 : "turnright"
		13 : "laflinch"
		14 : "raflinch"
		15 : "llflinch"
		16 : "rlflinch"
		17 : "smlflinch"
		18 : "cower_stand"
		19 : "locked_door"
		20 : "fall_loop"
		21 : "barn_wave"
		22 : "beat_grunt"
		23 : "beat_gruntidle"
		24 : "flashlight"
		25 : "diesimple"
		26 : "dieviolent"
		27 : "diegutshot"
		28 : "dieforward"
		29 : "diebackward"
		30 : "diecrump"
		31 : "barnaclehit"
		32 : "barnaclepull"
		33 : "barnaclecrunch"
		34 : "barnaclechew"
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
		38 : "stuffed_in_vent"
		39 : "standing_idle"
		40 : "cprbarney"
		41 : "cprbarneyrevive"
		42 : "barney_dragvent"
		43 : "dying_barney"
		44 : "dying_barneyidle"
		45 : "dying_friend"
		46 : "dying_friendidle"
		47 : "c1a3_bidle"
		48 : "c1a3_ventb"
		49 : "c1a3_emergeidle"
		50 : "c1a3_emerge"
		51 : "haulbarney"
		52 : "intropush"
		53 : "fence"
		54 : "sit1"
		55 : "almostidle"
		56 : "almost"
		57 : "laseridle"
		58 : "laser_top"
		59 : "laser_bottom"
		60 : "barneyfallidle"
		61 : "barneyfall"
		62 : "c3a2_draw"
		63 : "unlatch"
		64 : "retina"
		65 : "relaxstand"
		66 : "assassinated"
		67 : "trackswitch"
		68 : "pepsiswing"
		69 : "pepsipush"
		70 : "buttonpush"
		71 : "lookfly1"
		72 : "lookfly2"
		73 : "lookfly3"
		74 : "hi"
		75 : "surrender"
		76 : "converse"
		77 : "idle5"
		78 : "limpingwalk"
		79 : "limpingrun"
		80 : "draw_as"
		81 : "reverse_draw_as"
		82 : "karate_lesson"
		83 : "karate_hit"
		84 : "karate_bighit"
	]
	bodystate(Choices) : "Gun State" =
	[
		-1 : "Random"
		0 : "Gun Holstered"
		1 : "Gun Drawn"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/kate.mdl") = monster_kate_dead : "Dead Kate"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On side"
		2 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 35 =
	[
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
	]
]
@PointClass base(Monster, Sequence) size(-95 -95 0, 95 95 190) studio("models/big_mom.mdl") = monster_bigmomma : "Big Mamma"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "walk"
		3 : "run"
		4 : "death"
		5 : "claw"
		6 : "claw"
		7 : "claw"
		8 : "spawn"
		9 : "mortar"
		10 : "flinch"
		11 : "defend"
		12 : "jump"
		13 : "angry1"
		14 : "angry2"
		15 : "angry3"
		16 : "breakwall"
		17 : "fall1"
		18 : "fall2"
		19 : "falldeath"
	]
	netname(string) : "First node" : ""
	spawnflags(Flags) =
	[
		1024: "No Babycrabs" : 0
		32768: "Monsterclip Babycrabs" : 0
	]
]

@PointClass base(Repel, Sequence) size(-16 -16 0, 16 16 72) studio("models/massn.mdl") = monster_assassin_repel : "Male Assassin (Repel)"
[
	head(Choices) : "Heads" : 0 =
	[
		-1 : "Random"
		0 : "Ski Mask White"
		1 : "Ski Mask Black"
		2 : "Night Goggles"
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Sniper Rifle"
		10 : "Sniper Rifle + HG"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "launchgrenade"
		6 : "throwgrenade"
		7 : "idle1"
		8 : "idle2"
		9 : "combatidle"
		10 : "frontkick"
		11 : "frontkick"
		12 : "frontkick"
		13 : "crouching_idle"
		14 : "crouching_wait"
		15 : "crouching_mp5"
		16 : "standing_mp5"
		17 : "reload_mp5"
		18 : "crouching_shotgun"
		19 : "standing_shotgun"
		20 : "reload_shotgun"
		21 : "crouching_m40a1"
		22 : "standing_m40a1"
		23 : "reload_m40a1"
		24 : "advance_signal"
		25 : "flank_signal"
		26 : "retreat_signal"
		27 : "drop_grenade"
		28 : "limpingwalk"
		29 : "limpingrun"
		30 : "strafeleft"
		31 : "straferight"
		32 : "dieback1"
		33 : "dieforward"
		34 : "diesimple"
		35 : "diebackwards"
		36 : "dieheadshot"
		37 : "diegutshot"
		38 : "barnacled1"
		39 : "barnacled2"
		40 : "barnacled3"
		41 : "barnacled4"
		42 : "dead_on_stomach"
		43 : "deadstomach"
		44 : "deadside"
		45 : "deadsitting"
		46 : "repel_jump"
		47 : "repel_repel"
		48 : "repel_shoot"
		49 : "repel_land"
		50 : "repel_die"
		51 : "working"
		52 : "standing"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]

@PointClass base(Apache) size(-360 -360 -172, 360 360 8) studio("models/blkop_apache.mdl") = monster_blkop_apache : "Black Ops Apache" []
@PointClass base(Osprey) size(-480 -480 -112, 480 480 24) studio("models/blkop_osprey.mdl") = monster_blkop_osprey : "Black Ops Osprey" []

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/floater.mdl") = monster_bloater : "Bloater"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/floater.mdl") = monster_floater : "Floater"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		64 : "IgnorePlayer" : 0 : "Ignore player presence unless provoked by damage or sound"
	]
]
@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/bullsquid.mdl") = monster_bullchicken : "BullChicken"
[
	sequence(Choices) : "Animation Sequence (editor)" : 7 =
	[
		0 : "walk"
		1 : "run"
		2 : "suprisedhop"
		3 : "flinchs"
		4 : "flinchb"
		5 : "turnleft"
		6 : "turnright"
		7 : "idle"
		8 : "whip"
		9 : "bite"
		10 : "range"
		11 : "look"
		12 : "seecrab"
		13 : "eat"
		14 : "inspectdown"
		15 : "sniff"
		16 : "die"
		17 : "die1"
		18 : "bulljump"
		19 : "draggruntidle"
		20 : "draggrunt"
		21 : "scare"
		22 : "squidfallidle"
		23 : "squidfall"
	]
]
@PointClass base(DeadMonster) studio("models/bullsquid.mdl") = monster_bullchicken_dead : "Dead BullChicken"
[
	sequence(Choices) : "Animation Sequence (editor)" : 17 =
	[
		17 : "die1"
	]
	skin(Choices) : "Eye state" =
	[
		0 : "Open"
		1 : "Closed"
	]
]

@PointClass base(Monster, Sequence) size(-3 -3 0, 3 3 3) studio("models/roach.mdl") = monster_cockroach : "Cockroach"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "run"
		1 : "run"
	]
]
@PointClass base(Monster,TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/drill.mdl") = monster_drillsergeant : "Drill Sergeant"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "walk"
		4 : "run"
		5 : "turnleft"
		6 : "turnright"
		7 : "smlflinch"
		8 : "diesimple"
		9 : "diebackward"
		10 : "dieforward"
		11 : "dead_on_side"
		12 : "dead_on_stomach"
		13 : "hands_on_hips"
		14 : "pointL_yell"
		15 : "pointF_bark"
		16 : "bark_loop"
		17 : "mega_yell"
		18 : "mega_bark"
		19 : "blow_whistle"
		20 : "bino_look"
	]
	skin(Choices) : "Skin" : 0 =
	[
		0 : "White"
		1 : "Black"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/drill.mdl") = monster_drillsergeant_dead : "Dead Drill Sergeant"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On side"
		1 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 11 =
	[
		11 : "dead_on_side"
		12 : "dead_on_stomach"
	]
	skin(Choices) : "Skin" : 0 =
	[
		0 : "White"
		1 : "Black"
	]
]
@PointClass base(Monster) size(-24 -24 0, 24 24 24) studio("models/flybee.mdl") = monster_flybee : "Flybee" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 16) studio("models/aflock.mdl") = monster_flyer_flock : "Flock of Flyers"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "fly"
		2 : "fly2"
		3 : "bankL"
		4 : "bankR"
		5 : "hit"
		6 : "wounded"
		7 : "crash"
	]
	iFlockSize(Integer) : "Flock Size" : 8
	flFlockRadius(Integer) : "Flock Radius" : 128
	flySpeed(string) : "Custom Fly Speed" : : "Default is 125. Average speed of the flyer"
	turnRate(string) : "Custom Turn Rate" : : "Default is 75. How fast flyers turn"
	checkDist(string) : "Custom Check Distance" : : "Default is 192. How far flyers check to not collide with the walls"
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio() = monster_furniture : "Monster Furniture"
[
	model(studio) : "model"
	body(Integer) : "Body" : 0
]
@PointClass base(Monster, FollowingMonster, Sequence) size(-32 -32 0, 32 32 128) studio("models/garg.mdl") = monster_gargantua : "Gargantua"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle3"
		1 : "idle2"
		2 : "idle1"
		3 : "idle4"
		4 : "walk"
		5 : "run"
		6 : "shootflames1"
		7 : "shootflames2"
		8 : "Attack"
		9 : "stomp"
		10 : "180left"
		11 : "180right"
		12 : "Flinchlight"
		13 : "Flinchheavy"
		14 : "die"
		15 : "bitehead"
		16 : "throwbody"
		17 : "smash"
		18 : "rollcar"
		19 : "kickcar"
		20 : "pushcar"
		21 : "bust"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 -36, 16 16 36) studio() = monster_generic : "Generic Script Monster"
[
	spawnflags(Flags) =
	[
		4 : "Not solid"	: 0
		8 : "Head controller" : 0
	]
	model(studio) : "model"
	body(integer) : "Body" : 0
	skin(integer) : "Skin"
]

@PointClass base(DeadMonster, Sequence) size(-16 -16 -36, 16 16 36) studio() = monster_generic_dead : "Generic Script Monster"
[
	spawnflags(Flags) =
	[
		4 : "Not solid"	: 0
	]
	model(studio) : "model"
	body(integer) : "Body"
	skin(integer) : "Skin"
	pose(string) : "Pose (string)" : : "Name of the sequence"
	frags(choices): "Death Type" : 36 =
	[
		36 : "Just dead"
		37 : "Fell backwards"
		38 : "Fell forwards"
		39 : "Died violently"
		66 : "Head shot"
		67 : "Chest shot"
		68 : "Gut shot"
		69 : "Shot in the back"
	]
]

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/gman.mdl") = monster_gman : "G-Man"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle01"
		1 : "idlebrush"
		2 : "idlelook"
		3 : "idle02"
		4 : "open"
		5 : "stand"
		6 : "walk"
		7 : "yes"
		8 : "no"
		9 : "bigno"
		10 : "bigyes"
		11 : "listen"
		12 : "lookdown"
		13 : "lookdown2"
	]
]
@PointClass base(Repel, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_grunt_repel : "Human Grunt (Repel)"
[
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 48 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "leftlegsmflinch"
		6 : "rightlegsmflinch"
		7 : "rightarmflinch"
		8 : "leftarmflinch"
		9 : "launchgrenade"
		10 : "throwgrenade"
		11 : "idle1"
		12 : "idle2"
		13 : "combatidle"
		14 : "frontkick"
		15 : "crouching_idle"
		16 : "crouching_wait"
		17 : "crouching_mp5"
		18 : "standing_mp5"
		19 : "reload_mp5"
		20 : "crouching_shotgun"
		21 : "standing_shotgun"
		22 : "reload_shotgun"
		23 : "advance_signal"
		24 : "flank_signal"
		25 : "retreat_signal"
		26 : "drop_grenade"
		27 : "limpingwalk"
		28 : "limpingrun"
		29 : "180L"
		30 : "180R"
		31 : "strafeleft"
		32 : "straferight"
		33 : "dieback1"
		34 : "dieforward"
		35 : "diesimple"
		36 : "diebackwards"
		37 : "dieheadshot"
		38 : "diegutshot"
		39 : "barnacled1"
		40 : "barnacled2"
		41 : "barnacled3"
		42 : "barnacled4"
		43 : "dead_on_stomach"
		44 : "deadstomach"
		45 : "deadside"
		46 : "deadsitting"
		47 : "repel_jump"
		48 : "repel_repel"
		49 : "repel_shoot"
		50 : "repel_land"
		51 : "repel_die"
		52 : "dragholeidle"
		53 : "draghole"
		54 : "bustwall"
		55 : "hoprail"
		56 : "converse1"
		57 : "converse2"
		58 : "startleleft"
		59 : "startleright"
		60 : "divecover"
		61 : "defuse"
		62 : "corner1"
		63 : "corner2"
		64 : "stone_toss"
		65 : "cliffdie"
		66 : "diveaside_idle"
		67 : "diveaside"
		68 : "kneeldive_idle"
		69 : "kneeldive"
		70 : "WM_button"
		71 : "WM_moatjump"
		72 : "bustwindow"
		73 : "dragleft"
		74 : "dragright"
		75 : "trackwave"
		76 : "trackdive"
		77 : "flyback"
		78 : "impaled"
		79 : "jumptracks"
		80 : "pipetoss"
		81 : "plunger"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]
@PointClass base(Weapon, Targetx, RenderFields, Sequence) studio("models/w_grenade.mdl") = monster_handgrenade : "Live Handgrenade" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/headcrab.mdl") = monster_headcrab : "Head Crab"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "walk"
		4 : "run"
		5 : "angry"
		6 : "flinch"
		7 : "dieback"
		8 : "180_left"
		9 : "180_right"
		10 : "jump"
		11 : "jump_variation1"
		12 : "jump_variation2"
		13 : "yaw_adjustment"
		14 : "headcrabbed#1"
		15 : "headcrabbed#2"
		16 : "headidle"
		17 : "crashidle"
		18 : "crash"
		19 : "hstruggleidle"
		20 : "hstruggle"
	]
]
@PointClass base(DeadMonster) studio("models/headcrab.mdl") = monster_headcrab_dead : "Dead Head Crab"
[
	sequence(Choices) : "Animation Sequence (editor)" : 7 =
	[
		7 : "dieback"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/player.mdl") = monster_hevsuit_dead : "Dead HEV Suit"
[
	sequence(Choices) : "Animation Sequence (editor)" : 73 =
	[
		73 : "deadback"
		74 : "deadsitting"
		75 : "deadstomach"
		76 : "deadtable"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "Seated"
		2 : "On stomach"
		3 : "On Table"
	]
	body(Choices) : "Body" : 1 =
	[
		0 : "Gordon Freeman"
		1 : "Hevsuit scientist"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_hgrunt_dead : "Dead Human Grunt"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	body(Choices) : "Body" : 0 =
	[
		0 : "Grunt with Gun"
		1 : "Commander with Gun"
		2 : "Grunt no Gun"
		3 : "Commander no Gun"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 44 =
	[
		44 : "deadstomach"
		45 : "deadside"
		46 : "deadsitting"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/houndeye.mdl") = monster_houndeye : "Houndeye"
[
	sequence(Choices) : "Animation Sequence (editor)" : 1 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "run"
		4 : "run"
		5 : "run"
		6 : "die"
		7 : "die1"
		8 : "die2"
		9 : "die3"
		10 : "attack"
		11 : "flinch_small"
		12 : "flinch_small2"
		13 : "die_crumple"
		14 : "walk_limp"
		15 : "walk2"
		16 : "leaderlook"
		17 : "sleep"
		18 : "gotosleep"
		19 : "sleeptostand"
		20 : "madidle"
		21 : "madidle2"
		22 : "madidle3"
		23 : "inspect"
		24 : "eat"
		25 : "180l"
		26 : "180r"
		27 : "jumpback"
		28 : "wakefast"
		29 : "whimper"
		30 : "jumpwindow"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		32768 : "Start sleeping" : 0 : "Houndeye starts sleeping with eyes closed and doesn't wake up until hears player or combat"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/houndeye_dead.mdl") = monster_houndeye_dead : "Dead Houndeye"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "dead"
	]
	skin(Choices) : "Eye state" =
	[
		0 : "Open"
		1 : "Half open"
		2 : "Closed"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "Just plain dead"
	]
]
@PointClass base(Monster, FollowingMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hassassin.mdl") = monster_human_assassin : "Human Assassin"
[
	spawnflags(Flags) =
	[
		1024: "Don't Drop Items" : 0
	]
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle3"
		2 : "idle2"
		3 : "run"
		4 : "walk"
		5 : "shoot"
		6 : "grenadethrow"
		7 : "kick"
		8 : "kickshort"
		9 : "death_during_run"
		10 : "die_backwards"
		11 : "die_simple"
		12 : "jump"
		13 : "fly_up"
		14 : "fly_down"
		15 : "fly_attack"
		16 : "landfromjump"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/hassassin.mdl") = monster_human_assassin_dead : "Dead Human Assassin"
[
	sequence(Choices) : "Animation Sequence (editor)" : 9 =
	[
		9 : "death_during_run"
		10 : "die_backwards"
		11 : "die_simple"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On side"
		1 : "On back"
		2 : "On stomach"
	]
]
@PointClass base(Monster, FollowingMonster) size(-16 -16 0, 16 16 72) studio("models/hgrunt.mdl") = monster_human_grunt : "Human Grunt (camo)"
[
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]
	netname(string) : "Squad Name"
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 11 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "leftlegsmflinch"
		6 : "rightlegsmflinch"
		7 : "rightarmflinch"
		8 : "leftarmflinch"
		9 : "launchgrenade"
		10 : "throwgrenade"
		11 : "idle1"
		12 : "idle2"
		13 : "combatidle"
		14 : "frontkick"
		15 : "crouching_idle"
		16 : "crouching_wait"
		17 : "crouching_mp5"
		18 : "standing_mp5"
		19 : "reload_mp5"
		20 : "crouching_shotgun"
		21 : "standing_shotgun"
		22 : "reload_shotgun"
		23 : "advance_signal"
		24 : "flank_signal"
		25 : "retreat_signal"
		26 : "drop_grenade"
		27 : "limpingwalk"
		28 : "limpingrun"
		29 : "180L"
		30 : "180R"
		31 : "strafeleft"
		32 : "straferight"
		33 : "dieback1"
		34 : "dieforward"
		35 : "diesimple"
		36 : "diebackwards"
		37 : "dieheadshot"
		38 : "diegutshot"
		39 : "barnacled1"
		40 : "barnacled2"
		41 : "barnacled3"
		42 : "barnacled4"
		43 : "dead_on_stomach"
		44 : "deadstomach"
		45 : "deadside"
		46 : "deadsitting"
		47 : "repel_jump"
		48 : "repel_repel"
		49 : "repel_shoot"
		50 : "repel_land"
		51 : "repel_die"
		52 : "dragholeidle"
		53 : "draghole"
		54 : "bustwall"
		55 : "hoprail"
		56 : "converse1"
		57 : "converse2"
		58 : "startleleft"
		59 : "startleright"
		60 : "divecover"
		61 : "defuse"
		62 : "corner1"
		63 : "corner2"
		64 : "stonetoss"
		65 : "cliffdie"
		66 : "diveaside_idle"
		67 : "diveaside"
		68 : "kneeldive_idle"
		69 : "kneeldive"
		70 : "WM_button"
		71 : "WM_moatjump"
		72 : "bustwindow"
		73 : "dragleft"
		74 : "dragright"
		75 : "trackwave"
		76 : "trackdive"
		77 : "flyback"
		78 : "impaled"
		79 : "jumptracks"
		80 : "pipetoss"
		81 : "plunger"
	]
	desired_skin(Choices) : "Desired skin color" =
	[
		0 : "Default"
		1 : "Light"
		2 : "Dark"
	]
]
@PointClass base(Monster, TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt_opfor.mdl") = monster_human_grunt_ally : "Human Grunt Ally (camo)"
[
	sequence(Choices) : "Animation Sequence (editor)" : 7 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "launchgrenade"
		6 : "throwgrenade"
		7 : "idle1"
		8 : "idle2"
		9 : "combatidle"
		10 : "frontkick"
		11 : "crouching_idle"
		12 : "crouching_wait"
		13 : "crouching_mp5"
		14 : "standing_mp5"
		15 : "reload_mp5"
		16 : "crouching_shotgun"
		17 : "standing_shotgun"
		18 : "reload_shotgun"
		19 : "crouching_saw"
		20 : "standing_saw"
		21 : "reload_saw"
		22 : "advance_signal"
		23 : "flank_signal"
		24 : "retreat_signal"
		25 : "drop_grenade"
		26 : "limpingwalk"
		27 : "limpingrun"
		28 : "180L"
		29 : "180R"
		30 : "dieback1"
		31 : "dieforward"
		32 : "diesimple"
		33 : "diebackwards"
		34 : "dieheadshot"
		35 : "diegutshot"
		36 : "barnacled1"
		37 : "barnacled2"
		38 : "barnacled3"
		39 : "barnacled4"
		40 : "dead_on_stomach"
		41 : "deadstomach"
		42 : "deadside"
		43 : "deadsitting"
		44 : "dead_on_back"
		45 : "dead_headcrabed"
		46 : "hgrunt_dead_stomach"
		47 : "dead_canyon"
		48 : "repel_jump"
		49 : "repel_repel"
		50 : "repel_shoot"
		51 : "repel_land"
		52 : "repel_die"
		53 : "sitting"
		54 : "sitting2"
		55 : "sitting3"
		56 : "react"
		57 : "holding_on"
		58 : "open_floor_grate"
		59 : "hgrunt_on_stretcher"
		60 : "crawling"
		61 : "of2a2_speech_idle"
		62 : "of2a2_death_speech"
		63 : "of1a6_get_on"
		64 : "cpr"
		65 : "mic_idle1"
		66 : "mic_idle2"
		67 : "mic_idle3"
		68 : "mic_idle4"
		69 : "mic_stand"
		70 : "interogation"
		71 : "interogation_idle"
		72 : "shoot_shotgun"
	]
	netname(string) : "Squad Name"
	
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]

	weapons(Choices) : "Weapons" : 3 =
	[
		0 : "None"
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
		16 : "Saw"
		18 : "Saw + HG"
	]

	head(Choices) : "Heads" : -1 =
	[
		-2 : "Random"
		-1 : "Default"
		0 : "Gas Mask"
		1 : "Beret"
		2 : "Ops Mask"
		3 : "Bandana White"
		4 : "Bandana Black"
		5 : "MP"
		6 : "Major"
		7 : "Beret (Black)"
	]
]

@PointClass base(Repel, Sequence, CustomSentences) size(-16 -16 0, 16 16 72) studio("models/hgrunt_opfor.mdl") = monster_grunt_ally_repel : "Human Grunt Ally (Repel)"
[
	sequence(Choices) : "Animation Sequence (editor)" : 49 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "launchgrenade"
		6 : "throwgrenade"
		7 : "idle1"
		8 : "idle2"
		9 : "combatidle"
		10 : "frontkick"
		11 : "crouching_idle"
		12 : "crouching_wait"
		13 : "crouching_mp5"
		14 : "standing_mp5"
		15 : "reload_mp5"
		16 : "crouching_shotgun"
		17 : "standing_shotgun"
		18 : "reload_shotgun"
		19 : "crouching_saw"
		20 : "standing_saw"
		21 : "reload_saw"
		22 : "advance_signal"
		23 : "flank_signal"
		24 : "retreat_signal"
		25 : "drop_grenade"
		26 : "limpingwalk"
		27 : "limpingrun"
		28 : "180L"
		29 : "180R"
		30 : "dieback1"
		31 : "dieforward"
		32 : "diesimple"
		33 : "diebackwards"
		34 : "dieheadshot"
		35 : "diegutshot"
		36 : "barnacled1"
		37 : "barnacled2"
		38 : "barnacled3"
		39 : "barnacled4"
		40 : "dead_on_stomach"
		41 : "deadstomach"
		42 : "deadside"
		43 : "deadsitting"
		44 : "dead_on_back"
		45 : "dead_headcrabed"
		46 : "hgrunt_dead_stomach"
		47 : "dead_canyon"
		48 : "repel_jump"
		49 : "repel_repel"
		50 : "repel_shoot"
		51 : "repel_land"
		52 : "repel_die"
		53 : "sitting"
		54 : "sitting2"
		55 : "sitting3"
		56 : "react"
		57 : "holding_on"
		58 : "open_floor_grate"
		59 : "hgrunt_on_stretcher"
		60 : "crawling"
		61 : "of2a2_speech_idle"
		62 : "of2a2_death_speech"
		63 : "of1a6_get_on"
		64 : "cpr"
		65 : "mic_idle1"
		66 : "mic_idle2"
		67 : "mic_idle3"
		68 : "mic_idle4"
		69 : "mic_stand"
		70 : "interogation"
		71 : "interogation_idle"
		72 : "shoot_shotgun"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
	netname(string) : "Squad Name"
	weapons(Choices) : "Weapons" : 3 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
		16 : "Saw"
		18 : "Saw + HG"
	]
	head(Choices) : "Heads" : -1 =
	[
		-2 : "Random"
		-1 : "Default"
		0 : "Gas Mask"
		1 : "Beret"
		2 : "Ops Mask"
		3 : "Bandana White"
		4 : "Bandana Black"
		5 : "MP"
		6 : "Major"
		7 : "Beret (Black)"
	]
]

@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/hgrunt_opfor.mdl") = monster_human_grunt_ally_dead : "Dead Human Grunt Ally"
[
	sequence(Choices) : "Animation Sequence (editor)" : 40 =
	[
		40 : "dead_on_stomach"
		41 : "deadstomach"
		42 : "deadside"
		43 : "deadsitting"
		44 : "dead_on_back"
		45 : "dead_headcrabed"
		46 : "hgrunt_dead_stomach"
		47 : "dead_canyon"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
		3 : "Dead On Back"
		4 : "Dead On Stomach"
		5 : "Head Crabbed"
		6 : "Dead In Canyon"
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		0 : "None"
		1 : "9mmAR"
		8 : "Shotgun"
		16 : "Saw"
	]
	head(Choices) : "Heads" : 0 =
	[
		-2 : "Random"
		0 : "Gas Mask"
		1 : "Beret"
		2 : "Ops Mask"
		3 : "Bandana White"
		4 : "Bandana Black"
		5 : "MP"
		6 : "Major"
		7 : "Beret (Black)"
	]
]

@PointClass base(Monster, TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt_medic.mdl") = monster_human_medic_ally : "Medic"
[
	sequence(Choices) : "Animation Sequence (editor)" : 6 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "throwgrenade"
		6 : "idle1"
		7 : "idle2"
		8 : "combatidle"
		9 : "frontkick"
		10 : "crouching_idle"
		11 : "crouching_wait"
		12 : "crouching_mp5"
		13 : "standing_mp5"
		14 : "reload_mp5"
		15 : "advance_signal"
		16 : "flank_signal"
		17 : "retreat_signal"
		18 : "drop_grenade"
		19 : "limpingwalk"
		20 : "limpingrun"
		21 : "180L"
		22 : "180R"
		23 : "pull_needle"
		24 : "store_needle"
		25 : "give_shot"
		26 : "dieback1"
		27 : "dieforward"
		28 : "diesimple"
		29 : "diebackwards"
		30 : "dieheadshot"
		31 : "diegutshot"
		32 : "barnacled1"
		33 : "barnacled2"
		34 : "barnacled3"
		35 : "barnacled4"
		36 : "dead_on_stomach"
		37 : "deadstomach"
		38 : "deadside"
		39 : "deadsitting"
		40 : "repel_jump"
		41 : "repel_repel"
		42 : "repel_shoot"
		43 : "repel_land"
		44 : "repel_die"
		45 : "open_floor_grate"
		46 : "heal_crouch"
	]
	netname(string) : "Squad Name"
	
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]

	head(Choices) : "Heads" : -1 =
	[
		-1 : "Random"
		0 : "White"
		1 : "Black"
	]

	weapons(Choices) : "Weapons" : 2 =
	[
		0 : "Default (Desert eagle)"
		1 : "Desert Eagle"
		9 : "Desert Eagle + HG"
		2 : "9mm Handgun"
		10 : "9mm Handgun + HG"
		4 : "Hypodermic Needle"
	]
]

@PointClass base(Repel, Sequence, CustomSentences) size(-16 -16 0, 16 16 72) studio("models/hgrunt_medic.mdl") = monster_medic_ally_repel : "Medic (Repel)"
[
	sequence(Choices) : "Animation Sequence (editor)" : 41 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "throwgrenade"
		6 : "idle1"
		7 : "idle2"
		8 : "combatidle"
		9 : "frontkick"
		10 : "crouching_idle"
		11 : "crouching_wait"
		12 : "crouching_mp5"
		13 : "standing_mp5"
		14 : "reload_mp5"
		15 : "advance_signal"
		16 : "flank_signal"
		17 : "retreat_signal"
		18 : "drop_grenade"
		19 : "limpingwalk"
		20 : "limpingrun"
		21 : "180L"
		22 : "180R"
		23 : "pull_needle"
		24 : "store_needle"
		25 : "give_shot"
		26 : "dieback1"
		27 : "dieforward"
		28 : "diesimple"
		29 : "diebackwards"
		30 : "dieheadshot"
		31 : "diegutshot"
		32 : "barnacled1"
		33 : "barnacled2"
		34 : "barnacled3"
		35 : "barnacled4"
		36 : "dead_on_stomach"
		37 : "deadstomach"
		38 : "deadside"
		39 : "deadsitting"
		40 : "repel_jump"
		41 : "repel_repel"
		42 : "repel_shoot"
		43 : "repel_land"
		44 : "repel_die"
		45 : "open_floor_grate"
		46 : "heal_crouch"
	]

	head(Choices) : "Heads" : -1 =
	[
		-1 : "Random"
		0 : "White"
		1 : "Black"
	]

	weapons(Choices) : "Weapons" : 2 =
	[
		0 : "Default (Desert eagle)"
		1 : "Desert Eagle"
		2 : "9mm Handgun"
		4 : "Hypodermic Needle"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]

@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/hgrunt_medic.mdl") = monster_human_medic_ally_dead : "Dead Human Medic Ally"
[
	sequence(Choices) : "Animation Sequence (editor)" : 37 =
	[
		37 : "deadstomach"
		38 : "deadside"
		39 : "deadsitting"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	weapons(Choices) : "Weapons" : 2 =
	[
		0 : "None"
		1 : "Desert Eagle"
		2 : "9mm Handgun"
		4 : "Hypodermic Needle"
	]
	head(Choices) : "Heads" : -1 =
	[
		-1 : "Random"
		0 : "White"
		1 : "Black"
	]
]

@PointClass base(Monster, TalkMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/hgrunt_torch.mdl") = monster_human_torch_ally : "Torch"
[
	sequence(Choices) : "Animation Sequence (editor)" : 6 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "throwgrenade"
		6 : "idle1"
		7 : "idle2"
		8 : "idle3"
		9 : "combatidle"
		10 : "frontkick"
		11 : "crouching_idle"
		12 : "crouching_wait"
		13 : "crouching_mp5"
		14 : "standing_mp5"
		15 : "reload_mp5"
		16 : "advance_signal"
		17 : "flank_signal"
		18 : "retreat_signal"
		19 : "drop_grenade"
		20 : "limpingwalk"
		21 : "limpingrun"
		22 : "180L"
		23 : "180R"
		24 : "dieback1"
		25 : "dieforward"
		26 : "diesimple"
		27 : "diebackwards"
		28 : "dieheadshot"
		29 : "diegutshot"
		30 : "barnacled1"
		31 : "barnacled2"
		32 : "barnacled3"
		33 : "barnacled4"
		34 : "dead_on_stomach"
		35 : "deadstomach"
		36 : "deadside"
		37 : "deadsitting"
		38 : "repel_jump"
		39 : "repel_repel"
		40 : "repel_shoot"
		41 : "repel_land"
		42 : "repel_die"
		43 : "open_floor_grate"
		44 : "cut_floor_grate"
		45 : "wounded"
		46 : "get_up"
		47 : "pull_torch_wgun"
		48 : "store_torch"
		49 : "pull_torch_nogun"
		50 : "cut_door_wgun"
		51 : "cut_door_nogun"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "Desert Eagle"
		5 : "Desert Eagle + HG"
		2 : "Blow Torch"
	]
]

@PointClass base(Repel, Sequence, CustomSentences) size(-16 -16 0, 16 16 72) studio("models/hgrunt_torch.mdl") = monster_torch_ally_repel : "Torch (Repel)"
[
	sequence(Choices) : "Animation Sequence (editor)" : 39 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "throwgrenade"
		6 : "idle1"
		7 : "idle2"
		8 : "idle3"
		9 : "combatidle"
		10 : "frontkick"
		11 : "crouching_idle"
		12 : "crouching_wait"
		13 : "crouching_mp5"
		14 : "standing_mp5"
		15 : "reload_mp5"
		16 : "advance_signal"
		17 : "flank_signal"
		18 : "retreat_signal"
		19 : "drop_grenade"
		20 : "limpingwalk"
		21 : "limpingrun"
		22 : "180L"
		23 : "180R"
		24 : "dieback1"
		25 : "dieforward"
		26 : "diesimple"
		27 : "diebackwards"
		28 : "dieheadshot"
		29 : "diegutshot"
		30 : "barnacled1"
		31 : "barnacled2"
		32 : "barnacled3"
		33 : "barnacled4"
		34 : "dead_on_stomach"
		35 : "deadstomach"
		36 : "deadside"
		37 : "deadsitting"
		38 : "repel_jump"
		39 : "repel_repel"
		40 : "repel_shoot"
		41 : "repel_land"
		42 : "repel_die"
		43 : "open_floor_grate"
		44 : "cut_floor_grate"
		45 : "wounded"
		46 : "get_up"
		47 : "pull_torch_wgun"
		48 : "store_torch"
		49 : "pull_torch_nogun"
		50 : "cut_door_wgun"
		51 : "cut_door_nogun"
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "Desert Eagle"
		2 : "Blow Torch"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]

@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/hgrunt_torch.mdl") = monster_human_torch_ally_dead : "Dead Human Torch Ally"
[
	sequence(Choices) : "Animation Sequence (editor)" : 35 =
	[
		35 : "deadstomach"
		36 : "deadside"
		37 : "deadsitting"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		0 : "None"
		1 : "Desert Eagle"
		2 : "Blow Torch"
	]
]

@PointClass base(Monster, FollowingMonster) size(-16 -16 0, 16 16 72) studio("models/hwgrunt.mdl") = monster_hwgrunt : "Heavy Weapons Grunt"
[
	netname(string) : "Squad Name"

	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "idle2"
		2 : "creeping_walk"
		3 : "run"
		4 : "turnl"
		5 : "turnr"
		6 : "attack"
		7 : "spinup"
		8 : "spindown"
		9 : "small_pain"
		10 : "small_pain2"
		11 : "die_backwards"
		12 : "die_crumple"
		13 : "die_violent"
		14 : "repel_repel"
		15 : "repel_land"
	]
]
@PointClass base(Repel) size(-16 -16 0, 16 16 72) studio("models/hwgrunt.mdl") = monster_hwgrunt_repel : "Heavy Weapons Grunt (Repel)"
[
	netname(string) : "Squad Name"

	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]
    sequence(Choices) : "Animation Sequence (editor)" : 14 =
	[
		0 : "idle"
		1 : "idle2"
		2 : "creeping_walk"
		3 : "run"
		4 : "turnl"
		5 : "turnr"
		6 : "attack"
		7 : "spinup"
		8 : "spindown"
		9 : "small_pain"
		10 : "small_pain2"
		11 : "die_backwards"
		12 : "die_crumple"
		13 : "die_violent"
		14 : "repel_repel"
		15 : "repel_land"
	]
]

@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/icky.mdl") = monster_ichthyosaur : "Ichthyosaur"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "swim"
		2 : "thrust"
		3 : "die1"
		4 : "die2"
		5 : "smflinch"
		6 : "bgflinch"
		7 : "bellyup"
		8 : "bite_r"
		9 : "bite_l"
		10 : "srattack1"
		11 : "rturn"
		12 : "lturn"
		13 : "180turn"
		14 : "hitcage"
		15 : "new_ickyjump"
	]
]
@PointClass base(Monster, Sequence) size(-6 -6 0, 6 6 6) studio("models/leech.mdl") = monster_leech : "Leech"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "swim"
		1 : "swim2"
		2 : "attack"
		3 : "hover"
		4 : "leftturn"
		5 : "rightturn"
		6 : "death"
		7 : "death_end"
	]
]

@BaseClass base(Targetname, RenderFields, Angles) = DeadTurret []

@PointClass base(Monster, Sequence) size(-16 -16 -32, 16 16 32) studio("models/miniturret.mdl") = monster_miniturret : "Mini Auto Turret"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
	spawnflags(Flags) =
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(DeadTurret) size(-16 -16 -32, 16 16 32) studio("models/miniturret.mdl") = monster_miniturret_dead : "Dead Mini Auto Turret"
[
	model(studio) : "Custom Model"
	sequence(Choices) : "Animation Sequence (editor)" : 5 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
]

@PointClass base(Monster, FollowingMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/massn.mdl") = monster_male_assassin : "Male Assassin"
[
	netname(string) : "Squad Name"

	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]

	head(Choices) : "Heads" : 0 =
	[
		-1 : "Random"
		0 : "Ski Mask White"
		1 : "Ski Mask Black"
		2 : "Night Goggles"
	]

	weapons(Choices) : "Weapons" : 3 =
	[
		0 : "None"
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Sniper Rifle"
		10 : "Sniper Rifle + HG"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 7 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "launchgrenade"
		6 : "throwgrenade"
		7 : "idle1"
		8 : "idle2"
		9 : "combatidle"
		10 : "frontkick"
		11 : "frontkick"
		12 : "frontkick"
		13 : "crouching_idle"
		14 : "crouching_wait"
		15 : "crouching_mp5"
		16 : "standing_mp5"
		17 : "reload_mp5"
		18 : "crouching_shotgun"
		19 : "standing_shotgun"
		20 : "reload_shotgun"
		21 : "crouching_m40a1"
		22 : "standing_m40a1"
		23 : "reload_m40a1"
		24 : "advance_signal"
		25 : "flank_signal"
		26 : "retreat_signal"
		27 : "drop_grenade"
		28 : "limpingwalk"
		29 : "limpingrun"
		30 : "strafeleft"
		31 : "straferight"
		32 : "dieback1"
		33 : "dieforward"
		34 : "diesimple"
		35 : "diebackwards"
		36 : "dieheadshot"
		37 : "diegutshot"
		38 : "barnacled1"
		39 : "barnacled2"
		40 : "barnacled3"
		41 : "barnacled4"
		42 : "dead_on_stomach"
		43 : "deadstomach"
		44 : "deadside"
		45 : "deadsitting"
		46 : "repel_jump"
		47 : "repel_repel"
		48 : "repel_shoot"
		49 : "repel_land"
		50 : "repel_die"
		51 : "working"
		52 : "standing"
	]
]

@BaseClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/massn.mdl") = MaleAssassinDead
[
	sequence(Choices) : "Animation Sequence (editor)" : 43 =
	[
		43 : "deadstomach"
		44 : "deadside"
		45 : "deadsitting"
	]
	head(Choices) : "Heads" : -1 =
	[
		-1 : "Random"
		0 : "Ski Mask White"
		1 : "Ski Mask Black"
		2 : "Night Goggles"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	weapons(Choices) : "Weapons" : 1 =
	[
		0 : "None"
		1 : "9mmAR"
		8 : "Sniper Rifle"
	]
]

@PointClass base(MaleAssassinDead) = monster_male_assassin_dead : "Dead Male Assassin" []
@PointClass base(MaleAssassinDead) = monster_massassin_dead : "Dead Male Assassin" []

@PointClass base(Monster, Sequence) size(-192 -192 0, 192 192 384) studio("models/nihilanth.mdl") = monster_nihilanth : "Nihilanth"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "float"
		1 : "attack1"
		2 : "attack2"
		3 : "throw"
		4 : "block"
		5 : "recharge"
		6 : "float_open"
		7 : "attack1_open"
		8 : "attack2_open"
		9 : "flinch1"
		10 : "flinch2"
		11 : "fall"
		12 : "die1"
		13 : "walk_f"
		14 : "walk_b"
		15 : "walk_u"
		16 : "walk_d"
		17 : "walk_r"
		18 : "walk_l"
		19 : "walk"
		20 : "shoot"
	]
]

@PointClass base(Monster, Sequence) size(-16 -16 -36, 16 16 36) studio("models/loader.mdl") = monster_op4loader : "Loader machine"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "boxwalk"
		2 : "45_left"
		3 : "heroidle"
		4 : "freeze"
		5 : "park"
		6 : "blocked"
		7 : "freed"
		8 : "dropbox"
		9 : "pivotback"
	]
	spawnflags(Flags) =
	[
		4 : "Not solid" : 0
	]
]

@PointClass base(Osprey) size(-480 -480 -112, 480 480 24) studio("models/osprey.mdl") = monster_osprey : "Osprey"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "rotor"
	]
	grunttype(Choices) : "Grunt Type" : : "Note: you need to set an appropriate relationship for osprey to spawn ally grunts" =
	[
		0 : "Human Grunts (default)"
		1 : "Opposing Force Grunts"
	]
]

@BaseClass = OtisHead
[
	head(Choices) : "Head" : -1 =
	[
		-1 : "Random"
		0 : "Head with hair"
		1 : "Bald Head"
	]
]
@PointClass base(Monster, TalkMonster, OtisHead, Sequence) size(-16 -16 0, 16 16 72) studio("models/otis.mdl") = monster_otis : "Otis"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "idle2"
		2 : "idle3"
		3 : "idle4"
		4 : "walk"
		5 : "run"
		6 : "shootgun"
		7 : "shootgun2"
		8 : "draw"
		9 : "disarm"
		10 : "reload"
		11 : "turnleft"
		12 : "turnright"
		13 : "laflinch"
		14 : "raflinch"
		15 : "llflinch"
		16 : "rlflinch"
		17 : "smlflinch"
		18 : "cower_stand"
		19 : "locked_door"
		20 : "fall_loop"
		21 : "barn_wave"
		22 : "beat_grunt"
		23 : "beat_gruntidle"
		24 : "flashlight"
		25 : "diesimple"
		26 : "dieviolent"
		27 : "diegutshot"
		28 : "dieforward"
		29 : "diebackward"
		30 : "diecrump"
		31 : "barnaclehit"
		32 : "barnaclepull"
		33 : "barnaclecrunch"
		34 : "barnaclechew"
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
		38 : "stuffed_in_vent"
		39 : "dead_sitting"
		40 : "standing_idle"
		41 : "cprbarney"
		42 : "cprbarneyrevive"
		43 : "barney_dragvent"
		44 : "dying_barney"
		45 : "dying_barneyidle"
		46 : "dying_friend"
		47 : "dying_friendidle"
		48 : "c1a3_bidle"
		49 : "intropush"
		50 : "fence"
		51 : "wave"
		52 : "unlatch"
		53 : "retina"
		54 : "relaxstand"
		55 : "trackswitch"
		56 : "pepsiswing"
		57 : "pepsipush"
		58 : "buttonpush"
		59 : "cowering"
		60 : "candygrab"
	]
	bodystate(Choices) : "bodystate" =
	[
		-1 : "Random"
		0 : "Gun Holstered"
		1 : "Gun Drawn"
		2 : "Donut"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]
@PointClass base(DeadMonster, OtisHead) size(-16 -16 0, 16 16 72) studio("models/otis.mdl") = monster_otis_dead : "Dead Otis"
[
	sequence(Choices) : "Animation Sequence (editor)" : 35 =
	[
		35 : "lying_on_back"
		36 : "lying_on_side"
		37 : "lying_on_stomach"
		38 : "stuffed_in_vent"
		39 : "dead_sitting"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On side"
		2 : "On stomach"
		3 : "Stuffed in Vent"
		4 : "Dead Sitting"
	]
]

@PointClass base(Monster) studio("models/panthereye.mdl") = monster_panthereye : "Panthereye" []

@PointClass base(Monster, FollowingMonster, Sequence) size(-24 -24 0, 24 24 32) studio("models/pit_drone.mdl") = monster_pitdrone : "PitDrone"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "idle"
		2 : "walk"
		3 : "gallop"
		4 : "run"
		5 : "jump"
		6 : "flinchs"
		7 : "flinchb"
		8 : "turnleft"
		9 : "turnright"
		10 : "bite"
		11 : "whip"
		12 : "range"
		13 : "eat"
		14 : "reload"
		15 : "die"
		16 : "die1"
		17 : "die2"
		18 : "jump_over_counter"
	]
	initammo(string) : "Initial Ammo" : "6"
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]

@PointClass base(DeadMonster) studio("models/pit_drone.mdl") = monster_pitdrone_dead : "Dead Pitdrone"
[
	sequence(Choices) : "Animation Sequence (editor)" : 17 =
	[
		17 : "die2"
	]
]

@PointClass base(gibshooterbase) = pitworm_gibshooter : "Pitworm Gib Shooter" []

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 32) studio("models/pit_worm_up.mdl") = monster_pitworm : "Pit Worm"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle"
		1 : "idle2"
		2 : "attack"
		3 : "scream"
		4 : "attacklow"
		5 : "doorclaw1"
		6 : "doorclaw2"
		7 : "doorclaw3"
		8 : "eyeblast"
		9 : "platclaw1"
		10 : "platclaw2"
		11 : "flinch1"
		12 : "flinch2"
		13 : "death"
	]
]

@PointClass base(Monster, Sequence) size(-95 -95 0, 95 95 190) studio("models/geneworm.mdl") = monster_geneworm : "Gene Worm"
[
	sequence(Choices) : "Animation Sequence (editor)" : 15 =
	[
		0 : "melee1"
		1 : "melee2"
		2 : "melee3"
		3 : "dattack1"
		4 : "dattack2"
		5 : "dattack3"
		6 : "eyepain1"
		7 : "eyepain2"
		8 : "bigpain1"
		9 : "bigpain2"
		10 : "bigpain3"
		11 : "bigpain4"
		12 : "mad"
		13 : "scream1"
		14 : "scream2"
		15 : "idle"
		16 : "idlepain"
		17 : "idlepain2"
		18 : "idlepain3"
		19 : "death"
		20 : "entry"
	]
]

@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/skeleton.mdl") = monster_skeleton_dead : "Dead Skeleton"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "s_onback"
		1 : "s_sitting"
		2 : "dead_against_wall"
		3 : "dead_stomach"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "Seated"
		2 : "Against Wall"
		3 : "On Stomach"
	]
]

// @PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio("models/gus.mdl") = monster_gus : "Construction Worker"
// [
// 	body(Choices) : "Body" : -1 =
// 	[
// 		-1 : "Random"
// 		0 : "White"
// 		1 : "Black"
// 	]
// 	sequence(Choices) : "Animation Sequence (editor)" : 13 =
// 	[
// 		0 : "walk"
// 		1 : "walk_scared"
// 		2 : "run"
// 		3 : "run1"
// 		4 : "run2"
// 		5 : "180_Left"
// 		6 : "180_Right"
// 		7 : "flinch"
// 		8 : "flinch1"
// 		9 : "laflinch"
// 		10 : "raflinch"
// 		11 : "llflinch"
// 		12 : "rlflinch"
// 		13 : "idle1"
// 		14 : "idle3"
// 		15 : "idle4"
// 		16 : "idle5"
// 		17 : "idle6"
// 		18 : "idle7"
// 		19 : "crouchstand"
// 		20 : "crouch_idle"
// 		21 : "crouch_idle2"
// 		22 : "crouch_idle3_1"
// 		23 : "crouch_idle3_2"
// 		24 : "panic"
// 		25 : "fear1"
// 		26 : "fear2"
// 		27 : "eye_wipe"
// 		28 : "pull_needle"
// 		29 : "return_needle"
// 		30 : "give_shot"
// 		31 : "diesimple"
// 		32 : "dieforward"
// 		33 : "dieforward1"
// 		34 : "diebackward"
// 		35 : "headshot"
// 		36 : "gutshot"
// 		37 : "barnacled1"
// 		38 : "barnacled2"
// 		39 : "barnacled3"
// 		40 : "barnacled4"
// 		41 : "lying_on_back"
// 		42 : "lying_on_stomach"
// 		43 : "dead_sitting"
// 		44 : "dead_table1"
// 		45 : "dead_table2"
// 		46 : "dead_table3"
// 		47 : "console"
// 		48 : "checktie"
// 		49 : "dryhands"
// 		50 : "tieshoe"
// 		51 : "writeboard"
// 		52 : "studycart"
// 		53 : "lean"
// 		54 : "pondering"
// 		55 : "pondering2"
// 		56 : "pondering3"
// 		57 : "buysoda"
// 		58 : "pause"
// 		59 : "yes"
// 		60 : "no"
// 		61 : "push_button"
// 		62 : "converse1"
// 		63 : "converse2"
// 		64 : "retina"
// 		65 : "talkleft"
// 		66 : "talkright"
// 		67 : "deskidle"
// 		68 : "coffee"
// 		69 : "franticbutton"
// 		70 : "startle"
// 		71 : "sitlookleft"
// 		72 : "sitlookright"
// 		73 : "sitscared"
// 		74 : "sitting2"
// 		75 : "sitting3"
// 		76 : "cprscientist"
// 		77 : "cprscientistrevive"
// 		78 : "cowering_in_corner"
// 		79 : "sstruggleidle"
// 		80 : "sstruggle"
// 		81 : "headcrabbed"
// 		82 : "c1a0_catwalkidle"
// 		83 : "c1a0_catwalk"
// 		84 : "ceiling_dangle"
// 		85 : "ventpull1"
// 		86 : "ventpull2"
// 		87 : "ventpullidle1"
// 		88 : "ventpullidle2"
// 		89 : "sitidle"
// 		90 : "sitstand"
// 		91 : "keypad"
// 		92 : "panic1"
// 		93 : "lookwindow"
// 		94 : "wave"
// 		95 : "pulldoor"
// 		96 : "beatdoor"
// 		97 : "fallingloop"
// 		98 : "crawlwindow"
// 		99 : "divewindow"
// 		100 : "locked_door"
// 		101 : "push_button2"
// 		102 : "unlock_door"
// 		103 : "quicklook"
// 		104 : "handrailidle"
// 		105 : "handrail"
// 		106 : "hanging_idle"
// 		107 : "fall"
// 		108 : "scientist_get_pulled"
// 		109 : "hanging_idle2"
// 		110 : "fall_elevator"
// 		111 : "scientist_idlewall"
// 		112 : "ickyjump_sci"
// 		113 : "haulscientist"
// 		114 : "c1a4_wounded_idle"
// 		115 : "c1a4_dying_speech"
// 		116 : "tentacle_grab"
// 		117 : "helicack"
// 		118 : "windive"
// 		119 : "scicrashidle"
// 		120 : "scicrash"
// 		121 : "onguard"
// 		122 : "seeya"
// 		123 : "rocketcrawl"
// 		124 : "portal"
// 		125 : "gluonshow"
// 		126 : "crouch"
// 		127 : "kneel"
// 		128 : "dudedu"
// 		129 : "cower_chat"
// 		130 : "cower_chat_die"
// 	]
// ]
// @PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/gus.mdl") = monster_gus_dead : "Dead Construction Worker"
// [
// 	sequence(Choices) : "Animation Sequence (editor)" : 41 =
// 	[
// 		41 : "lying_on_back"
// 		42 : "lying_on_stomach"
// 		43 : "dead_sitting"
// 		44 : "dead_table1"
// 		45 : "dead_table2"
// 		46 : "dead_table3"
// 	]
// 	body(Choices) : "Body" : -1 =
// 	[
// 		-1 : "Random"
// 		0 : "White"
// 		1 : "Black"
// 	]
// 	pose(Choices) : "Pose" : 0 =
// 	[
// 		0 : "On back"
// 		1 : "On Stomach"
// 		2 : "Sitting"
// 		3 : "Table1"
// 		4 : "Table2"
// 		5 : "Table3"
// 	]
// ]

@PointClass base(Monster, FollowingMonster, Sequence) size(-16 -16 0, 16 16 72) studio("models/strooper.mdl") = monster_shocktrooper : "Shock Trooper"
[
	sequence(Choices) : "Animation Sequence (editor)" : 10 =
	[
		0 : "walk1"
		1 : "run"
		2 : "victorydance"
		3 : "cower"
		4 : "smflinch"
		5 : "leftlegsmflinchh"
		6 : "rightlegsmflinch"
		7 : "rightarmflinch"
		8 : "leftarmflinch"
		9 : "throwgrenade"
		10 : "idle1"
		11 : "idle2"
		12 : "combatidle"
		13 : "frontkick"
		14 : "crouching_idle"
		15 : "crouching_wait"
		16 : "crouching_mp5"
		17 : "standing_mp5"
		18 : "reload_mp5"
		19 : "advance_signal"
		20 : "flank_signal"
		21 : "retreat_signal"
		22 : "drop_grenade"
		23 : "limpingwalk"
		24 : "limpingrun"
		25 : "180L"
		26 : "180R"
		27 : "dieback1"
		28 : "dieforward"
		29 : "diesimple"
		30 : "diebackwards"
		31 : "dieheadshot"
		32 : "diegutshot"
		33 : "grab_scientist"
	]
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Roach" : 0
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/strooper.mdl") = monster_shocktrooper_dead : "Dead Shock Trooper"
[
	sequence(Choices) : "Animation Sequence (editor)" : 29 =
	[
		29 : "diesimple"
		30 : "diebackwards"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On Stomach"
		1 : "On Back"
	]
]

@PointClass base(DeadMonster) studio("models/w_shock_rifle.mdl") = monster_shockroach_dead : "Dead Shock Roach"
[
	sequence(Choices) : "Animation Sequence (editor)" : 7 =
	[
		7 : "dieback"
	]
]

@PointClass base(Monster, Sequence) size(-6 -6 0, 6 6 6) studio("models/bigrat.mdl") = monster_rat : "Rat (no ai)"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle4"
		1 : "idle5"
		2 : "idle6"
		3 : "idle7"
		4 : "walk2"
		5 : "jump"
		6 : "eat"
		7 : "die1"
	]
]

@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/recruit.mdl") = monster_recruit : "Recruit"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "walk"
		2 : "run"
		3 : "turnleft"
		4 : "turnright"
		5 : "pushups"
		6 : "jumping_jacks"
		7 : "salute"
	]
]

@PointClass base(Monster) size(-32 -32 0, 32 32 128) studio("models/robocop.mdl") = monster_robocop : "Robocop" []

@PointClass base(Monster, FollowingMonster) size(-16 -16 0, 16 16 72) studio("models/rgrunt.mdl") = monster_robogrunt : "Robot Grunt"
[
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		1024: "Don't Drop Gun" : 0
	]
	netname(string) : "Squad Name"
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
]

@PointClass base(Repel) size(-16 -16 0, 16 16 72) = monster_robogrunt_repel : "Robot Grunt"
[
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
	spawnflags(Flags) =
	[
		1024: "Don't Drop Gun" : 0
	]
]

@PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio() = monster_civilian : "Configurable civilian. Acts like scientist, but can't heal. Set model, body and skin to configure the look."
[
	body(integer) : "Body"
	skin(integer) : "Skin"
]

@PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio("models/cleansuit_scientist.mdl") = monster_cleansuit_scientist : "Cleansuit Scientist"
[
	sequence(Choices) : "Animation Sequence (editor)" : 13 =
	[
		0 : "walk"
		1 : "walk_scared"
		2 : "run"
		3 : "run1"
		4 : "run2"
		5 : "180_Left"
		6 : "180_Right"
		7 : "flinch"
		8 : "flinch1"
		9 : "laflinch"
		10 : "raflinch"
		11 : "llflinch"
		12 : "rlflinch"
		13 : "idle1"
		14 : "idle3"
		15 : "idle4"
		16 : "idle5"
		17 : "idle6"
		18 : "idle7"
		19 : "crouchstand"
		20 : "crouch_idle"
		21 : "crouch_idle2"
		22 : "crouch_idle3"
		23 : "crouch_idle3"
		24 : "panic"
		25 : "fear1"
		26 : "fear2"
		27 : "eye_wipe"
		28 : "pull_needle"
		29 : "return_needle"
		30 : "give_shot"
		31 : "diesimple"
		32 : "dieforward"
		33 : "dieforward1"
		34 : "diebackward"
		35 : "headshot"
		36 : "gutshot"
		37 : "germandeath"
		38 : "lying_on_back"
		39 : "lying_on_stomach"
		40 : "dead_sitting"
		41 : "dead_table1"
		42 : "dead_table2"
		43 : "dead_table3"
		44 : "barnacled1"
		45 : "barnacled2"
		46 : "barnacled3"
		47 : "barnacled4"
		48 : "console"
		49 : "dryhands"
		50 : "tieshoe"
		51 : "writeboard"
		52 : "studycart"
		53 : "lean"
		54 : "pondering"
		55 : "pondering2"
		56 : "pondering3"
		57 : "pause"
		58 : "yes"
		59 : "no"
		60 : "push_button"
		61 : "converse1"
		62 : "converse2"
		63 : "retina"
		64 : "coffee"
		65 : "franticbutton"
		66 : "startle"
		67 : "scientist_throwna"
		68 : "scientist_thrownb"
		69 : "scientist_beatwindow"
		70 : "scientist_deadpose1"
		71 : "scientist_zombiefear"
		72 : "dead_against_wall"
		73 : "teleport_fidget"
	]
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
]

@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/cleansuit_scientist.mdl") = monster_cleansuit_scientist_dead : "Dead Cleansuit Scientist"
[
	sequence(Choices) : "Animation Sequence (editor)" : 38 =
	[
		38 : "lying_on_back"
		39 : "lying_on_stomach"
		40 : "dead_sitting"
		41 : "dead_table1"
		42 : "dead_table2"
		43 : "dead_table3"
	]
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On Stomach"
		2 : "Sitting"
		3 : "Hanging"
		4 : "Table1"
		5 : "Table2"
		6 : "Table3"
	]
]

@PointClass base(Monster) size(-14 -14 22, 14 14 72) = monster_sitting_cleansuit_scientist : "Sitting Cleansuit Scientist" 
[
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
	spawnflags(Flags) =
	[
		131072 : "Don't greet player" : 0 : "Don't say hello to player upon seeing him"
		32768 : "Don't drop to the floor" : 0
	]
]

@PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio("models/scientist.mdl") = monster_scientist : "Scared Scientist"
[
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 13 =
	[
		0 : "walk"
		1 : "walk_scared"
		2 : "run"
		3 : "run1"
		4 : "run2"
		5 : "180_Left"
		6 : "180_Right"
		7 : "flinch"
		8 : "flinch1"
		9 : "laflinch"
		10 : "raflinch"
		11 : "llflinch"
		12 : "rlflinch"
		13 : "idle1"
		14 : "idle3"
		15 : "idle4"
		16 : "idle5"
		17 : "idle6"
		18 : "idle7"
		19 : "crouchstand"
		20 : "crouch_idle"
		21 : "crouch_idle2"
		22 : "crouch_idle3"
		23 : "crouch_idle3"
		24 : "panic"
		25 : "fear1"
		26 : "fear2"
		27 : "eye_wipe"
		28 : "pull_needle"
		29 : "return_needle"
		30 : "give_shot"
		31 : "diesimple"
		32 : "dieforward"
		33 : "dieforward1"
		34 : "diebackward"
		35 : "headshot"
		36 : "gutshot"
		37 : "lying_on_back"
		38 : "lying_on_stomach"
		39 : "dead_sitting"
		40 : "dead_table1"
		41 : "dead_table2"
		42 : "dead_table3"
		43 : "barnacled1"
		44 : "barnacled2"
		45 : "barnacled3"
		46 : "barnacled4"
		47 : "console"
		48 : "checktie"
		49 : "dryhands"
		50 : "tieshoe"
		51 : "whiteboard"
		52 : "studycart"
		53 : "lean"
		54 : "pondering"
		55 : "pondering2"
		56 : "pondering3"
		57 : "buysoda"
		58 : "pause"
		59 : "yes"
		60 : "no"
		61 : "push_button"
		62 : "converse1"
		63 : "converse2"
		64 : "retina"
		65 : "talkleft"
		66 : "talkright"
		67 : "deskidle"
		68 : "coffee"
		69 : "franticbutton"
		70 : "startle"
		71 : "sitlookleft"
		72 : "sitlookright"
		73 : "sitscared"
		74 : "sitting2"
		75 : "sitting3"
		76 : "cprscientist"
		77 : "cprscientistrevive"
		78 : "cowering_in_corner"
		79 : "sstruggleidle"
		80 : "sstruggle"
		81 : "headcrabbed"
		82 : "c1a0_catwalkidle"
		83 : "c1a0_catwalk"
		84 : "ceiling_dangle"
		85 : "ventpull1"
		86 : "ventpull2"
		87 : "ventpullidle1"
		88 : "ventpullidle2"
		89 : "sitidle"
		90 : "sitstand"
		91 : "keypad"
		92 : "panic1"
		93 : "lookwindow"
		94 : "wave"
		95 : "pulldoor"
		96 : "beatdoor"
		97 : "fallingloop"
		98 : "crawlwindow"
		99 : "divewindow"
		100 : "locked_door"
		101 : "push_button2"
		102 : "unlock_door"
		103 : "quicklook"
		104 : "handrailidle"
		105 : "handrail"
		106 : "hanging_idle"
		107 : "fall"
		108 : "scientist_get_pulled"
		109 : "hanging_idle2"
		110 : "fall_elevator"
		111 : "scientist_idlewall"
		112 : "ickyjump_sci"
		113 : "haulscientist"
		114 : "c1a4_wounded_idle"
		115 : "c1a4_dying_speech"
		116 : "tentacle_grab"
		117 : "helicack"
		118 : "windive"
		119 : "scicrashidle"
		120 : "scicrash"
		121 : "onguard"
		122 : "seeya"
		123 : "rocketcrawl"
		124 : "portal"
		125 : "gluonshow"
		126 : "crouch"
		127 : "kneel"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/scientist.mdl") = monster_scientist_dead : "Dead Scientist"
[
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On Stomach"
		2 : "Sitting"
		3 : "Hanging"
		4 : "Table1"
		5 : "Table2"
		6 : "Table3"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 37 =
	[
		37 : "lying_on_back"
		38 : "lying_on_stomach"
		39 : "dead_sitting"
		40 : "dead_table1"
		41 : "dead_table2"
		42 : "dead_table3"
	]
]
@PointClass base(Monster) size(-14 -14 22, 14 14 72) studio("models/scientist.mdl") = monster_sitting_scientist : "Sitting Scientist"
[
	body(Choices) : "Body" : -1 =
	[
		-1 : "Random"
		0 : "Glasses"
		1 : "Einstein"
		2 : "Luther"
		3 : "Slick"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 73 =
	[
		71 : "sitlookleft"
		72 : "sitlookright"
		73 : "sitscared"
		74 : "sitting2"
		75 : "sitting3"
	]
	spawnflags(Flags) =
	[
		131072 : "Don't greet player" : 0 : "Don't say hello to player upon seeing him"
		32768 : "Don't drop to the floor" : 0
	]
]
@PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio("models/scientist_rosenberg.mdl") = monster_rosenberg : "Dr. Rosenberg" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/sentry.mdl") = monster_sentry : "Sentry Turret Gun"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
	spawnflags(Flags) =
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(DeadTurret) size(-16 -16 0, 16 16 72) studio("models/sentry.mdl") = monster_sentry_dead : "Dead Sentry Turret Gun"
[
	sequence(Choices) : "Animation Sequence (editor)" : 5 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 36) studio("models/w_squeak.mdl") = monster_snark : "Armed Snark" []

@BaseClass color(0 200 200) base(Targetname) size(-16 -16 -16, 16 16 16) = MonsterTarget
[
	frags(choices) : "When active, count as:" : 11 =
	[
		0 : "Ignored"
		1 : "Machine"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	spawnflags(Flags) =
	[
		1: "Start inactive" : 0
	]
]
@PointClass base(MonsterTarget) = monster_target : "Target for monsters to attack" []
@PointClass base(MonsterTarget) = monster_bullseye : "Target for monsters to attack" []

@PointClass base(Monster, Sequence) size(-32 -32 0, 32 32 64) studio("models/tentacle2.mdl") = monster_tentacle : "Tentacle Arm"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "Pit_Idle"
		1 : "rise_to_Temp1"
		2 : "Temp1_to_Floor"
		3 : "Floor_Idle"
		4 : "Floor_Fidget_Pissed"
		5 : "Floor_Fidget_SmallRise"
		6 : "Floor_Fidget_Wave"
		7 : "Floor_Strike"
		8 : "Floor_Tap"
		9 : "Floor_Rotate"
		10 : "Floor_Rear"
		11 : "Floor_Rear_Idle"
		12 : "Floor_to_Lev1"
		13 : "Lev1_Idle"
		14 : "Lev1_Fidget_Claw"
		15 : "Lev1_Fidget_Shake"
		16 : "Lev1_Fidget_Snap"
		17 : "Lev1_Strike"
		18 : "Lev1_Tap"
		19 : "Lev1_Rotate"
		20 : "Lev1_Rear"
		21 : "Lev1_Rear_Idle"
		22 : "Lev1_to_Lev2"
		23 : "Lev2_Idle"
		24 : "Lev2_Fidget_Shake"
		25 : "Lev2_Fidget_Swing"
		26 : "Lev2_Fidget_Tut"
		27 : "Lev2_Strike"
		28 : "Lev2_Tap"
		29 : "Lev2_Rotate"
		30 : "Lev2_Rear"
		31 : "Lev2_Rear_Idle"
		32 : "Lev2_to_Lev3"
		33 : "Lev3_Idle"
		34 : "Lev3_Fidget_Shake"
		35 : "Lev3_Fidget_Side"
		36 : "Lev3_Fidget_Swipe"
		37 : "Lev3_Strike"
		38 : "Lev3_Tap"
		39 : "Lev3_Rotate"
		40 : "Lev3_Rear"
		41 : "Lev3_Rear_Idle"
		42 : "Lev1_Door_reach"
		43 : "Lev3_to_Engine"
		44 : "Engine_Idle"
		45 : "Engine_Sway"
		46 : "Engine_Swat"
		47 : "Engine_Bob"
		48 : "Engine_death1"
		49 : "Engine_death2"
		50 : "Engine_death3"
		51 : "tentacle_grab_idle"
		52 : "tentacle_grab"
	]
	sweeparc(integer) : "Sweep Arc" : 130
	sound(Choices) : "Tap Sound" : -1 =
	[
		-1 : "None"
		0 : "Silo"
		1 : "Dirt"
		2 : "Water"
	]
]
@PointClass base(Targetname, RenderFields, Angles, Sequence) studio("models/v_tripmine.mdl") flags(Angle) color(0 200 200) body(3) sequence(7) = monster_tripmine : "Active Tripmine"
[
	spawnflags(Flags) =
	[
		1 : "Instant On" : 1
	]
]
@PointClass base(Monster, Sequence) size(-32 -32 -32, 32 32 32) studio("models/turret.mdl") = monster_turret : "Auto Turret"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
	spawnflags(Flags) =
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]
@PointClass base(DeadTurret) size(-32 -32 -32, 32 32 32) studio("models/turret.mdl") = monster_turret_dead : "Dead Auto Turret"
[
	model(studio) : "Custom Model"
	sequence(Choices) : "Animation Sequence (editor)" : 5 =
	[
		0 : "idle_off"
		1 : "fire"
		2 : "spin"
		3 : "deploy"
		4 : "retire"
		5 : "die"
	]
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
]
@PointClass base(Monster, Civilian) size(-16 -16 0, 16 16 72) studio("models/wheelchair_sci.mdl") = monster_wheelchair : "Dr. Keller" []
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/zombie.mdl") = monster_zombie : "Scientist Zombie"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "turnleft"
		2 : "turnright"
		3 : "flinchsmall"
		4 : "flinch"
		5 : "bigflinch"
		6 : "getup"
		7 : "falling"
		8 : "attack1"
		9 : "attack2"
		10 : "walk"
		11 : "laflinch"
		12 : "raflinch"
		13 : "llflinch"
		14 : "rlflinch"
		15 : "dieheadshot"
		16 : "dieheadshot2"
		17 : "diesimple"
		18 : "diebackward"
		19 : "dieforward"
		20 : "pause"
		21 : "busting_through_wall"
		22 : "kick_punch_wall"
		23 : "bust_window"
		24 : "soda"
		25 : "slideidle"
		26 : "slidewall"
		27 : "ventclimbidle"
		28 : "ventclimb"
		29 : "deadidle"
		30 : "deadwall"
		31 : "freakdie"
		32 : "freak"
		33 : "eatbodytable"
		34 : "eatbody"
		35 : "eatbodystand"
		36 : "ripdoor"
		37 : "zombie_pull_scientist"
		38 : "zombie_eating"
		39 : "eat_to_stand"
		40 : "vent_zidle"
		41 : "vent_c1a3"
		42 : "haulzombie"
		43 : "c2a3_snack_getup"
	]
]
@PointClass base(DeadMonster) studio("models/zombie.mdl") = monster_zombie_dead : "Dead Zombie"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 15 =
	[
		15 : "dieheadshot"
		19 : "dieforward"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/zombie_barney.mdl") = monster_zombie_barney : "Barney Zombie"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "turnleft"
		2 : "turnright"
		3 : "flinchsmall"
		4 : "flinch"
		5 : "bigflinch"
		6 : "getup"
		7 : "falling"
		8 : "attack1"
		9 : "attack2"
		10 : "walk"
		11 : "laflinch"
		12 : "raflinch"
		13 : "llflinch"
		14 : "rlflinch"
		15 : "dieheadshot"
		16 : "dieheadshot2"
		17 : "diesimple"
		18 : "diebackward"
		19 : "dieforward"
		20 : "pause"
		21 : "busting_through_wall"
		22 : "kick_punch_wall"
		23 : "bust_window"
		24 : "soda"
		25 : "slideidle"
		26 : "slidewall"
		27 : "ventclimbidle"
		28 : "ventclimb"
		29 : "deadidle"
		30 : "deadwall"
		31 : "freakdie"
		32 : "freak"
		33 : "eatbodytable"
		34 : "eatbody"
		35 : "eatbodystand"
		36 : "ripdoor"
		37 : "zombie_pull_scientist"
		38 : "zombie_eating"
		39 : "eat_to_stand"
		40 : "vent_zidle"
		41 : "vent_c1a3"
		42 : "haulzombie"
		43 : "c2a3_snack_getup"
	]
]
@PointClass base(DeadMonster) studio("models/zombie_barney.mdl") = monster_zombie_barney_dead : "Dead Barney Zombie"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 15 =
	[
		15 : "dieheadshot"
		19 : "dieforward"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/zombie_soldier.mdl") = monster_zombie_soldier : "Soldier Zombie"
[
	sequence(Choices) : "Animation Sequence (editor)" : 0 =
	[
		0 : "idle1"
		1 : "turnleft"
		2 : "turnright"
		3 : "flinchsmall"
		4 : "flinch"
		5 : "bigflinch"
		6 : "getup"
		7 : "falling"
		8 : "attack1"
		9 : "attack2"
		10 : "walk"
		11 : "laflinch"
		12 : "raflinch"
		13 : "llflinch"
		14 : "rlflinch"
		15 : "dieheadshot"
		16 : "dieheadshot2"
		17 : "diesimple"
		18 : "diebackward"
		19 : "dieforward"
		20 : "dead_on_back"
		21 : "dead_on_stomach"
		22 : "throw_scientist"
		23 : "get_off_table"
		24 : "table_breathe"
	]
]
@PointClass base(DeadMonster) studio("models/zombie_soldier.mdl") = monster_zombie_soldier_dead : "Dead Soldier Zombie"
[
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On back"
		1 : "On stomach"
	]
	sequence(Choices) : "Animation Sequence (editor)" : 20 =
	[
		20 : "dead_on_back"
		21 : "dead_on_stomach"
	]
]
@PointClass base(Monster, Sequence) size(-16 -16 0, 16 16 72) studio("models/gonome.mdl") = monster_gonome : "Gonome" 
[
	sequence(Choices) : "Animation Sequence (editor)" : 4 =
	[
		0 : "walk"
		1 : "runlong"
		2 : "runshort"
		3 : "idle1"
		4 : "idle2"
		5 : "victoryeat1"
		6 : "eat_loop"
		7 : "attack1"
		8 : "attack2"
		9 : "attack3"
		10 : "jump1"
		11 : "diebackward"
		12 : "dieforward"
		13 : "dieheadshot"
		14 : "dieheadshot"
		15 : "diesimple"
		16 : "big_flinch"
		17 : "small_flinch"
		18 : "flinch"
		19 : "dead_on_stomach1"
		20 : "dead_on_back"
		21 : "dead_on_stomach1"
		22 : "dead_on_side"
		23 : "sohappy"
	]
]
@PointClass base(DeadMonster) size(-16 -16 0, 16 16 72) studio("models/gonome.mdl") = monster_gonome_dead : "Dead Gonome"
[
	sequence(Choices) : "Animation Sequence (editor)" : 19 =
	[
		19 : "dead_on_stomach1"
		20 : "dead_on_back"
		21 : "dead_on_stomach1"
		22 : "dead_on_side"
	]
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On Stomach"
		1 : "On Back"
		2 : "On Side"
	]
]

@BaseClass base(Targetname, Angles) = MonsterMakerBase
[
	target(target_destination) : "Target On Release" : : "Targets which are fired whenever a monster is spawned."
	monstertype(string) : "Monster Type" : "monster_headcrab" : "Spawned monster's classname"
	netname(target_source) : "Childrens' Name (Targetname)" : : "The spawned monster will receive it as its targetname."

	monstercount(integer) : "Number of Monsters" : 1 : "How many monsters the monstermaker can create (-1 = unlimited)"
	delay(string) : "Delay between spawns (Frequency)" : "5" : "How often (seconds) a new monster will be made"
	m_imaxlivechildren(integer) : "Max live children" : 5 : "Maximum number of live children allowed at one time. (New ones will not be made until one dies, -1 = no limit)"

    spawnorigin(string) : "Spawn position [LP]" : : "By default acts as a typical position variable. When it starts with '@' the monstermaker will choose a random spot among ones with the same name (the rest of the string after '@'). It also applies the chosen entity angles."
	warpball(string) : "Warpball template" : : "The template name from templates/warpball.json or the name of the env_warpball entity used as effect template for this monstermaker"
	impulse(choices) : "Warp at monster's..." : : "If using warpball template, spawn warpball at this monster position" =
	[
		-1 : "Origin"
		0 : "Default (Center)"
		1 : "Center"
	]
	spawndelay(string) : "Delay before spawn" : : "If larger then zero or if the warpball template defines the 'spawn_delay' value, the monster spawn will be delayed by specified amount of time (in seconds). The hull is created in place of the future monster's spawn to make sure that monster will have enough place to spawn. Recommended to use with 'Auto size BBox' flag and 'Warpball template'. If less than zero, it forces no delay even if the warpball template defines the delay."
	delay_after_blocked(string) : "Delay after blocked" : : "Delay before the next spawn attempt if previous was blocked by another monster. If not specified, the 'Delay between spawns' parameter is used as a delay"
	target_activator(choices) : "Target's Activator" : : "Activator for 'Target On Release'" =
	[
		-1 : "Don't pass activator"
		0 : "Default (Monstermaker)"
		1 : "Monstermaker"
		2 : "Spawned monster"
		3 : "Forward my activator"
	]
	yawdeviation(integer) : "Max yaw deviation" : : "Maximum value for random yaw deviation, from 0 to the specified value, on both sides."
	weapons(Choices) : "Grunt/Assassin Weapons" =
	[
		0 : "Default"
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun / Sniperrifle"
		10 : "Shotgun / Sniperrifle + HG"
		16 : "Saw"
		18 : "Saw + HG"
	]
	trigger_target(String) : "TriggerTarget" : : "The event to trigger when the TriggerCondition is met. Used by monsters."
	trigger_condition(Choices) : "Trigger Condition" : : "This controls the condition under which a monster will trigger its TriggerTarget. The options are:" =
	[
		0 : "No Trigger"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	trigger_alt_condition(Choices) : "Trigger Alternative Condition" : : "Alternative condition to fire TriggerTarget (useful to make an important ally fire the same target both when either provoked or dead which is usually a load game condition)" =
	[
		0 : "No Trigger"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	new_model(studio) : "Custom model"
]

@BaseClass base(MonsterMakerBase, EntityTemplate, MonsterExtra, FollowingMonsterProps, CustomSentences) flags(Angle) size(-16 -16 0, 16 16 72) color(245 128 96) = MonsterMaker
[
	spawnflags(Flags) =
	[
		1 : "Start ON" 	: 0 : "Enabled on map start. Note that if the entity does not have a name it acts as Start ON no matter what."
	// 	2 : "PVS On/Off" : 0  // not implemented
		4 : "Cyclic" : 0 : "With this flag set, the entity will spawn one time every time it is fired."
		8 : "MonsterClip" : 0 : "Monsters spawned by a squadmaker with this flag set will be blocked by the func_monsterclip brush entity."
		16 : "Prisoner" : 0 : "The spawned monster won't attack its enemies and will be ignored by its enemies."
		32 : "Auto size BBox" : 1 : "When checking if the area is free to spawn, use the monster specific hull size instead of large one provided by default."
		64: "Cyclic backlog" : 0 : "Used with 'Cyclic' flag. Keep track of number of monsters who could not be spawned, e.g. because of blocking. Try to spawn them later. Useful when you want to ensure that the specific number of monsters will spawn."
		128 : "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Wait for script' flag"
		256 : "Pre-Disaster" : 0 : "The spawned talkmonster (e.g. scientist) will use pre-disaster sentences"
		1024: "Don't Drop Gun" : 0 : "The spawned monster won't drop items upon death."
		4096 : "Align to player" : 0 : "Spawned monsters will be aligned to the closest player increasing the chance of seeing the player right after the spawn."
		8192 : "Monster Flag 64" : 0 : "Set spawnflag 64 for spawned monster. E.g. used by vortigaunts as 'wait until provoked'"
		16384: "No ground check" : 0 : "Don't check if something prevents a monster to fall on ground upon spawning. Useful for spawning flying monsters and those who are supposed to fall on whatever underneath them"
		32768 : "Monster special flag" : 0 : "Set spawnflag 32768 for spawned monster"
		65536 : "Non-solid corpse" : 0 : "The spawned monster will become non-solid upon dying. Helps preventing dead corpses get into the way of moving entities like doors"
		524288 : "Ignore player pushing" : 0 : "Don't move away when player tries to push me (for following monsters)"
		1048576: "Act out of PVS" : 0 : "The spawned monster will act as usual even if there're no players in the PVS"
	]
	body(integer) : "Body"
	skin(integer) : "Skin"
	pose(integer) : "Pose (Only for dead monsters)" : : "Dead pose index. Should match the one in the spawned entity."
	gag(Choices) : "Gag" =
	[
		0 : "No"
		1 : "Yes"
	]
	head(integer) : "Head" : : "Settable head. Available only for monsters which have a separate body group for heads. The number must match the numbers used in specific monster"
	respawn_as_playerally(choices) : "Reverse Relationship" : : "Set inverted relationship with players. Sven Co-op compatible parameter. Simple alternative to custom classify." =
	[
		0 : "No"
		1 : "Yes"
	]
]
@PointClass base(MonsterMaker) = monstermaker : "Monster Maker" []
@PointClass base(MonsterMaker) = squadmaker : "Squad Maker" []

@PointClass base(Targetname) = motion_manager : "Control the movement and direction of an entity"
[
	target(target_destination) : "Target to affect [LE]" : "*locus"
	m_iszPosition(string) : "Position (blank = no change)"
	m_iPosMode(choices) : "Meaning of Position" : 0 =
	[
		0 : "Set position [LP]"
		1 : "Offset position [LV]"
		2 : "Set velocity [LV]"
		3 : "Accelerate by [LV]"
		4 : "Follow position [LV]"
	]
	m_iszFacing(string) : "Facing (blank = no change)"
	m_iFaceMode(choices) : "Meaning of Facing" : 0 =
	[
		0 : "Face direction [LV]"
		1 : "Rotate by [LV]"
		2 : "Rotate by (Y Z X)"
		3 : "Set avelocity (Y Z X)"
		4 : "Set angles [LA]"
	]
	spawnflags(flags) =
	[
		1: "Debug" : 0
		16: "Obey Trigger Mode" : 1
		32: "Start On" : 0
	]
]

@BaseClass = MultiManagerFlags
[
	spawnflags(Flags) =
	[
		1 : "Multi-threaded" : 0
		4 : "Reserved (don't use)" : 0 : "Reserved for Spirit 'Loop' flag"
		8 : "Once only" : 0
		16 : "Reserved (don't use)" : 0 : "Reserved for Spirit 'Start on' flag"
		32 : "Reserved (don't use)" : 0 : "Reserved for Spirit 'Debug mode' flag"
		1024 : "Instant" : 0 : "When called, start instantly on the same frame (only if there're targets with 0 delay)"
	]
]

@PointClass base(Targetname, MultiManagerFlags) color(255 128 0) iconsprite("sprites/multi_manager.spr") = multi_manager : "MultiTarget Manager. Use type of targets can be configured by adding #0 or #off (Off), #1 or #on (On), #2 or #kill (Kill) to their delay values." []

@PointClass base(Targetname, MultiManagerFlags) color(255 128 0) iconsprite("sprites/multi_manager.spr") = multi_trigger : "MultiTarget Trigger. Use this entity instead of multi_manager so JACK could draw connections to its targets."
[
	target1(target_destination) : "Target 1"
	delay1(string) : "Delay 1" : "0"
	target2(target_destination) : "Target 2"
	delay2(string) : "Delay 2" : "0"
	target3(target_destination) : "Target 3"
	delay3(string) : "Delay 3"
	target4(target_destination) : "Target 4"
	delay4(string) : "Delay 4"
	target5(target_destination) : "Target 5"
	delay5(string) : "Delay 5"
	target6(target_destination) : "Target 6"
	delay6(string) : "Delay 6"
	target7(target_destination) : "Target 7"
	delay7(string) : "Delay 7"
	target8(target_destination) : "Target 8"
	delay8(string) : "Delay 8"
	target9(target_destination) : "Target 9"
	delay9(string) : "Delay 9"
	target10(target_destination) : "Target 10"
	delay10(string) : "Delay 10"
	target11(target_destination) : "Target 11"
	delay11(string) : "Delay 11"
	target12(target_destination) : "Target 12"
	delay12(string) : "Delay 12"
	target13(target_destination) : "Target 13"
	delay13(string) : "Delay 13"
	target14(target_destination) : "Target 14"
	delay14(string) : "Delay 14"
	target15(target_destination) : "Target 15"
	delay15(string) : "Delay 15"
	target16(target_destination) : "Target 16"
	delay16(string) : "Delay 16"
]

@PointClass base(Targetname, MultiManagerFlags) color(170 85 0) = multi_sequence : "Same as multi_trigger, but delays are relative between adjacent targets."
[
	delay1(string) : "Delay before 1" : "0"
	target1(target_destination) : "Target 1"
	delay2(string) : "Delay between 1 and 2" : "0"
	target2(target_destination) : "Target 2"
	delay3(string) : "Delay between 2 and 3"
	target3(target_destination) : "Target 3"
	delay4(string) : "Delay between 3 and 4"
	target4(target_destination) : "Target 4"
	delay5(string) : "Delay between 4 and 5"
	target5(target_destination) : "Target 5"
	delay6(string) : "Delay between 5 and 6"
	target6(target_destination) : "Target 6"
	delay7(string) : "Delay between 6 and 7"
	target7(target_destination) : "Target 7"
	delay8(string) : "Delay between 7 and 8"
	target8(target_destination) : "Target 8"
	delay9(string) : "Delay between 8 and 9"
	target9(target_destination) : "Target 9"
	delay10(string) : "Delay between 9 and 10"
	target10(target_destination) : "Target 10"
	delay11(string) : "Delay between 10 and 11"
	target11(target_destination) : "Target 11"
	delay12(string) : "Delay between 11 and 12"
	target12(target_destination) : "Target 12"
	delay13(string) : "Delay between 12 and 13"
	target13(target_destination) : "Target 13"
	delay14(string) : "Delay between 13 and 14"
	target14(target_destination) : "Target 14"
	delay15(string) : "Delay between 14 and 15"
	target15(target_destination) : "Target 15"
	delay16(string) : "Delay between 15 and 16"
	target16(target_destination) : "Target 16"
]

@PointClass base(Targetname, Target) color(128 255 128) iconsprite("sprites/multisource.spr") = multisource : "Multisource"
[
	globalstate(string) : "Global State Master"
]

@PointClass base(Targetname) color(255 255 128) = particle_shooter : "Particle Shooter" 
[
	target(string) : "Shoot particles at [LP]" : : "This or 'Shooter direction' must be defined for the entity to work"
	direction(string) : "Shooter direction [LV]" : : "This or 'Shoot particles at' must be defined for the entity to work. This option has higher preference."
	position(string) : "Position to shoot from (blank = here) [LP]"

	//group_id(integer) : "Group Id" : 1
	num_particles(integer) : "Number of Particles ( -1 = infinite )" : 10
	fire_delay(string) : "Delay between shots" : "0.2"

	particle_life(string) : "particle life" : "4.0"

	particle_speed(string) : "Particle Speed" : "200"
	vel_variance(string) : "Velocity Variance" : "12"
	//spin_speed(integer) : "spin ( degrees per sec )" : 0
	gravity(string) : "Gravity" : "0.0"
	//damping_time(string) : "damping time" : "0.0"
	//damping_vel(string) : "damping velocity" : "0.0"

	spawnflags(Flags) = 
	[
		1 : "Repeatable" 	: 0
		2 : "Spiral" : 0
		4 : "Collide with world" : 0
		//8 : "Affected by force" : 0
		16 : "Animate" : 0
		32 : "Start on" : 0
		64 : "Kill on collide" : 0
		128 : "Reserved (don't use)" : 0 : "Reserved for 'Ripple when hitting water'"
	]

	model(sprite) : "Sprite" : "sprites/xsmoke1.spr"
	particle_size(string) : "particle size" : "16.0"

	//colour_red(integer) : "colour: red ( 0 - 255 )" : 255
	//colour_green(integer) : "colour: green ( 0 - 255 )" : 255
	//colour_blue(integer) : "colour: blue ( 0 - 255 )" : 255
	//brightness(string) : "brightness" : "190"

	fade_speed(string) : "Fade Speed" : "0.0"
	scale_speed(string) : "Scale Speed" : "1.0"
	framerate(string) : "Framerate" : "0"

	rendermode(choices) : "Render Mode" : 5 =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
	]
	renderamt(integer) : "FX Amount (1 - 255)" : "190"
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255"
]

@PointClass base(Targetname, Angles) flags(Path) size(16 16 16) color(247 181 82) = path_corner : "Moving platform stop"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport" : 0
		4: "Fire once" : 0
	]
	target(target_destination) : "Next stop target"
	message(target_destination) : "Fire On Pass"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0
]

@PointClass base(Targetname, Angles) flags(Path) size(16 16 16) = path_track : "Train Track Path"
[
	spawnflags(Flags) =
	[
		1: "Disabled" : 0
		2: "Fire once" : 0
		4: "Branch Reverse" : 0
		8: "Disable train" : 0
	]
	target(target_destination) : "Next stop target"
	message(target_destination) : "Fire On Pass"
	altpath(target_destination) : "Branch Path"
	netname(target_destination) : "Fire on dead end"
	speed(integer) : "New Train Speed" : 0
]

//
// player effects
//
@PointClass base(Targetname)  color(170 221 85) size(-12 -12 -12, 12 12 12) = player_calc_ratio : "Calc ratio of some player related value"
[
	calc_param(choices) : "Calc Param Type" : 0 =
	[
		0 : "Health"
		1 : "Armor"
		2 : "Ammo"
		3 : "Ammo, with clip"
		4 : "Inventory item count"
	]
	value_notion(choices) : "Calc value notion" : 0 =
	[
		0 : "Absolute"
		1 : "Fractional [0..1]"
	]
	ammo_name(choices) : "Ammo name" : "" =
	[
		"": ""
		"9mm" : "9mm bullets"
		"buckshot" : "Shotgun shells"
		"357" : "357 bullets"
		"ARgrenades" : "AR Grenades"
		"bolts" : "Crossbow bolts"
		"rockets" : "Rockets"
		"uranium" : "Uranium"
		"Hand Grenade" : "Hand Grenades"
		"Satchel Charge" : "Satchel Charges"
		"Trip Mine" : "Trip Mines"
		"Snarks" : "Snarks"
		"Medicine" : "Medkit Charge"
		"556" : "556 bullets"
		"762" : "762 bullets"
		"spores" : "Spores"
		"Hornets" : "Hornets"
		"Shocks" : "Shocks"
		"Penguins" : "Penguins"
	]
	"item_name"(string) : "Inventory item name"
]

@PointClass base(Targetname) = player_capabilities : "Enable/disable certain player's capabilities"
[
	attack_capability(choices) : "Attack capability" =
	[
		-1 : "Off"
		0 : "No change"
		1 : "On"
		2 : "Toggle"
		3 : "Copy use input"
	]
	jump_capability(choices) : "Jump capability" =
	[
		-1 : "Off"
		0 : "No change"
		1 : "On"
		2 : "Toggle"
		3 : "Copy use input"
	]
	duck_capability(choices) : "Duck capability" =
	[
		-1 : "Off"
		0 : "No change"
		1 : "On"
		2 : "Toggle"
		3 : "Copy use input"
	]
	use_capability(choices) : "Use capability" =
	[
		-1 : "Off"
		0 : "No change"
		1 : "On"
		2 : "Toggle"
		3 : "Copy use input"
	]
	stepsound_capability(choices) : "Step sounds" =
	[
		-1 : "Off"
		0 : "No change"
		1 : "On"
		2 : "Toggle"
		3 : "Copy use input"
	]
]

@PointClass base(Targetname) = player_deployweapon : "Force deploying a weapon"
[
	weapon_name(string): "Weapon name" : : "Classname of the weapon, e.g. weapon_9mmAR"
]

@PointClass base(Targetname) color(72 96 128) = player_hasitem : "Check if player has a specific item"
[
	item_type(choices) : "Item Type" : 0 =
	[
		0 : "Suit"
		1 : "Flashlight"
		2 : "NVG"
		3 : "Any light (flashlight or nvg)"
		4 : "Long Jump"
	]
	pass_target(target_destination) : "Pass Target"
	fail_target(target_destination) : "Fail Target"
]

@PointClass base(Targetname) color(72 96 128) = player_hasweapon : "Check if player has a specific weapon"
[
	weapon_name(string) : "Weapon name" : : "The entity name of the weapon to check. If omitted, it will check if player has any weapon"
	pass_target(target_destination) : "Pass Target"
	fail_target(target_destination) : "Fail Target"
]

@PointClass base(Targetname) = player_inventory : "Control player inventory. Max count per item is defined in templates/inventory.json"
[
	item_name(string): "Item name" : : "The inventory item name. Also used in player_hasinventory and player_calc_ratio. Special case: empty item name in combination with Decrease or Set operation and count = 0 means removing all items. 'Fire on' triggers don't fire in this case"
	operation(choices) : "Inventory operation" : 1 =
	[
		-1 : "Decrease by count"
		0 : "Depends on input"
		1 : "Increase by count"
		2 : "Set count"
	]
	count(integer): "Item Count" : 1 : "The number to decrease/increase by or set (depending on the operation)"
	on_count_change(target_destination): "Fire on count change" : : "Fire if the operation changed the count of item"
	on_max_count_limit(target_destination) : "Fire on max count limit" : : "Fire when can't give an item duplicate due to the max count limit for this item. This never fires when 'Allow overflow' spawnflag is ticked"
	on_count_overflow(target_destination) : "Fire on count overflow" : : "Fire when the new number of item duplicates would overflow the maximum allowed count. This won't fire if the max count is already overflown before the operation"
	on_item_limit(target_destination) : "Fire on item limit" : : "Fire when can't give a new item due to the max inventory item limit"
	spawnflags(Flags) =
	[
		1 : "Remove on fire" : 0
		2 : "Allow overflow" : 0 : "Allow max count overflow when increasing or setting the item count"
	]
]

@PointClass base(Targetname) color(72 96 128) = player_hasinventory : "Check if player has a specific inventory item"
[
	item_name(string) : "Item name"
	pass_target(target_destination) : "Pass Target"
	fail_target(target_destination) : "Fail Target"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_loadsaved : "Load Auto-Saved game"
[
	duration(string) : "Fade Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "6"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
	messagetime(string) : "Show Message delay" : "0.5"
	message(string) : "Message To Display" : ""
	loadtime(string) : "Reload delay" : "7"
	spawnflags(Flags) =
	[
		1 : "Freeze player" : 0
		2 : "Remove weapons" : 0
		128 : "Return to menu" : 0 : "Return to menu instead of loading the save"
	]
]

@PointClass base(Targetname) = player_speed : "Configure player's speed"
[
	maxspeed(string) : "Maxspeed multiplier [0=reset]" : 0
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_weaponstrip : "Strips player's weapons and items"
[
	spawnflags(Flags) =
	[
		1 : "Remove suit" : 0 : "Remove player's suit. The flashlight or nvg will be removed only if suit comes with one of them by default. Otherwise the 'Remove suit light' flag should be checked too"
		2 : "Remove suit light" : 0 : "Remove flashlight or nvg."
		4 : "Remove longjump" : 0
		8 : "Don't turn off suit light" : 0 : "By default in Half-Life any call to player_weaponstrip turns off the flashlight. Tick this flag to prevent such behavior. Flashlight is still getting turned off if suit or flashlight is removed."
	]
	noise(sound) : "Sound on trigger" : : "This will be played on player's item sound channel"
]

@PointClass base(Targetname) color(255 0 255) = scripted_following : "Scripted Following"
[
	entity(string) : "Affected Monster"
	on_start_following(target_destination) : "Fire on start following"
	on_stop_following(target_destination) : "Fire on stop following"
]

@PointClass base(Targetname) color(255 0 255) = scripted_schedule : "Scripted Schedule"
[
	entity(string) : "Affected Monster"
	schedule(choices) : "Suggested Schedule" : 1 = 
	[
		0 : "Clear suggested schedule"
		1 : "Move away from spot"
		2 : "Cover or retreat from spot"
		3 : "Investigate spot"
		4 : "Turn to spot"
		5 : "Move to spot"
	]
	mindist(string) : "Min distance" : : "Minimum distance for schedule, when applicable. E.g. the minimum distance to go away from the spot. If not specified or zero, the schedule will use its default value"
	maxdist(string) : "Max distance" : : "Maximum distance for schedule, when applicable. E.g. the maximum distance to go away from the spot. If not specified or zero, the schedule will use its default value"
	spot_entity(string) : "Spot entity" : : "Entity used as a spot for schedule. The effect depends on the schedule. Can be left empty, then monster will use itself as a spot or this scripted_schedule if Suggested Schedule is to Investigate spot or Turn to spot"
	move_preference(choices) : "Move preference" : : "Automatic means that move preference depends on the schedule type" =
	[
		0 : "Auto"
		1 : "Walk"
		2 : "Run"
	]
	spot_preference(choices) : "Spot preference" : : "'Entity' requires entity presense at the time the schedule is played. 'Position' means to calculate position of spot entity once and save it as spot for the schedule." =
	[
		0 : "Auto"
		1 : "Position"
		2 : "Entity"
	]
]

@PointClass base(Targetname, Targetx) size(-16 -16 0, 16 16 72) color(255 0 255) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) =
	[
		1 : "Fire Once" 	: 1
		2 : "Followers Only"	: 0
		4 : "Interrupt Speech"	: 1
		8 : "Make Friends Shut Up"	: 0
		16 : "Require listener"	: 0 : "Play sentence only if listener is present"
		32 : "Listener looks at speaker"	: 0 : "Make listener look at speaker if possible"
		256 : "Speaker turns to listener"	: 0
		512 : "Listener turns to speaker"	: 0
		4096 : "Try once"	: 0 : "By default once triggered the script will continue to search for the target monster if it could not find one instantly. This flag prevents such behavior"
	]
	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type [LE]"
	duration(string) : "Sentence Time" : "3"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	listener_radius(integer) : "Listener Search Radius" : : "If not present, it uses Search Radius"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
		4 : "Huge Radius"
		5 : "Enormous Radius"
	]
	required_state(choices) : "Required MonsterState" =
	[
		0 : "Any"
		1 : "Idle"
		2 : "Combat"
		3 : "Alert"
		4 : "Idle or Alert"
	]
	follow_action(choices) : "Follow action" : : "Start or stop following a player upon sentence start" =
	[
		0 : "No"
		1 : "Start following"
		2 : "Stop following"
	]
	target_activator(choices) : "Target's Activator" =
	[
		0 : "No (Default)"
		1 : "This script"
		2 : "Speaking monster"
		3 : "Forward my activator"
	]
	m_searchPolicy(choices) : "Search policy" : : "Search speaker monster by targetname or classname" =
	[
		0 : "Targetname, classname"
		1 : "Targetname only"
		2 : "Classname only"
	]
]

@PointClass base(ScriptedSequence) = scripted_sequence : "Scripted Sequence"
[
	spawnflags(Flags) =
	[
		64: "Override AI"	: 0
	]
]

@PointClass base(ScriptedSequence) = scripted_action : "Scripted action"
[
	m_iszAttack(string) : "Entity to attack (blank = this) [LE]"
	m_fAction(choices) : "Action to perform" : 0 =
	[
		0 : "Ranged Attack"
		1 : "Ranged Attack 2"
		2 : "Melee Attack"
		3 : "Melee Attack 2"
		4 : "Special Attack"
		5 : "Special Attack 2"
		6 : "Reload"
		7 : "Jump"
		8 : "No action"
	]
	spawnflags(Flags) =
	[
		64: "Override AI"	: 0
	]
]

@PointClass iconsprite("sprites/speaker.spr") base(Targetname) = speaker : "Announcement Speaker"
[
	preset(choices) :"Announcement Presets" : 0 =
	[
		0: "None"
		1: "C1A0 Announcer"
		2: "C1A1 Announcer"
		3: "C1A2 Announcer"
		4: "C1A3 Announcer"
		5: "C1A4 Announcer"
		6: "C2A1 Announcer"
		7: "C2A2 Announcer"
		// 8: "C2A3 Announcer"
		9: "C2A4 Announcer"
		// 10: "C2A5 Announcer"
		11: "C3A1 Announcer"
		12: "C3A2 Announcer"
	]
	message(string) : "Sentence Group Name"
	health(integer) : "Volume (10 = loudest)" : 5
	spawnflags(flags) =
	[
		1: "Start Silent" : 0
	]
]

@PointClass base(Targetname) = target_cdaudio : "CD Audio Target"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
	radius(string) : "Player Radius"
]

//
// Triggers
//

@PointClass base(Targetx) iconsprite("sprites/trigger_auto.spr") = trigger_auto : "AutoTrigger"
[
	spawnflags(Flags) =
	[
		1 : "Remove On fire" : 1
	]
	globalstate(string) : "Global State to Read"
	triggerstate(choices) : "Trigger State" : 2 =
	[
		0 : "Off"
		1 : "On"
		2 : "Toggle"
	]
]

@SolidClass base(Targetname) = trigger_autosave : "AutoSave Trigger"
[
	master(string) : "Master"
	health(string) : "Minimum Hit Points" : : "Don't save when player has less than this many hitpoints."
]

@PointClass base(Targetx, Targetname) iconsprite("sprites/trigger_camera.spr") = trigger_camera : "Trigger Camera"
[
	wait(integer) : "Hold time" : 10
	moveto(string) : "Path Corner"
	spawnflags(flags) =
	[
		1: "Start At Player" : 1
		2: "Follow Player" : 1
		4: "Freeze Player" : 0
		8: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'All Players' flag"
		16: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Force View' flag"
		32: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'No Instant Turn' flag"
		64: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Instant Move' flag"
		128: "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Mouse Cursor' flag"
		256: "Player Invulnerable" : 0 : "Player cannot be hurt when camera is active"
		512: "Ignore Hold Time" : 0 : "Camera ignores hold time and will be turned off when re-triggered"
		1024: "Alive player only" : 0
		4096: "Don't fire look target" : 0 : "By default trigger_camera triggers the Target it uses to look at when it releases the player's view. Tick this flag to prevent this weird behavior."
	]
	speed(string) : "Initial Speed" : "0"
	acceleration(string) : "Acceleration units/sec^2" : "500"
	deceleration(string) : "Stop Deceleration units/sec^2" : "500"
	stop_by_player_input(choices) : "Stop by player input" =
	[
		0 : "No"
		1 : "USE input"
	]
	m_iszTurnedOffTarget(target_destination) : "Target when turned off" : : "Target to trigger when camera is turned off (e.g. when camera hold time expires or camera is set to off via trigger)."
]

@SolidClass base(Targetname) = trigger_cdaudio : "Trigger CD Audio"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
]

@PointClass base(Targetname, Target, Classification) color(128 96 2) = trigger_change_class : "Trigger Change Class" []

@SolidClass = trigger_changelevel : "Trigger: Change level"
[
	targetname(target_source) : "Name"
	map(string) : "New map name"
	landmark(string) : "Landmark name"
	changetarget(target_destination) : "Change Target"
	changedelay(string) : "Delay before change target" : "0"
	spawnflags(flags) =
	[
		1: "No Intermission" : 0
		2: "USE Only" : 0
	]
]

@PointClass base(Targetname) iconsprite("sprites/trigger_changetarget.spr") = trigger_changetarget : "Trigger Change Target"
[
	target(string) : "Entity to affect [LE]"
	m_iszNewTarget(string) : "New Target [LE]"
]

@PointClass base(Targetname) = trigger_changevalue : "Change any entity's values. Use it only you're absolutely sure what you're doing. Direct intervention to the entity's values might lead to unexpected or even nasty results."
[
	spawnflags(Flags) =
	[
		// For Vectors:
		1 : "Don't use X" : 0
		2 : "Don't use Y" : 0
		4 : "Don't use Z" : 0
	]
	target(target_destination) : "Destination entity [LE]"
	m_iszValueName(string) : "Destination key"
	m_iszNewValue(string) : "Source value" : : "Depending on the 'Treat source value as' it's either a literal value or the name of the entity to calc Ratio/Position/Velocity from and use it as a source value"
	m_iszValueType(choices) : "Action" :  0 : "This specifies how destination keyvalue and static source-value correlate. What exactly happens also depends on the types of the two. While 'Replace' works on all parameters, other actions work only on the limited set of keyvalues (as they require reading of the original value by key which is not straightforward operation in Half-Life). If both the original value and the source value are vectors, it does a component-wise operation, e.g. {o.x * s.x, o.y * s.y, o.z * s.z} where 'o' is an original vector and 's' is a source vector. If the original value is vector and the source value is scalar, it applies operation to all components, e.g. {o.x + s, o.y + s, o.z + s} where 'o' is an original vector and 's' is a source scalar." =
	[
		0 : "Replace (= source)"
		1 : "Add (= old + source)"
		2 : "Mul (= old * source)"
		3 : "Sub (= old - source)"
		4 : "Div (= old / source)"
	]
	message(target_destination) : "Trigger after operation" : : "Trigger entities after the value was set. This can call another trigger_changevalue without any delay so it's useful for chained operations."
	value_type(choices) : "Treat source value as" =
	[
		0 : "Literal value"
		1 : "Locus Ratio"
		2 : "Locus Position"
		3 : "Locus Velocity"
	]
]

@PointClass base(Targetname) = trigger_check_state : "Check entity's state"
[
	entity(string) : "Entity to check"
	target(target_destination) : "Target (on & off)"
	fire_if_off(target_destination) : "Fire if off"
	fire_if_on(target_destination) : "Fire if on"
	fire_if_absent(target_destination) : "Fire if absent"
]

@PointClass base(Targetname) = trigger_command : "Console Command"
[
	netname(string) : "Command String"
]

@PointClass base(Targetname) = trigger_compare : "Examine relationship between two numbers"
[
	initial_value(string) : "Base Value [LR]" : 0
	compare_value(string) : "Compare Value [LR]" : 0
	testtype(choices) : "Comparison to pass" =
	[
		0 : "Equal"
		1 : "Greater or equal"
		2 : "Greater"
		3 : "Less or equal"
		4 : "Less"
		5 : "Not equal"
	]
	pass_target(target_destination) : "Fire On Comparison Pass"
	fail_target(target_destination) : "Fire On Comparison Fail"
	trigger_on_equal(target_destination) : "Fire On Equal To"
	trigger_on_not_equal(target_destination) : "Fire On Not Equal To"
	trigger_on_less(target_destination) : "Fire On Less Than"
	trigger_on_greater(target_destination) : "Fire On Greater Than"
	trigger_on_fail(target_destination) : "Fire On Calc Fail"
]

@BaseClass = TriggerConfigureMonsterBase
[
	target(string) : "Entity to affect"
	gag_flag(choices) : "'Gag' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	monsterclip_flag(choices) : "'Monsterclip' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	prisoner_flag(choices) : "'Prisoner' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	predisaster_flag(choices) : "'Pre-Disaster' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	dont_drop_gun_flag(choices) : "Don't Drop Gun flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	act_out_of_pvs(choices) : "'Act out of PVS' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	classify(choices) : "Classification" : : "Relationship class of monster" =
	[
		-2 : "Reset to default"
		-1 : "None"
		0 : "No change"
		1 : "Machine"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	prisonerto(choices) : "Act as Prisoner to" : : "Ignore and get ignored by this class" =
	[
		-1 : "Reset"
		0 : "No change"
		1 : "Machine"
		2 : "Player"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	soundmask(choices) : "Sound Mask" : : "Types of sound the monster regards" =
	[
		-2 : "Reset to default"
		-1 : "No sounds (Deaf)"
		0 : "No change"
		32 : "Only Danger"
		33 : "Only Combat and Danger"
		37 : "Combat, Danger and Player"
		127 : "Every sound and scent"
		1028 : "Default, except Player"
	]
	bloodcolor(choices) : "Blood Color" : : "Blood color of monster" =
	[
		-1 : "Don't bleed"
		0 : "No change"
		247 : "Human (red)"
		195 : "Alien (yellow)"
	]
	prisonerto(choices) : "Act as Prisoner to" =
	[
		-1 : "Reset"
		0 : "No change"
		1 : "Machine"
		2 : "Player"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	ignoredby(choices) : "Ignored by classify" =
	[
		-1 : "Reset"
		0 : "No change"
		1 : "Machine"
		3 : "Human passive"
		4 : "Human military"
		5 : "Alien military"
		6 : "Alien passive"
		7 : "Alien monster"
		8 : "Alien prey"
		9 : "Alien predator"
		10 : "Insect"
		11 : "Player ally"
		12 : "Player bioweapon"
		13 : "Alien bioweapon"
		14 : "Race X predator"
		15 : "Race X shock"
		16 : "Opfor ally"
		17 : "Blackops"
		18 : "Snark"
		19 : "Gargantua"
	]
	TriggerTarget(String) : "TriggerTarget" : : "The event to trigger when the TriggerCondition is met. Setting 'null' means clearing the trigger target."
	TriggerCondition(Choices) : "Trigger Condition" : : "This controls the condition under which a monster will trigger its TriggerTarget. The options are:" =
	[
		-1 : "Remove condition"
		0 : "No change"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	TriggerAltCondition(Choices) : "Trigger Alternative Condition" : : "Alternative condition to fire TriggerTarget (useful to make an important ally fire the same target both when either provoked or dead which is usually a load game condition)" =
	[
		-1 : "Remove condition"
		0 : "No change"
		1 : "See Player, Mad at Player"
		2 : "Take Damage"
		3 : "50% Health Remaining"
		4 : "Death"
		7 : "Hear World"
		8 : "Hear Player"
		9 : "Hear Combat"
		10: "See Player Unconditional"
		11: "See Player, Not In Combat"
	]
	provoked_state(choices) : "Provoked state" =
	[
		-1 : "Stop being provoked"
		0 : "No change"
		1 : "Provoke"
	]
	tolerance(choices) : "Tolerance level" : : "Tolerance to player's hits" =
	[
		-1 : "Default for monster" : "Monster-specific behavior"
		0 : "No change"
		1 : "Zero" : "Get provoked on any hit"
		2 : "Low" : "Get provoked by direct hit or on second hit"
		3 : "Average" : "Get provoked by some hits"
		4 : "High" : "Get provoked by some hits, but tends to forgive after some time"
		5 : "Absolute" : "Never get provoked"
		6 : "Absolute, don't alert friends" : "Never get provoked, don't alert friends upon death"
	]
	ignore_push_flag(choices) : "'Ignore Player Push' flag" =
	[
		-1 : "Remove flag"
		0 : "No change"
		1 : "Add flag"
	]
	freeroam(choices) : "Monster Roaming (nodes)" =
	[
		-1 : "Reset to Map Default"
		0 : "No change"
		1 : "Never"
		2 : "Always"
	]
	size_for_grapple(choices) : "Size For Grapple" =
	[
		-2 : "Reset to default"
		-1 : "Not a Target"
		0 : "No change"
		1 : "Small"
		2 : "Medium"
		3 : "Large"
		4 : "Fixed"
	]
	gib_policy(choices) : "Gibbing policy" =
	[
		-1 : "Reset to default"
		0 : "No change"
		1 : "Always gib"
		2 : "Never gib"
	]
]

@PointClass base(Targetname, TriggerConfigureMonsterBase, CustomSentences) = trigger_configure_monster : "Change some monster's parameters and flags" []

@SolidClass base(Trigger) = trigger_counter : "Trigger counter"
[
	master(string) : "Master"
	count(integer) : "Count before activation" : 2
]

@SolidClass base(Targetname) = trigger_endsection : "EndSection Trigger"
[
	section(string) : "Section"
	spawnflags(flags) =
	[
		1: "USE Only" : 0
	]
]

@PointClass base(Targetname) size(-12 -12 -12, 12 12 12) color(255 255 0) = trigger_entity_iterator : "Entity Iterator"
[
	name_filter(target_destination) : "Filter Entities by Name"
	classname_filter(string) : "Filter Entities by Classname"
	status_filter(choices) : "Filter Entities by Status" : 1 =
	[
		0 : "No Filter (default)"
		1 : "Only Living Entities"
		2 : "Only Dead Entities"
	]
	target(target_destination) : "Entity's Trigger Target"
	triggerstate(choices) : "Entity's Trigger State" : 2 =
	[
		0 : "Off"
		1 : "On"
		2 : "Toggle"
	]
	trigger_after_run(target_destination) : "Trigger at end of each Run" : : "Trigger something after the full run has been completed. The original activator is forwarded."
	maximum_runs(integer) : "Maximum Runs (0 for unlimited)"
]

@SolidClass base(Trigger) = trigger_gravity : "Trigger Gravity"
[
	gravity(integer) : "Gravity (0-1)" : 1
]

@BaseClass = DamageType
[
	damagetype(choices) : "Damage Type" : 0 =
	[
		0 : "GENERIC"
		1 : "CRUSH"
		2 : "BULLET"
		4 : "SLASH"
		8 : "BURN"
		16 : "FREEZE"
		32 : "FALL"
		64 : "BLAST"
		128 : "CLUB"
		256 : "SHOCK"
		512 : "SONIC"
		1024 : "ENERGYBEAM"
		16384: "DROWN"
		32768 : "PARALYSE"
		65536 : "NERVEGAS"
		131072 : "POISON"
		262144 : "RADIATION"
		524288 : "DROWNRECOVER"
		1048576 : "CHEMICAL"
		2097152 : "SLOWBURN"
		4194304 : "SLOWFREEZE"
	]
]

@BaseClass = GibbingPolicy
[
	gib_policy(choices) : "Gibbing policy" =
	[
		0 : "Default"
		1 : "Always gib"
		2 : "Never gib"
	]
]

@SolidClass base(Targetname, Target, DamageType, GibbingPolicy) = trigger_hurt : "Trigger player hurt"
[
	spawnflags(flags) =
	[
		1: "Target Once" : 0
		2: "Start Off" : 0
		8: "No clients" : 0
		16:"FireClientOnly" : 0
		32:"TouchClientOnly" : 0
		64:"Affect non-moving NPC's" : 0 : "Uses entity's bounding box to find and hurt non-moving monsters. Will produce wrong results on non-cuboid brush shapes."
		128:"Full dmg every 0.5 seconds" : 0 : "Do full damage (or healing) instead of halving the value. Recommended to use with odd values."
		256:"Ignore Armor" : 0
		512:"No Camera Punch" : 0
	]
	master(string) : "Master"
	dmg(integer) : "Damage" : 10 : "The damage is applied every 0.5 seconds. Negative value means healing. The value is getting halved, unless 'Full dmg every 0.5 seconds' spawnflag is set."
	delay(string) : "Delay before trigger"
	untouchable_ent_name(string) : "Untouchable entity name" : : "Don't hurt targets with this classname or targetname"
	min_health(string) : "Minimum health threshold" : : "Don't decrease the toucher health beyond this value"
]

@PointClass base(Targetname, Target, DamageType, GibbingPolicy) = trigger_hurt_remote : "Trigger Hurt (non-touch)"
[
	spawnflags(Flags) =
	[
		1 : "Instant Kill" : 0
		2 : "Constant" : 0
		4 : "Start On" : 0
		8 : "Do Armor Damage" : 0
		256:"Ignore Armor" : 0
		512:"No Camera Punch" : 0
	]
	target(string) : "Target [LE]"
	targetclass(string) : "Target Classname" : : "If specified, all entities with the given classname will be affected. This is independent from Target, which means the entity might cause damage twice to the same entity if Target is class of Target Class."
	dmg(integer) : "Damage" : 10 : "Damage to deal. If 'Constant' flag is selected, this is a damage to deal every 'Delay' seconds. Can be negative to provide healing instead of dealing damage."
	delay(string) : "Delay (Only when Constant)" : "1"
	min_health(string) : "Minimum health threshold" : : "Don't decrease the toucher health beyond this value"
	armordmg(string) : "Armor damage" : : "Deal damage to armor. Works only if 'Do Armor' flag is selected. When target is out of armor, the damage is not dealt. Can be negative to give an armor instead of draining it."
]

@PointClass base(Targetname) = trigger_killmonster : "Trigger Kill Monster"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 1
		16: "Always gib" : 0
	]
	target(target_destination) : "Monster's Name" : : "Kill all monsters with such targetname, given they also are of specific class and squad (if set)"
	message(string) : "Monster's Classname" : : "Kill all monsters with such classname, given they also are of specific name and squad (if set)"
	netname(string) : "Monster's Squad name" : : "Kill all monsters with such squad name, given they also are of specific name and class (if set)"
]

@SolidClass base(Targetname) = trigger_look : "Trigger something when the player looks at something"
[
	spawnflags(flags) =
	[
		1: "Remove On Fire" : 1
	]
	netname(target_destination) : "Look Target"
	look_time(string) : "Look Time" : 1 : "The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold."
	field_of_view(string) : "Field Of View" : 0.7 : "How close the player has to be looking at the target. 1.0 = straight ahead\n 0.0 = +/- 90 degrees\n -1.0 = all directions)."
	target(target_destination) : "Trigger on look"
	killtarget(target_destination) : "Kill target"
	delay(string) : "Delay before trigger"
	master(string) : "Master"
]

@SolidClass base(Angles) = trigger_monsterjump : "Trigger monster jump"
[
	master(string) : "Master"
	speed(integer) : "Jump Speed" : 40
	height(integer) : "Jump Height" : 128
]

@PointClass base(Targetname) = trigger_motion : "Set the position and movement of an entity"
[
	target(target_destination) : "Target to affect [LE]"
	m_iszPosition(string) : "Position (blank = no change)"
	m_iPosMode(choices) : "Meaning of Position" : 0 =
	[
		0 : "Set new position [LP]"
		1 : "Add offset [LV]"
	]
	m_iszAngles(string) : "Angles (blank = no change)"
	m_iAngMode(choices) : "Meaning of Angles" : 0 =
	[
		0 : "Set new angle [LV]"
		1 : "Rotate by [LV]"
		2 : "Rotate by (Y Z X)"
	]
	m_iszVelocity(string) : "Velocity (blank = no change)"
	m_iVelMode(choices) : "Meaning of Velocity" : 0 =
	[
		0 : "Set new velocity [LV]"
		1 : "Add to velocity [LV]"
		2 : "Rotate velocity by [LV]"
		3 : "Rotate velocity (Y Z X)"
	]
	m_iszAVelocity(string) : "AVelocity (blank = no change)"
	m_iAVelMode(choices) : "Meaning of AVelocity" : 0 =
	[
		0 : "Set new avelocity (Y Z X)"
		1 : "Add to avelocity (Y Z X)"
	]
	spawnflags(flags) =
	[
		1: "Debug" : 0
	]
]

@PointClass base(Targetname) = trigger_mp3audio : "Play mp3 audio. The audio will be played at the music volume as configured by user"
[
	message(script) : "Track name"
	spawnflags(flags) =
	[
		1: "Remove on fire" : 0
		2: "Looped" : 0
	]
]

@BaseClass = TriggerUseType
[
	usetype(choices) : "Use type" =
	[
		-1 : "Off"
		0 : "Toggle"
		1 : "On"
	]
]

@SolidClass base(Trigger, TriggerCond, TriggerUseType) = trigger_multiple : "Trigger: Activate multiple"
[
	wait(integer) : "Delay before reset" : 10
]

@SolidClass base(Trigger, TriggerCond, TriggerUseType) = trigger_once : "Trigger: Activate once" []

@SolidClass base(Targetname,Target) = trigger_geneworm_hit : "Trigger GeneWorm Hit"
[
	spawnflags(flags) =
	[
		1: "Target Once" : 0
		2: "Start Off" : 0
		8: "No clients" : 0
		16:"FireClientOnly" : 0
		32:"TouchClientOnly" : 0
	]
	master(string) : "Master"
	delay(string) : "Delay before trigger"
]

@PointClass base(Targetname) = trigger_playerfreeze : "Trigger Player Freeze"
[
	use_type(choices) : "Use type" =
	[
		-1 : "Unfreeze"
		0 : "Toggle freeze"
		1 : "Freeze"
		2 : "Copy input"
	]
]

@SolidClass base(Trigger, Angles) = trigger_push : "Trigger player push"
[
	spawnflags(flags) =
	[
		1: "Once Only" : 0
		2: "Start Off" : 0
		8: "No clients": 0
		16: "No monsters": 0
	]
	speed(integer) : "Speed of push" : 40
	m_iszPushSpeed(string) : "Push speed multiplier [LR]"
	m_iszPushVel(string) : "Push direction (blank = angle) [LV]"
]

@BaseClass = Random
[
	target_count(integer) : "Target Count" : : "Amount of random targets you have specified. This is now optional and left for compatibility with Sven Co-op trigger_random"
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"
	target5(target_destination) : "Target 5"
	target6(target_destination) : "Target 6"
	target7(target_destination) : "Target 7"
	target8(target_destination) : "Target 8"
	target9(target_destination) : "Target 9"
	target10(target_destination) : "Target 10"
	target11(target_destination) : "Target 11"
	target12(target_destination) : "Target 12"
	target13(target_destination) : "Target 13"
	target14(target_destination) : "Target 14"
	target15(target_destination) : "Target 15"
	target16(target_destination) : "Target 16"
]

@PointClass base(Targetname, Random) color(255 230 150) = trigger_random : "Trigger Random"
[
	spawnflags(flags) =
	[
		1 : "Start on (Timed only)" : 0
		2 : "Trigger Once (Timed only)" : 0
		4 : "Reusable (Unique only)" : 0
		8 : "Timed" : 0
		16 : "Unique" : 0
		32 : "Not repetitive" : 0 : "Don't repeat the same target twice in a row. Targets still can be repeated if there're several with the same name."
		64 : "Scheduled order" : 0 : "Makes trigger_random infinitely schedule the order in which it fires its targets beforehand. If player loads the saved game the trigger_random will fire its targets in the same scheduled order. This prevents player from getting 'the best outcome' just by loading the save again and again until they're satisfied with the result. The schedule is getting defined at the map load, so technically player still can circumvent the restriction by loading the save from a previous map and going through the changelevel to the new map again which will yield a different schedule for trigger_random. This should be fixed in future."
		128 : "Scheduled delays (Timed only)" : 0 : "Makes trigger_random infinitely schedule the values of timed delays beforehand. If player loads the saved game the trigger_random will use the same delays as it scheduled originally."
	]
	min_delay(string) : "Minimum delay (Timed only)"
	max_delay(string) : "Maximum delay (Timed only)"
	trigger_number(integer) : "Trigger number limit (Timed only)" : : "Automatically stop after triggering this number of targets (including empty ones, if present). This was not in Sven Co-op and a special addition. A flexible replacement for Trigger Once flag."
	trigger_on_limit(target_destination) : "Trigger on limit (Timed only)" : : "Trigger when the trigger limit is reached"
	trigger_on_exhaust(target_destination) : "Trigger on exhaust (Unique only)" : : "Fire when last unique target is called. Will be fired again if trigger_random is Reusable and it drains the unique targets another time."
	first_target(integer) : "Index of first target (1-16)" : : "First target to fire on the first entity call. 0 means no preference."
]

@PointClass base(Targetname, Random) = trigger_random_time : "Trigger Random Time. Outdated entity for Sven Co-op 3.0 compatibility."
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Trigger Once" : 0
	]
	min_delay(string) : "Minimum Delay (0 = off)" : "3.0"
	max_delay(string) : "Maximum Delay (0 = off)" : "7.0"
]

@PointClass base(Targetname, Random) = trigger_random_unique : "Trigger Random Unique. Outdated entity for Sven Co-op 3.0 compatibility."
[
	spawnflags(Flags) =
	[
		1 : "Re-usable" : 0
	]
]

@PointClass base(Targetname, Targetx) iconsprite("sprites/trigger_relay.spr") = trigger_relay : "Trigger Relay"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
		64: "Forward activator" : 0 : "Forward my activator when triggering my target. Without this flag trigger_relay passes itself as an activator."
		128: "Pass caller as activator" : 0 : "Pass my caller as activator when triggering my target. This has higher priority than 'Forward activator'."
	]
	triggerstate(choices) : "Trigger State" : 2 =
	[
		-2: "Reverse Input"
		-1: "Copy Input"
		0: "Off"
		1: "On"
		2: "Toggle"
	]
	m_flDelayBeforeReset(string) : "Delay Before Reset"
]

@PointClass base(Target, Targetname) size(-16 -16 -16,16 16 16) = trigger_respawn :"Trigger Respawn. Sven Co-op compatibility entity"
[
	spawnflags(flags) =
	[
		4: "Don't Move Living Players" : 0 : "If set, living players won't be relocated to spawnpoints."
	]
]

@SolidClass base(Targetname, RoomType) = trigger_sound : "Brush-based DSP Sound"
[
	target(target_destination) : "Fire when activated"
	delay(string) : "Delay before trigger"
	killtarget(target_destination) : "KillTarget"
	master(string) : "Master"
]

@PointClass base(Targetname) = trigger_startpatrol : "Trigger Start Patrol"
[
	target(string) : "Target monster [LE]"
	m_iszPath(target_destination) : "Patrol path start"
]

@PointClass base(Targetname, Target) color(255 230 150) = trigger_timer : "Continuously fire its target over random delays. trigger_timer can be activated with 'On' use. trigger_timer stops firing its target if it was triggered with 'Off' use or if upon reaching the trigger number limit if there's one. 'Toggle' use toggles trigger_timer's state."
[
	spawnflags(flags) =
	[
		1 : "Start on" : 0 : "Automatically activate trigger_timer on the first map load"
		32 : "Don't delay first fire" : 0 : "Don't use random delay on the first target fire upon the activation"
		64 : "Forward activator" : 0 : "Forward my activator when triggering my target. Without this flag trigger_timer passes itself as an activator."
		128 : "Scheduled delays" : 0 : "Makes trigger_timer infinitely schedule the values of timed delays beforehand. If player loads the saved game the trigger_timer will use the same delays as it scheduled originally."
		256 : "Don't reset trigger counter on deactivation" : 0 : "If 'Trigger number limit' is defined, when trigger_timer is turned off due to the external trigger, don't reset the trigger counter to 0. This allows to activate trigger_timer later with the preserved trigger counter. If trigger counter reaches the trigger number limit it will still naturally reset to 0 and deactivate."
	]
	min_delay(string) : "Minimum delay" : "0.5"
	max_delay(string) : "Maximum delay" : "1.0"
	trigger_number(integer) : "Trigger number limit" : : "Automatically stop after triggering the target this number of times. After that trigger_timer can be reactivated again. 0 means no limit."
	trigger_on_limit(target_destination) : "Trigger on limit" : : "Trigger when the trigger limit is reached"
]

@BaseClass = TeleportRandomDest
[
	spawnflags(flags) = 
	[
		64 : "Random Destination" : 0 : "If multiple targets are set, one will be chosen as the destination randomly for every single player as he enters the trigger."
	]
]
@BaseClass = TeleportKeepFlags
[
	spawnflags(flags) = 
	[
		256 : "Keep Angles" : 0 : "Keep player's angles"
		512 : "Keep velocity" : 0 : "Keep player's velocity"
	]
]
@BaseClass base(Targetname, TeleportKeepFlags) = TriggerTeleport
[
	master(string) : "Master"
	teleport_start_inactive(choices) : "Start Inactive" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(TriggerTeleport, TriggerCond, TeleportRandomDest) = trigger_teleport : "Trigger teleport"
[
	target(target_destination) : "Destination point" : : "Name of the entity which the player is teleported to. Ideally an info_teleport_destination entity."
	message(target_destination) : "Landmark entity" : : "Point entity (e.g. info_target or info_teleport_destination) that is usually put inside the trigger_teleport brush. The player will be teleported to the destination using the relative distance. If landmark and destination entities have different yaw angles, the player will be rotated appropriately as well. This allows for making 'seemless' teleports. This is alternative to 'Relative Teleport' spawnflag. If landmark is defined the velocity is always kept."
	spawnflags(flags) =
	[
		128 : "Relative Teleport" : 0 : "The player's destination will be the location of the destination plus his offset from the trigger_teleport's origin in the moment of the player entering the trigger. trigger_teleport is expected to have an origin brush."
	]
]

@PointClass base(Targetname, TeleportRandomDest, TeleportKeepFlags) = trigger_player_teleport : "Move player to the specified position."
[
	target(target_destination) : "Destination point" : : "Name of the entity which the player is teleported to. If omitted trigger_player_teleport acts as a teleport position itself."
]

@PointClass base(Targetname) color(85 255 255) = trigger_skill_test : "Compare skill level to the number"
[
	testtype(choices) : "Comparison to pass" : 0 =
	[
		0 : "Equal"
		1 : "Greater or equal"
		2 : "Greater"
		3 : "Less or equal"
		4 : "Less"
		5 : "Not equal"
	]
	comparand(choices) : "Compare skill to" : 3 =
	[
		1 : "Easy"
		2 : "Medium"
		3 : "Hard"
	]
	target(target_destination) : "Fire on comparison pass"
	target_on_fail(target_destination) : "Fire on comparison fail"
	trigger_on_easy(target_destination) : "Fire on Easy"
	trigger_on_medium(target_destination) : "Fire on Medium"
	trigger_on_hard(target_destination) : "Fire on Hard"
]

@SolidClass base(Targetname) = trigger_transition : "Trigger: Select Transition Area" []

@SolidClass base(TriggerTeleport) = trigger_xen_return : "Return To Earth" []

//
// weapons
//

@BaseClass = WeaponInitAmmo
[
	initammo(string) : "Custom Initial Ammo"
]

@PointClass base(Weapon) studio("models/w_crowbar.mdl") = weapon_crowbar : "Crowbar" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_9mmhandgun.mdl") = weapon_9mmhandgun : "9mm Handgun" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_357.mdl") = weapon_357 : "357 Handgun" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_9mmar.mdl") = weapon_9mmAR : "9mm Assault Rifle" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_shotgun.mdl") = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_rpg.mdl") = weapon_rpg : "RPG" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_gauss.mdl") = weapon_gauss : "Gauss Gun" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_crossbow.mdl") = weapon_crossbow : "Crossbow"
[
	sequence(choices) : "Placement" : 0 =
	[
		0 : "Normal (flat)"
		1 : "Realistic (tilted)"
	]
]
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_egon.mdl") = weapon_egon : "Egon Gun" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/v_tripmine.mdl") body(3) sequence(8) size(-16 -16 -5, 16 16 27) = weapon_tripmine : "Tripmine Ammo" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_satchel.mdl") = weapon_satchel : "Satchel Charge Ammo" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_grenade.mdl") = weapon_handgrenade : "Handgrenade Ammo" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_sqknest.mdl") = weapon_snark : "Squeak Grenade"
[
	sequence(Choices) : "Animation Sequence (editor)" : 1 =
	[
		0 : "walk"
		1 : "idle"
	]
]
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_hgun.mdl") = weapon_hornetgun : "Hornet Gun" []
@PointClass base(Pickup) size(-16 -16 0, 16 16 64) color(0 128 0) studio("models/w_weaponbox.mdl") =  weaponbox : "Weapon/Ammo Container" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_desert_eagle.mdl") = weapon_eagle : "Desert Eagle" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_penguinnest.mdl") = weapon_penguin : "Killer Penguin" []
@PointClass base(Weapon) studio("models/w_pipe_wrench.mdl") = weapon_pipewrench : "Pipe Wrench" []
@PointClass base(Weapon) studio("models/w_knife.mdl") = weapon_knife : "Knife" []
@PointClass base(Weapon) studio("models/w_bgrap.mdl") = weapon_grapple : "Barnacle Grapple" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_shock_rifle.mdl") = weapon_shockrifle : "Shock Roach" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_saw.mdl") = weapon_m249 : "M249 SAW" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_m40a1.mdl") = weapon_sniperrifle : "Sniper Rifle" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_displacer.mdl") = weapon_displacer : "Displacer" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_spore_launcher.mdl") = weapon_sporelauncher : "Spore Launcher" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_medkit.mdl") = weapon_medkit : "Portable Medkit" []
@PointClass base(Weapon, WeaponInitAmmo) studio("models/w_uzi.mdl") = weapon_uzi : "Single UZI" []

@PointClass base(Pickup) = world_items : "World Items"
[
	type(choices) :"types" : 42 =
	[
		42: "Antidote"
		43: "Security Card"
		44: "Battery"
		45: "Suit"
	]
]

//
// Xen
//

@BaseClass base(Targetname, RenderFields, Angles) flags(Angle) = XenPlant
[
	scale(string) : "Scale (1.0 = normal size)"
	spawnflags(Flags) =
	[
		2 : "Drop to Floor" : 0
		4 : "Reserved (don't use)" : 0 : "Reserved for Sven Co-op 'Face Randomly' flag"
	]
]

@PointClass base(Target, XenPlant) size(-48 -48 0, 48 48 32 ) studio("models/light.mdl") = xen_plantlight : "Xen Plant Light"
[
	spawnflags(Flags) =
	[
		64 : "Ignore Player" 	: 0
	]
]
@PointClass base(XenPlant) size(-8 -8 0, 8 8 32 ) studio("models/hair.mdl") = xen_hair : "Xen Hair"
[
	spawnflags(Flags) =
	[
		1 : "Sync Movement" 	: 0
	]
]
@PointClass base(XenPlant) size(-24 -24 0, 24 24 188 ) studio("models/tree.mdl") = xen_tree : "Xen Tree"
[
	spawnflags(Flags) =
	[
		8 : "Non Solid" : 0
	]
]
@PointClass base(XenPlant) size(-16 -16 0, 16 16 64 ) studio("models/fungus(small).mdl") = xen_spore_small : "Xen Spore (small)"
[
	spawnflags(Flags) =
	[
		8 : "Non Solid" : 0
	]
]
@PointClass base(XenPlant) size(-40 -40 0, 40 40 120 ) studio("models/fungus.mdl") = xen_spore_medium : "Xen Spore (medium)"
[
	spawnflags(Flags) =
	[
		8 : "Non Solid" : 0
	]
]
@PointClass base(XenPlant) size(-90 -90 0, 90 90 220 ) studio("models/fungus(large).mdl") = xen_spore_large : "Xen Spore (large)"
[
	spawnflags(Flags) =
	[
		8 : "Non Solid" : 0
	]
]

@SolidClass base(Target, ZHLT) = func_op4mortarcontroller : "Op4 Mortar Controller"
[
    mortar_axis(Choices) : "Axis" : 0 =
    [
        0 : "Vertical"
        1 : "Horizontal"
    ]
]

@PointClass base(Targetname) studio("models/mortar.mdl") = op4mortar : "Op4 Mortar"
[
	spawnflags(Flags) =
	[
		1  : "Active" : 0
		16 : "Line of Sight" : 1
		32 : "Can Control" : 1
	]
	mortar_velocity(integer) : "Velocity" : 800
	h_min(integer) : "Horiz MIN" : -90
	h_max(integer) : "Horiz MAX" : 90
	mindist(integer) : "Min Target Dist" : 256
	maxdist(integer) : "Max Target Dist" : 2048
	enemytype(Choices) : "Enemy Type" : 0 =
	[
		0 : "Player"
		1 : "Ally"
		2 : "Random"
	]
	firedelay(integer) : "Fire Rate" : 5
]
